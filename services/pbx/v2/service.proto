syntax = "proto3";

package services.pbx.v2;

import "annotations/authz.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

service PBXService {
  // DEPRECATED: This method is deprecated and may be removed in future versions. (No longer need PBX Users)
  // Returns details of all PBX Users associated with the authenticated callers ORG
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc ListPBXUsers(ListPBXUsersRequest) returns (ListPBXUsersResponse) {
    option deprecated = true;
    option (google.api.http).post = "/services/pbx/v2/pbxservice/listpbxusers";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // DEPRECATED: This method is deprecated and may be removed in future versions. (No longer need PBX Users)
  // Returns details of the PBX User associated with the pbx_user_id
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.NotFound: The user does not exist or is not in the caller's ORG.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc GetPBXUser(GetPBXUserRequest) returns (GetPBXUserResponse) {
    option deprecated = true;
    option (google.api.http).post = "/services/pbx/v2/pbxservice/getpbxuser";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of all Ring Groups associated with the authenticated callers ORG
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc ListRingGroups(ListRingGroupsRequest) returns (ListRingGroupsResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/listringgroups";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of all Ring Groups associated with a specific sip account
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.NotFound: The sip account does not exist or is not in the caller's ORG.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc ListRingGroupsBySipId(ListRingGroupsBySipIdRequest) returns (ListRingGroupsBySipIdResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/listringgroupsbysipid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of the Ring Group associated with the ring_group_id
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc GetRingGroup(GetRingGroupRequest) returns (GetRingGroupResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/getringgroup";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of the SIP Account associated with the sip_id
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc GetSIPAccount(GetSIPAccountRequest) returns (GetSIPAccountResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/getsipaccount";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of the SIP Account associated with the org_user_id
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc GetSIPAccountByUserId(GetSIPAccountByUserIdRequest) returns (GetSIPAccountByUserIdResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/getsipaccountbyuserid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of all SIP Accounts associated with the authenticated callers ORG
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc ListSIPAccounts(ListSIPAccountsRequest) returns (ListSIPAccountsResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/listsipaccounts";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Returns details of all SIP Accounts associated with a specific ring group
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc ListSIPAccountsByRingGroupId(ListSIPAccountsByRingGroupIdRequest) returns (ListSIPAccountsByRingGroupIdResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/listsipaccountsbyringgroupid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_VIEW]
        }
      ]
    };
  }

  // Updates details of the SIP Account for the specific SIP Account within the authenticated callers ORG.
  // Allows for updating, activating, and deactivating a user.
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.AlreadyExists: The extension already exists
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc UpdateSIPAccount(UpdateSIPAccountRequest) returns (UpdateSIPAccountResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/updatesipaccount";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_EDIT]
        }
      ]
    };
  }

  // Updates details of a Ring Group for the authenticated callers ORG. This operation acts as an "upsert".
  //   - If the groupID is in the update mask and the group exists, the group will be updated.
  //   - If the groupID is not in the update mask a group will be created.
  // Allows for creating and updating a ring group.
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.AlreadyExists: The extension or name already exists.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc UpdateRingGroup(UpdateRingGroupRequest) returns (UpdateRingGroupResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/updateringgroup";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_EDIT]
        }
      ]
    };
  }

  // Creates a ring group for the authenticated caller's ORG.
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The request is invalid.
  //   - grpc.OutOfRange: The request has fields that are out of range of constraints
  //   - grpc.AlreadyExists: The extension or name already exists.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc CreateRingGroup(CreateRingGroupRequest) returns (CreateRingGroupResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/createringgroup";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_EDIT]
        }
      ]
    };
  }

  // Deletes a specific Ring Group for the authenticated caller's ORG.
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.InvalidArgument: The groupID is an invalid format.
  //   - grpc.NotFound: The group does not exist or is not in the caller's ORG.
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc DeleteRingGroup(DeleteRingGroupRequest) returns (DeleteRingGroupResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/deleteringgroup";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_EDIT]
        }
      ]
    };
  }

  // Assigns a random extension either to a PBX user or a Ring Group
  // Required permissions:
  //   PBX-MANAGER
  // Errors:
  //   - grpc.PermissionDenied: Caller doesn't have the required permissions.
  //   - grpc.NotFound: No free extension found.
  //   - grpc.Internal: An internal error occurred.
  //   - grpc.Unavailable: The operation is currently unavailable. Likely a transient issue with a downstream service.
  rpc AssignRandomExtension(AssignRandomExtensionRequest) returns (AssignRandomExtensionResponse) {
    option (google.api.http).post = "/services/pbx/v2/pbxservice/assignrandomextension";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_PBX_MANAGER_EDIT]
        }
      ]
    };
  }
}

// -------------------------
// Enums
// -------------------------
enum RingStrategy {
  RING_STRATEGY_UNSPECIFIED = 0;
  RING_STRATEGY_RING_ALL = 1;
  RING_STRATEGY_ROUND_ROBIN = 2;
  RING_STRATEGY_RANDOM = 3;
  RING_STRATEGY_ORDERED = 4;
}

// -------------------------
// Entity Definitions
// -------------------------

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
message PBXUser {
  string pbx_user_id = 1;
  string org_user_id = 2;
  repeated string sip_account_ids = 3;
}

// For displaying ring groups associated with an SIPAccount
message SIPAccountRingGroup {
  string ring_group_id = 1;
  string ring_group_name = 2;
}

message OrgSkill {
  string skill_sid = 1;
  string skill_name = 2;
}

message OrgPermissionGroup {
  string permission_group_id = 1;
  string permission_group_name = 2;
}

message OrgHuntGroup {
  string hunt_group_sid = 1;
  string hunt_group_name = 2;
}

message SIPAccount {
  string sip_id = 1;
  bool is_active = 2;
  string extension = 3;
  repeated string ring_group_ids = 4 [deprecated = true]; // DEPRECATED: We need names as well
  string org_user_id = 5;
  repeated SIPAccountRingGroup ring_groups = 6;
  string org_username = 7;
  string org_full_name = 8;
  OrgHuntGroup org_hunt_group = 9;
  repeated OrgSkill org_skills = 10;
  repeated OrgPermissionGroup org_permission_groups = 11;
}

message RingGroup {
  string id = 1;
  string name = 2;
  string description = 3;
  string extension = 4;
  RingStrategy ring_strategy = 5;
  repeated string sip_account_ids = 6;
}

// -------------------------
//  RPC Messages
// -------------------------

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
message ListPBXUsersRequest {}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
message ListPBXUsersResponse {
  repeated PBXUser users = 1;
}

message ListSIPAccountsRequest {}

message ListSIPAccountsResponse {
  repeated SIPAccount sip_accounts = 1;
}

message ListSIPAccountsByRingGroupIdRequest {
  string ring_group_id = 1;
}

message ListSIPAccountsByRingGroupIdResponse {
  repeated SIPAccount sip_accounts = 1;
}

message GetSIPAccountByUserIdRequest {
  string org_user_id = 1;
}

message GetSIPAccountByUserIdResponse {
  SIPAccount sip_account = 1;
}

message GetSIPAccountRequest {
  string sip_account_id = 1;
}

message GetSIPAccountResponse {
  repeated SIPAccount sip_account = 1;
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
message GetPBXUserRequest {
  string pbx_user_id = 1; // Required: To fetch a specific user by ID.
}

// DEPRECATED: This message is deprecated and may be removed in future versions. (No longer need PBX Users)
message GetPBXUserResponse {
  PBXUser user = 1;
}

message ListRingGroupsRequest {}

message ListRingGroupsResponse {
  repeated RingGroup groups = 1;
}

message ListRingGroupsBySipIdRequest {
  string sip_account_id = 1;
}

message ListRingGroupsBySipIdResponse {
  repeated RingGroup groups = 1;
}

message GetRingGroupRequest {
  string ring_group_id = 1; // Required: To fetch a specific group by ID.
}

message GetRingGroupResponse {
  RingGroup group = 1;
}

message UpdateSIPAccountRequest {
  SIPAccount sip_account = 1; // The sip account details to update.
  google.protobuf.FieldMask update_mask = 2; // Fields to be updated.
}

message UpdateSIPAccountResponse {
  SIPAccount sip_account = 1;
}

message UpdateRingGroupRequest {
  RingGroup group = 1;
  google.protobuf.FieldMask update_mask = 2; // Fields to be modified.
}

message UpdateRingGroupResponse {
  RingGroup group = 1;
}

message AssignRandomExtensionRequest {}

message AssignRandomExtensionResponse {
  string extension = 1;
}

message CreateRingGroupRequest {
  RingGroup group = 1; // Fields to be added into new Ring Group
}

message CreateRingGroupResponse {
  RingGroup group = 1;
}

message DeleteRingGroupRequest {
  string group_id = 1;
}

message DeleteRingGroupResponse {}
