syntax = "proto3";

package wfo.vanalytics.v2;

import "api/commons/acd.proto";
import "api/commons/vanalytics.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "wfo/vanalytics/v2/agent_call_log.proto";
import "wfo/vanalytics/v2/transcript_summary.proto";

// An enumeration of transcript communication channels.
enum Channel {
  CHANNEL_CALL = 0;
  CHANNEL_SMS = 1;
}

// An enumeration of a flagged transcripts review statuses. Todo means there
// are flags that need review and have not been reviewed. Done means every flag
// that needs review has been reviewed. None means no flags require review.
enum ReviewStatus {
  REVIEW_STATUS_TODO = 0;
  REVIEW_STATUS_DONE = 1;
  REVIEW_STATUS_NONE = 2;
}

// A textualized interaction between two or more participants.
message Transcript {
  // Channel specific transcript metadata.
  oneof metadata {
    // Call specific transcript metadata.
    Call call = 1;
    // Sms specific transcript metadata.
    Sms sms = 2;
  }

  reserved 11;

  // The communication channel of the transcript.
  Channel channel = 12;

  // The time the transcript was started.
  google.protobuf.Timestamp start_time = 13;

  // The time the transcript was marked as deleted.
  google.protobuf.Timestamp delete_time = 15;

  // The flag summary of the transcript.
  FlagSummary flag_summary = 16;

  // The unique identifier of the transcript.
  int64 transcript_sid = 17;

  // The summary for the transcript.
  TranscriptSummary summary = 18;
}

// FlagSummary defines a summary of flags which were applied to a transcript.
message FlagSummary {
  // The number of flags associated with the transcript.
  int32 count = 1;

  // The sum of the priorities of the flags associated with the transcript.
  int32 priority_sum = 2;

  // The highest priority of the flags associated with the transcript.
  int32 priority_max = 3;

  // Need Review provides info on the flags that need review.
  NeedReview need_review = 4;

  // Flags contain the flags and filters that are associated with the transcript.
  repeated Flag flags = 5;

  // The review status of the flagged transcript.
  ReviewStatus review_status = 6;

  // NeedReview defines flags which need to be reviewed.
  message NeedReview {
    // The sum of the priorities of the flags that need review.
    int32 priority_sum = 1;

    // The highest priority of the flags that need review.
    int32 priority_max = 2;

    // The number of flags that need review.
    int32 count = 3;

    // The Flag sids that need review.
    repeated int64 flag_sids = 4;
  }

  // Flag defines a flag that was applied to a transcript by one or more filters
  // along with a user review when one exists.
  message Flag {
    // The unique id of this flag.
    int64 flag_sid = 1;

    // The name of this flag.
    string name = 2;

    // The priority of this flag.
    int32 priority = 3;

    // The version of this flag.
    int64 version = 4;

    // Filters which applied this flag.
    repeated Filter filters = 5;

    // Determines whether this flag must be reviewed.
    bool must_review = 6;

    // Determines whether this flag must be notified.
    bool must_notify = 7;

    // The reviews of this flag.
    repeated Review reviews = 8;
  }

  // Filter defines a filter which applied some flag to some transcript.
  message Filter {
    // The join key in form [flag_sid:filter_sid].
    string join_key = 1;

    // The flag sid this filter belongs to.
    int64 flag_sid = 2;

    // The unique id of this filter.
    int64 filter_sid = 3;

    // The version of this filter.
    int64 version = 4;

    // The name of this filter.
    string name = 5;
  }

  // Review contains info on the flag review when one exists.
  message Review {
    // The join key in form [flag_sid:user_id].
    string join_key = 1;

    // The flag sid this review belongs to.
    int64 flag_sid = 2;

    // The user id of the reviewer.
    string user_id = 3;
  }
}

// Sms specific transcript metadata.
message Sms {
  // The unique identifier of the sms conversation.
  int64 conversation_sid = 1 [jstype = JS_STRING];

  // The text from the sms in threads.
  repeated Thread threads = 2;

  // The phone data.
  Phone phone = 3;

  // The phone number of the agent.
  string caller_id = 4;

  // The omni campain this sms belongs to.
  int64 campaign_sid = 5;

  // The phone data.
  message Phone {
    // The raw phone number.
    string raw = 12;
  }

  // A thread is the text from one participant.
  message Thread {
    // The unique identifier of the thread.
    int32 id = 1;

    // The text of the thread in segments.
    repeated Segment segments = 2;

    // The user id of the participant on this thread.
    string user_id = 3;
  }

  // A segment of text.
  message Segment {
    // The text in the segment.
    string text = 1;

    // The offset time duration from the beginning of the conversation.
    google.protobuf.Duration offset = 2;
  }
}

// Call specific transcript metadata.
message Call {
  // The unique identifier for the call.
  int64 call_sid = 1;

  // The type of call.
  api.commons.CallType.Enum call_type = 2;

  // The total audio time of a call.
  uint32 audio_time = 3;

  // The text from the call in threads.
  repeated Thread threads = 4;

  // The silence stats for this call.
  Silence silence = 5;

  // The stats for when 2 participants are talking at the same time.
  TalkOver talk_over = 6;

  // The total time duration of talk time in this call.
  google.protobuf.Duration talk_time = 7;

  // The phone number that initiated the call.
  string caller_id = 8;

  // The hunt group name for the agent who made the call.
  string group_name = 9;

  // The agent responses for this call.
  map<string, AgentResponse> agent_response = 10;

  // The hunt groups sids for this call.
  repeated int64 hunt_group_sids = 11;

  // The number format for numbers in the agent response for this call.
  string number_format = 12;

  // Agent call log for this call.
  AgentCallLog agent_call_log = 13;

  // The phone data.
  Phone phone = 14;

  // The audio bytes for this call.
  int64 audio_bytes = 16;

  // The phone data.
  message Phone {
    // The raw phone number.
    string raw = 12;
  }

  // AgentResponse contains the agent responses aka dispositions.
  message AgentResponse {
    repeated string values = 1;
  }

  // A thread is the text from one participant.
  message Thread {
    // The unique identifier of the thread.
    int32 id = 1;

    // The text of the thread in segments.
    repeated Segment segments = 2;

    // The user id of the participant on this thread.
    string user_id = 3;
  }

  // A segment of text.
  message Segment {
    // The text in the segment.
    string text = 1;

    // The offset time duration from the beginning of the conversation.
    google.protobuf.Duration offset = 2;

    // The duration of the segment.
    google.protobuf.Duration duration = 3;
  }

  // The talk over stats for the call.
  message TalkOver {
    // The talk over duration stats.
    Duration duration = 1;

    // The talk over occurence stats.
    Occurrence occurrence = 2;

    // The threshold in milliseconds of how much overlap is required
    // before it is considered talk over.
    uint32 threshold = 3;

    // The talk over duration stats.
    message Duration {
      // The total talk over duration in the call.
      google.protobuf.Duration total = 1;

      // The largest talk over duration in the call.
      google.protobuf.Duration max = 2;

      // The percentage of talk over in the call.
      uint32 percentage = 3;
    }

    // The talk over occurence stats.
    message Occurrence {
      // The total number of talk over occurences in the call.
      uint32 total = 1;
    }
  }

  // The silence stats for the call.
  message Silence {
    // The silence duration stats.
    Duration duration = 1;

    // The silence occurence stats.
    Occurrence occurrence = 2;

    // The threshold in milliseconds of how much time without talking is
    // required before it is considered silence.
    uint32 threshold = 3;

    // The silence duration stats.
    message Duration {
      // The total silence duration in the call.
      google.protobuf.Duration total = 1;

      // The largest silence duration in the call.
      google.protobuf.Duration max = 2;

      // The percentage of silence in the call.
      uint32 percentage = 3;
    }

    // The silence occurence stats.
    message Occurrence {
      // The total number of silence occurences in the call.
      uint32 total = 1;
    }
  }
}

// The request for the search transcripts RPC.
message SearchTranscriptsRequest {
  reserved 1;

  // Number of hits to include in response. Defaults to 10.
  uint32 page_size = 2;

  // The order by which transcripts will be listed. Follows SQL order by
  // syntax. When not provided the order defaults to transcript_sid asc.
  string order_by = 3;

  // A field mask which defines which transcript fields to return. When empty
  // all transcript fields will be returned.
  google.protobuf.FieldMask read_mask = 4;

  // Query by which to filter transcripts.
  TranscriptBoolQuery bool_query = 5;

  // The next page token from a previous response.
  string page_token = 6;

  // Configuration to enable and control text highlights.
  Highlight highlight = 7;
}

// Configuration to enable and control text highlights.
message Highlight {
  // The prefix for highlighted text. Defaults to "{{" when empty.
  string prefix = 1;

  // The suffix for highlighted text. Defaults to "}}" when empty.
  string suffix = 2;
}

// The response for the search transcripts RPC.
message SearchTranscriptsResponse {
  // One page of search response hits.
  repeated Hit hits = 1;

  // A page token which can be provided on a follow up request to retrieve the
  // next page of transcript hits.
  string next_page_token = 2;

  // A search response hit.
  message Hit {
    // A transcript which matched the transcript query.
    Transcript transcript = 1;
    reserved 2, 3;
  }
}

// Boolean query to filter transcripts.
message TranscriptBoolQuery {
  // Query constraints on transcript.
  TranscriptQuery transcript = 1;
}

// Query to filter transcripts.
message TranscriptQuery {
  // Query constraints on transcript sid.
  TranscriptSid transcript_sid = 1;

  // Query constraints on channel.
  Channel channel = 2;

  // Query constraints on metadata.
  Metadata metadata = 3;

  // Query constraints on threads.
  Threads threads = 4;

  // Query constraints on flag summary.
  FlagSummary flag_summary = 5;

  // Query constraints on start time.
  StartTime start_time = 6;

  // Query constraints on delete time.
  DeleteTime delete_time = 7;

  // Query constraints on phone.
  Phone phone = 8;

  // Query constraints on phone.
  message Phone {
    // Query constraints on phone country code.
    Cc cc = 1;

    // Query constraints on phone ndc (area code).
    Ndc ndc = 2;

    // Query constraints on phone subscriber number prefix.
    Prefix prefix = 3;

    // Query constraints on phone city.
    City city = 4;

    // Query constraints on phone iso2 country code.
    Iso2 iso2 = 5;

    // Query constraints on phone region code.
    RegionCode region_code = 6;

    // Query constraints on phone region name.
    RegionName region_name = 7;

    // Query constraints on phone time zone.
    TimeZone time_zone = 8;

    // Query constraints on phone number type.
    Type type = 9;

    // Query constraints on phone number utc.
    Utc utc = 10;

    // Query constraints on phone number location.
    Location location = 11;

    // Query constraints on raw phone number.
    Raw raw = 12;

    // Cc defines a query on the phone country code.
    message Cc {
      // Optional. Queries where cc in list provided.
      repeated string any = 1;
    }

    // Ndc defines a query on the phone ndc.
    message Ndc {
      // Optional. Queries where ndc in list provided.
      repeated string any = 1;
    }

    // Prefix defines a query on the phone prefix.
    message Prefix {
      // Optional. Queries where prefix in list provided.
      repeated string any = 1;
    }

    // City defines a query on the phone city.
    message City {
      // Optional. Queries where city in list provided.
      repeated string any = 1;
    }

    // Iso2 defines a query on the phone Iso2.
    message Iso2 {
      // Optional. Queries where iso2 in list provided.
      repeated string any = 1;
    }

    // RegionCode defines a query on the phone region code.
    message RegionCode {
      // Optional. Queries where region code in list provided.
      repeated string any = 1;
    }

    // RegionName defines a query on the phone region name.
    message RegionName {
      // Optional. Queries where region name in list provided.
      repeated string any = 1;
    }

    // TimeZone defines a query on the phone time zone.
    message TimeZone {
      // Optional. Queries where time zone in list provided.
      repeated string any = 1;
    }

    // Type defines a query on the phone type.
    message Type {
      // Optional. Queries where type in list provided.
      repeated string any = 1;
    }

    // Utc defines a query on the phone utc.
    message Utc {
      // Optional. Queries where utc in list provided.
      repeated float any = 1;
    }

    // Location defines a query on the phone location.
    message Location {
      ZipCodeProximity zip_code_proximity = 1;
      message ZipCodeProximity {
        // Required. Queries on phone number country code.
        string country_code = 1;
        // Required. Queries where phone location is within distance of zipcode.
        string zip_code = 2;
        // Required. Queries where phone location is within distance (km or mi) of zipcode. For example: 100km.
        string distance = 3;
      }
    }

    // Query constraints on raw phone number.
    message Raw {
      // Optional. Queries where phone number in list provided.
      repeated string any = 1;
    }
  }

  // Query constraints on transcript sid.
  message TranscriptSid {
    // Requires all transcript hits to have a transcript sid in the list.
    repeated int64 any = 1;
  }

  // Query constraints on channel.
  message Channel {
    // Requires all transcript hits to have a channel in the list.
    repeated wfo.vanalytics.v2.Channel any = 1;
  }

  // Query constraints on metadata.
  message Metadata {
    // Query constraints on call metadata.
    Call call = 1;

    // Query constraints on sms metadata.
    Sms sms = 2;
  }

  // Query constraints on call metadata.
  message Call {
    // Query constraints on call sid.
    CallSid call_sid = 1;

    // Query constraints on audio time.
    AudioTime audio_time = 2;

    // Query constraints on call type.
    CallType call_type = 3;

    // Query constraints on silence.
    Silence silence = 4;

    // Query constraints on talk over.
    TalkOver talk_over = 5;

    // Query constraints on talk time.
    TalkTime talk_time = 6;

    // Query constraints on caller id.
    CallerId caller_id = 7;

    // Query constraints on group name.
    GroupName group_name = 8;

    // Query constraints on agent response.
    AgentResponse agent_response = 9;

    // Query constraints on hunt group sids.
    HuntGroupSids hunt_group_sids = 10;

    // Query constraints on agent call log.
    AgentCallLogQuery agent_call_log = 12;

    // Query constraints on hunt group sids.
    message HuntGroupSids {
      // Requires all call specific transcript hits to have a hunt group sid
      // in the list.
      repeated int64 any = 1;
    }

    // Query constraints on agent response.
    message AgentResponse {
      // Optional. Groups AgentResponse conditions with logical and.
      repeated AgentResponse and = 1;

      // Optional. Groups AgentResponse conditions with logical or.
      repeated AgentResponse or = 2;

      // Optional. Queries for what does not match the agent response query.
      bool not = 3;

      // Optional. Key to query on.
      Key key = 4;

      // Optional. Queries values for the given keys. If no keys are provided then
      // it will run the query on all values.
      Values values = 5;

      // Optional. Queries values as numbers for the given keys.
      Numbers numbers = 6;

      // Values defines a query on values.
      message Values {
        // Optional. Queries where value in list provided.
        repeated string in = 1;

        // Optional. Queries where value for key starts with given string.
        string starts_with = 2;

        // Optional. Queries where value for key contains given string.
        string contains = 3;
      }

      // Numbers defines a query on values as numbers.
      message Numbers {
        // Optional. Queries where value in list provided.
        repeated double in = 1;

        // Optional. Queries where greater than or equal.
        google.protobuf.DoubleValue gte = 2;

        // Optional. Queries where less than or equal.
        google.protobuf.DoubleValue lte = 3;

        // Optional. Queries where greater than.
        google.protobuf.DoubleValue gt = 4;

        // Optional. Queries where less than.
        google.protobuf.DoubleValue lt = 5;

        // Optional. Queries where equal to.
        google.protobuf.DoubleValue eq = 6;
      }

      // Key defines a query on the key.
      message Key {
        // Optional. Queries where key in list provided.
        repeated string in = 1;

        // Optional. Queries where key starts with given string.
        string starts_with = 2;

        // Optional. Queries where key contains given string.
        string contains = 3;
      }
    }

    // Query constraints on call type.
    message CallType {
      // Requires all call specific transcript hits to have a call type in the
      // list.
      repeated api.commons.CallType.Enum any = 1;
    }

    // Query constraints on group name.
    message GroupName {
      // Requires all call specific transcript hits to have a group name in the
      // list.
      repeated string any = 1;
    }

    // Query constraints on call sid.
    message CallSid {
      // Requires all call specific transcript hits to have a call sid in the
      // list.
      repeated int64 any = 1;
    }

    // Query constraints on caller id.
    message CallerId {
      // Requires all call specific transcript hits to have a caller id in the
      // list.
      repeated string any = 1;
    }

    // Query constraints on audio time.
    message AudioTime {
      // Queries where greater than or equal.
      google.protobuf.Int32Value gte = 1;
      // Queries where less than or equal.
      google.protobuf.Int32Value lte = 2;
      // Queries where greater than.
      google.protobuf.Int32Value gt = 3;
      // Queries where less than.
      google.protobuf.Int32Value lt = 4;
    }

    // Query constraints on talk time.
    message TalkTime {
      // Queries where greater than or equal.
      google.protobuf.Duration gte = 1;
      // Queries where less than or equal.
      google.protobuf.Duration lte = 2;
      // Queries where greater than.
      google.protobuf.Duration gt = 3;
      // Queries where less than.
      google.protobuf.Duration lt = 4;
    }

    // Query constraints on talk over.
    message TalkOver {
      // Query constraints on talk over duration total.
      DurationTotal duration_total = 1;
      // Query constraints on talk over duration max.
      DurationMax duration_max = 2;
      // Query constraints on talk over occurrence total.
      OccurrenceTotal occurrence_total = 3;
      // Query constraints on talk over duration percentage.
      DurationPercentage duration_percentage = 4;

      // Query constraints on total duration.
      message DurationTotal {
        // Queries where greater than or equal.
        google.protobuf.Duration gte = 1;
        // Queries where less than or equal.
        google.protobuf.Duration lte = 2;
        // Queries where greater than.
        google.protobuf.Duration gt = 3;
        // Queries where less than.
        google.protobuf.Duration lt = 4;
      }

      // Query constraints on max duration.
      message DurationMax {
        // Queries where greater than or equal.
        google.protobuf.Duration gte = 1;
        // Queries where less than or equal.
        google.protobuf.Duration lte = 2;
        // Queries where greater than.
        google.protobuf.Duration gt = 3;
        // Queries where less than.
        google.protobuf.Duration lt = 4;
      }

      // Query constraints on total occurences.
      message OccurrenceTotal {
        // Queries where greater than or equal.
        google.protobuf.UInt32Value gte = 1;
        // Queries where less than or equal.
        google.protobuf.UInt32Value lte = 2;
        // Queries where greater than.
        google.protobuf.UInt32Value gt = 3;
        // Queries where less than.
        google.protobuf.UInt32Value lt = 4;
      }

      // Query constraints on duration percentage.
      message DurationPercentage {
        // Queries where greater than or equal.
        google.protobuf.UInt32Value gte = 1;
        // Queries where less than or equal.
        google.protobuf.UInt32Value lte = 2;
        // Queries where greater than.
        google.protobuf.UInt32Value gt = 3;
        // Queries where less than.
        google.protobuf.UInt32Value lt = 4;
      }
    }

    // Query constraints on silence.
    message Silence {
      // Query constraints on silence duration total.
      DurationTotal duration_total = 1;
      // Query constraints on silence duration max.
      DurationMax duration_max = 2;
      // Query constraints on silence occurrence total.
      OccurrenceTotal occurrence_total = 3;
      // Query constraints on silence duration percentage.
      DurationPercentage duration_percentage = 4;

      // Query constraints on total duration.
      message DurationTotal {
        // Queries where greater than or equal.
        google.protobuf.Duration gte = 1;
        // Queries where less than or equal.
        google.protobuf.Duration lte = 2;
        // Queries where greater than.
        google.protobuf.Duration gt = 3;
        // Queries where less than.
        google.protobuf.Duration lt = 4;
      }

      // Query constraints on max duration.
      message DurationMax {
        // Queries where greater than or equal.
        google.protobuf.Duration gte = 1;
        // Queries where less than or equal.
        google.protobuf.Duration lte = 2;
        // Queries where greater than.
        google.protobuf.Duration gt = 3;
        // Queries where less than.
        google.protobuf.Duration lt = 4;
      }

      // Query constraints on total occurences.
      message OccurrenceTotal {
        // Queries where greater than or equal.
        google.protobuf.UInt32Value gte = 1;
        // Queries where less than or equal.
        google.protobuf.UInt32Value lte = 2;
        // Queries where greater than.
        google.protobuf.UInt32Value gt = 3;
        // Queries where less than.
        google.protobuf.UInt32Value lt = 4;
      }

      // Query constraints on duration percentage.
      message DurationPercentage {
        // Queries where greater than or equal.
        google.protobuf.UInt32Value gte = 1;
        // Queries where less than or equal.
        google.protobuf.UInt32Value lte = 2;
        // Queries where greater than.
        google.protobuf.UInt32Value gt = 3;
        // Queries where less than.
        google.protobuf.UInt32Value lt = 4;
      }
    }
  }

  // Query constraints on sms metadata.
  message Sms {
    // Query constraints on conversation sid.
    ConversationSid conversation_sid = 1;

    // Query constraints on conversation sid.
    message ConversationSid {
      // Requires all sms specific transcript hits to have a conversation sid
      // in the list.
      repeated int64 any = 1 [jstype = JS_STRING];
    }
  }

  // Query constraints on threads.
  message Threads {
    // Query constraints on all threads in list.
    repeated Threads and = 1;

    // Query constraints on any threads in list.
    repeated Threads or = 2;

    // Query constraints on thread id.
    Id id = 4;

    // Query constraints on thread text.
    Text text = 5;

    // Query constraints on user id.
    UserId user_id = 6;

    // Query constraints on user id.
    message UserId {
      // Requires all transcript hits to have a user id in the list.
      repeated string any = 1;
    }

    // Query constraints on thread id.
    message Id {
      // Requires all transcript hits to have a thread id in the list.
      repeated int32 any = 1;
    }

    // Query constraints on thread text.
    message Text {
      // Query text terms with optional fuzziness.
      Match match = 1;

      // Query text phrases.
      SpanNear span_near = 2;

      /*
         Timespan determines where text must be matched within a transcript.
          +------+------+-------------------------------------------+
          | head | tail |              description                  |
          +------+------+-------------------------------------------+
          |    0 |    0 | match anywhere                            |
          |  +30 |  +60 | match between (head + 30) and (head + 60) |
          |    0 |  +30 | match between (head +  0) and (head + 30) |
          |    0 |  -30 | match between (head +  0) and (tail - 30) |
          |  -60 |  -30 | match between (tail - 60) and (tail - 30) |
          |  -30 |    0 | match between (tail - 30) and (tail -  0) |
          +------+------+-------------------------------------------+
      */
      Timespan timespan = 3;

      // Query text that does not match.
      bool not = 4;

      // Timespan determines where text must be matched within a transcript.
      message Timespan {
        // The start offset to query text from.
        google.protobuf.Duration head = 1;
        // The end offset to query text from.
        google.protobuf.Duration tail = 2;
      }
    }
  }

  // FlagSummary defines a query on flag summary fields.
  message FlagSummary {
    // Optional. Queries need review.
    NeedReview need_review = 1;

    // Optional. Queries review status.
    ReviewStatus review_status = 2;

    // Optional. Queries flags.
    Flags flags = 3;

    // Optional. Queries count.
    Count count = 4;

    // NeedReview defines a query on need review fields.
    message NeedReview {
      // Optional. Queries flag sids.
      FlagSids flag_sids = 1;

      // FlagSids defines a query on flag sids.
      message FlagSids {
        // Optional. Must have any provided flag sids.
        repeated int64 any = 1;
      }
    }

    // ReviewStatus defines a query on review status.
    message ReviewStatus {
      // Optional. Must have any provided review status.
      repeated wfo.vanalytics.v2.ReviewStatus any = 1;
    }

    // Flags defines a query on flags.
    message Flags {
      // Optional. Queries flag sid.
      FlagSid flag_sid = 1;

      // FlagSid defines a query on flag sid.
      message FlagSid {
        // Optional. Must have any of the provided flag sids.
        repeated int64 any = 1;

        // Optional. Must have all of the provided flag sids.
        repeated int64 all = 2;
      }
    }

    // Count defines a query on count.
    message Count {
      // Optional. Queries count greater than or equal.
      google.protobuf.Int32Value gte = 1;
      // Optional. Queries count less than or equal.
      google.protobuf.Int32Value lte = 2;
      // Optional. Queries count greater than.
      google.protobuf.Int32Value gt = 3;
      // Optional. Queries count less than.
      google.protobuf.Int32Value lt = 4;
      // Optional. Queries count equal to.
      google.protobuf.Int32Value eq = 5;
    }
  }

  // Query constraints on start time.
  message StartTime {
    // Queries where greater than or equal.
    google.protobuf.Timestamp gte = 1;
    // Queries where less than or equal.
    google.protobuf.Timestamp lte = 2;
    // Queries where greater than.
    google.protobuf.Timestamp gt = 3;
    // Queries where less than.
    google.protobuf.Timestamp lt = 4;
    // Optional. Dynamic time period to match.
    Moment moment = 5;
  }

  // Query constraints on delete time.
  message DeleteTime {
    // Queries where greater than or equal.
    google.protobuf.Timestamp gte = 1;
    // Queries where less than or equal.
    google.protobuf.Timestamp lte = 2;
    // Queries where greater than.
    google.protobuf.Timestamp gt = 3;
    // Queries where less than.
    google.protobuf.Timestamp lt = 4;
  }
}

message Moment {
  // Required. Timezone of the client.
  string time_zone = 1;

  // Optional. Dynamic time period to match which
  // defaults to today.
  api.commons.Interval interval = 2;
}

/*
   Defines an automatic max allowable edit distance based on the length of the
   text to match.

     length  <  low -- Must match exactly.
     length  < high -- Must match with one edit allowed.
     length >= high -- Must match with two edits allowed.
*/
message FuzzinessAuto {
  // The low length threshold.
  uint32 low = 1;

  // The high length threshold.
  uint32 high = 2;
}

// Query text terms with optional fuzziness.
message Match {
  // Required. The text to be matched. The field may contain multiple terms
  // to match when separated by spaces.
  string text = 1;

  // Determines whether any or all of the terms must be matched. Operator must
  // be one of: (AND, OR). Defaults to OR when empty.
  string operator = 2;

  // Fuzziness controls the maximum edit distance that a similar term can have
  // and be considered a match. For example, the edit distance between cat and
  // bat would be 1 since only one letter is different. The edit distance
  // between unity and united would be 2. Fuzziness auto is recommended.
  oneof fuzziness {
    // Variable fuzziness based on the match term length.
    FuzzinessAuto fuzziness_auto = 15;

    // Constant fuzziness with allowed range from 0, 1 and 2.
    uint32 fuzziness_value = 16;
  }
}

// Query which matches a list of clauses that are near to each other.
message SpanNear {
  // The number of allowed non matching terms within the span. For example, a
  // slop of 2 when searching for "This is my dog" would allow a match on
  // "This is my quick brown dog".
  int32 slop = 1;

  // Requires clauses to be matched in the order.
  bool in_order = 2;

  // Required. The clauses to be matched.
  repeated Clause clauses = 3;

  // Generic clause for use in span near queries.
  message Clause {
    // Generic clause matcher.
    oneof match {
      // A span near clause to match a phrase.
      SpanNear span_near = 1;
      // A span near clause to match a fuzzy term.
      SpanFuzzy span_fuzzy = 2;
      // A span near clause to match a term.
      SpanTerm span_term = 3;
    }
  }
}

// Query which matches a span term exactly.
message SpanTerm {
  // Required. The value to be matched.
  string value = 1;
}

// Query which matches a span term with fuzziness.
message SpanFuzzy {
  // Required. The value to be fuzzy matched.
  string value = 1;

  // Fuzziness controls the maximum edit distance that a similar term can have
  // and be considered a match. For example, the edit distance between cat and
  // bat would be 1 since only one letter is different. The edit distance
  // between unity and united would be 2. Fuzziness auto is recommended.
  oneof fuzziness {
    // Variable fuzziness based on the match term length.
    FuzzinessAuto fuzziness_auto = 10;

    // Constant fuzziness with allowed range from 0, 1 and 2.
    uint32 fuzziness_value = 11;
  }
}

// [BULK_DELETE] ===============================================================

// BulkDeleteTranscriptsRequest defines the bulk delete transcripts request.
message BulkDeleteTranscriptsRequest {
  // Required. A query which determines which transcripts to delete.
  TranscriptQuery query = 1;
}

// BulkDeleteTranscriptsResponse defines the bulk delete transcripts response.
message BulkDeleteTranscriptsResponse {
  // The number of transcripts deleted.
  uint32 total = 1;
}

// [BULK_RESTORE] ===============================================================

// BulkRestoreTranscriptsRequest defines the bulk restore transcripts request.
message BulkRestoreTranscriptsRequest {
  // Required. A query which determines which transcripts to restore.
  TranscriptQuery query = 1;
}

// BulkRestoreTranscriptsResponse defines the bulk restore transcripts response.
message BulkRestoreTranscriptsResponse {
  // The number of transcripts restored.
  uint32 total = 1;
}

// [LIST GROUP NAMES] ===========================================================

// ListTranscriptGroupNamesRequest is a request for listing group names.
message ListTranscriptGroupNamesRequest {}

// ListTranscriptGroupNamesResponse is a response for listing group names.
message ListTranscriptGroupNamesResponse {
  // Group names are the transcript group names.
  repeated TranscriptGroupName group_names = 1;
}

// TranscriptGroupName is the transcript group name.
message TranscriptGroupName {
  // value is a group name value.
  string value = 1;
}

// [LIST AGENT RESPONSE VALUES] ===========================================================

// ListAgentResponseValuesRequest is a request for listing agent reponse values.
message ListAgentResponseValuesRequest {
  string key = 2;
}

// ListAgentResponseValuesResponse is a response for listing agent response values.
message ListAgentResponseValuesResponse {
  // Values are the transcript agent response values.
  repeated string values = 1;
}
