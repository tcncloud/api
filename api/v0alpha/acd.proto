// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package api.v0alpha;

import "annotations/authz.proto";
import "api/commons/acd.proto";
import "api/commons/integrations/integrations.proto";
import "api/v1alpha1/integrations/service.proto";
import "google/api/annotations.proto";

// Service for interacting with TCN's Agent Call Distribution system.
// Accessing all of the methods require an authenticated user with the correct
// permissions.
service Acd {
  // Register an agent defined by AgentRegisterRequest message.
  // This method can be used only once, recalling this method for an
  // existing agent it will terminate the audio and web stream.
  // The method will return an AgentRegisterReply message that will
  // contain all the necessary informations to establish the audio channel
  // for the agent.
  // See also:
  // api/p3api.proto#P3Api.GetAgentSession() method
  // Required permissions:
  //      TODO: add the required permissions here
  // Errors:
  //      TODO: add the real error messages here
  //    - grpc.Invalid: either the session_sid or hunt_group_id provided in request are invalid,
  //              check the associated error message for extra information
  //    - grpc.NotFound:

  rpc AgentGetStatusStream(AgentGetStatusRequest) returns (stream AgentGetStatusReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentgetstatusstream";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentGetStatus(AgentGetStatusRequest) returns (AgentGetStatusReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentgetstatus";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentGetConnectedParty(AgentGetConnectedPartyRequest) returns (AgentGetConnectedPartyReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentgetconnectedparty";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc ManagerAgentGetConnectedParty(ManagerAgentGetConnectedPartyRequest) returns (ManagerAgentGetConnectedPartyReply) {
    option (google.api.http).post = "/api/v0alpha/acd/manageragentgetconnectedparty";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT_MANAGEMENT]
        }
      ]
    };
  }

  rpc AgentIntercom(AgentIntercomRequest) returns (AgentIntercomReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentIntercom";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentIntercomAccept(AgentIntercomAcceptRequest) returns (AgentIntercomAcceptReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentintercomaccept";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentIntercomReject(AgentIntercomRejectRequest) returns (AgentIntercomRejectReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentintercomreject";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentIntercomCancel(AgentIntercomCancelRequest) returns (AgentIntercomCancelReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentintercomcancel";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc DialManualPrepare(DialManualPrepareRequest) returns (DialManualPrepareReply) {
    option (google.api.http).post = "/api/v0alpha/acd/dialmanualprepare";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc DialManualCancel(DialManualCancelRequest) returns (DialManualCancelReply) {
    option (google.api.http).post = "/api/v0alpha/acd/dialmanualcancel";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc DialPreviewPrepare(DialPreviewPrepareRequest) returns (DialPreviewPrepareReply) {
    option (google.api.http).post = "/api/v0alpha/acd/dialpreviewprepare";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentPause(AgentPauseRequest) returns (AgentPauseReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentpause";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentSetReady(AgentSetReadyRequest) returns (AgentSetReadyReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentsetready";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentGUIBusy(AgentGUIBusyRequest) returns (AgentGUIBusyReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentguibusy";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc ReportAgentSessionEvent(AgentSessionEventReq) returns (AgentSessionEventRes) {
    option (google.api.http).post = "/api/v0alpha/acd/reportagentsessionevent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc CallerRequeue(CallerRequeueRequest) returns (CallerRequeueReply) {
    option (google.api.http).post = "/api/v0alpha/acd/callerrequeue";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentDisconnect(AgentDisconnectRequest) returns (AgentDisconnectReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentdisconnect";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferWarmToOutboundCancel(TransferWarmToOutboundCancelRequest) returns (TransferWarmToOutboundCancelReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtooutboundcancel";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferWarmToAgentCancel(TransferWarmToAgentCancelRequest) returns (TransferWarmToAgentCancelReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtoagentcancel";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferWarmToOutboundApprove(TransferWarmToOutboundApproveRequest) returns (TransferWarmToOutboundApproveReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtooutboundapprove";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc TransferWarmToAgentApprove(TransferWarmToAgentApproveRequest) returns (TransferWarmToAgentApproveReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtoagentapprove";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc CallerSendToVoicemail(CallerSendToVoicemailRequest) returns (CallerSendToVoicemailReply) {
    option (google.api.http).post = "/api/v0alpha/acd/callersendtovoicemail";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentInviteTransferCallerToConference(AgentInviteTransferCallerToConferenceRequest) returns (AgentInviteTransferCallerToConferenceReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentinvitetransfercallertoconference";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentMonitorCalls(AgentMonitorCallsRequest) returns (AgentMonitorCallsReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentmonitorcalls";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferColdToOutbound(TransferColdToOutboundRequest) returns (TransferColdToOutboundReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transfercoldtooutbound";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferColdToAgent(TransferColdToAgentRequest) returns (TransferColdToAgentReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transfercoldtoagent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc TransferWarmToOutboundStart(TransferWarmToOutboundStartRequest) returns (TransferWarmToOutboundStartReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtooutboundstart";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // creates a new outbound transfer member using the given src/dst numbers
  rpc CreateWarmOutboundTransferMember(CreateWarmOutboundTransferMemberRequest) returns (CreateWarmOutboundTransferMemberReply) {
    option (google.api.http).post = "/api/v0alpha/acd/createwarmoutboundtransferdmember";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // hangups a transfer member using the given member identifier
  rpc RemoveTransferMember(RemoveTransferMemberRequest) returns (RemoveTransferMemberReply) {
    option (google.api.http).post = "/api/v0alpha/acd/deletewarmoutboundtransferdmember";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc TransferWarmToAgentStart(TransferWarmToAgentStartRequest) returns (TransferWarmToAgentStartReply) {
    option (google.api.http).post = "/api/v0alpha/acd/transferwarmtoagentstart";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentGetCallFromHold(AgentGetCallFromHoldRequest) returns (AgentGetCallFromHoldReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentgetcallfromhold";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentGetSpecificCallFromHold(AgentGetSpecificCallFromHoldRequest) returns (AgentGetSpecificCallFromHoldReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentgetspecificcallfromhold";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc ACDGetAllAgentsStatuses(ACDGetAllAgentsStatusesRequest) returns (ACDGetAllAgentsStatusesReply) {
    option (google.api.http).post = "/api/v0alpha/acd/acdgetallagentsstatuses";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentPutCallOnHold(AgentPutCallOnHoldRequest) returns (AgentPutCallOnHoldReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentputcallonhold";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentReceiveMessage(AgentReceiveMessageRequest) returns (AgentReceiveMessageReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentreceivemessage";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentPBXApproveCall(AgentPBXApproveCallRequest) returns (AgentPBXApproveCallReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentpbxapprovecall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc AgentPBXRejectCall(AgentPBXRejectCallRequest) returns (AgentPBXRejectCallReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentpbxrejectcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc GetCallerLostPeer(GetCallerLostPeerRequest) returns (GetCallerLostPeerReply) {
    option (google.api.http).post = "/api/v0alpha/acd/getcallerlostpeer";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc CallerGetRawEvent(CallerGetRawEventRequest) returns (CallerGetRawEventReply) {
    option (google.api.http).post = "/api/v0alpha/acd/getcallerraweventreply";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc PeerAgentWithCaller(PeerAgentWithCallerRequest) returns (PeerAgentWithCallerReply) {
    option (google.api.http).post = "/api/v0alpha/acd/peeragentwithcaller";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc HoldTransferMember(HoldTransferMemberReq) returns (HoldTransferMemberRes) {
    option (google.api.http).post = "/api/v0alpha/acd/mutetransferpartymember";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc UnholdTransferMember(UnholdTransferMemberReq) returns (UnholdTransferMemberRes) {
    option (google.api.http).post = "/api/v0alpha/acd/unmutetransfermember";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc GetAgentCallCounts(GetAgentCallCountsReq) returns (GetAgentCallCountsRes) {
    option (google.api.http).post = "/api/v0alpha/acd/getagentcallcounts";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to start a warm caller transfer
  rpc WarmCallerTransferStart(WarmCallerTransferStartReq) returns (WarmCallerTransferStartRes) {
    option (google.api.http).post = "/api/v0alpha/acd/warmcallertransferstart";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to cancel a warm caller transfer
  rpc WarmCallerTransferCancel(WarmCallerTransferCancelReq) returns (WarmCallerTransferCancelRes) {
    option (google.api.http).post = "/api/v0alpha/acd/warmcallertransfercancel";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to approve a warm caller transfer
  rpc WarmCallerTransferApprove(WarmCallerTransferApproveReq) returns (WarmCallerTransferApproveRes) {
    option (google.api.http).post = "/api/v0alpha/acd/warmcallertransferapprove";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to play a soundboard file for a customer
  rpc PlaySoundboardEntity(PlaySoundboardEntityReq) returns (PlaySoundboardEntityRes) {
    option (google.api.http).post = "/api/v0alpha/acd/playsoundboardentity";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to stop a soundboard file for a customer
  rpc StopSoundboardEntity(StopSoundboardEntityReq) returns (StopSoundboardEntityRes) {
    option (google.api.http).post = "/api/v0alpha/acd/stopsoundboardentity";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to update an agent's skills
  rpc UpdateAgentSkills(UpdateAgentSkillsRequest) returns (UpdateAgentSkillsReply) {
    option (google.api.http).post = "/api/v0alpha/acd/updateagentskills";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to play a dtmf tone to all members of a the agent's conference
  rpc PlayDTMF(PlayDTMFRequest) returns (PlayDTMFReply) {
    option (google.api.http).post = "/api/v0alpha/acd/playdtmf";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to mute and agent's mic
  rpc AgentMute(AgentMuteRequest) returns (AgentMuteReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentmute";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // endpoint used to unmute and agent's mic
  rpc AgentUnmute(AgentUnmuteRequest) returns (AgentUnmuteReply) {
    option (google.api.http).post = "/api/v0alpha/acd/agentunmute";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  rpc StartSecureForm(StartSecureFormReq) returns (StartSecureFormRes) {
    option (google.api.http).post = "/api/v0alpha/acd/startsecureform";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc CollectSecureFormField(CollectSecureFormFieldReq) returns (stream CollectSecureFormFieldRes) {
    option (google.api.http).post = "/api/v0alpha/acd/collectsecureformfield";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc ResetSecureFormField(ResetSecureFormFieldReq) returns (ResetSecureFormFieldRes) {
    option (google.api.http).post = "/api/v0alpha/acd/resetsecureformfield";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc AcceptSecureFormField(AcceptSecureFormFieldReq) returns (AcceptSecureFormFieldRes) {
    option (google.api.http).post = "/api/v0alpha/acd/acceptsecureformfield";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc ProcessSecureForm(ProcessSecureFormReq) returns (ProcessSecureFormRes) {
    option (google.api.http).post = "/api/v0alpha/acd/processsecureform";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc FinishSecureFormHandling(FinishSecureFormHandlingReq) returns (FinishSecureFormHandlingRes) {
    option (google.api.http).post = "/api/v0alpha/acd/finishsecureformhandling";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [
            PERMISSION_AGENT,
            PERMISSION_AGENT_ASSISTED_PORTAL
          ]
        }
      ]
    };
  }
  rpc PopulateWorkflowFields(PopulateWorkflowFieldsReq) returns (PopulateWorkflowFieldsRes) {
    option (google.api.http).post = "/api/v0alpha/acd/populateworkflowfields";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }
  rpc ValidateField(ValidateFieldReq) returns (ValidateFieldRes) {
    option (google.api.http).post = "/api/v0alpha/acd/validatefield";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }
  rpc ListAgentsVoiceStatuses(ListAgentsVoiceStatusesRequest) returns (ListAgentsVoiceStatusesReply) {
    option (google.api.http).post = "/api/v0alpha/acd/listagentsvoicestatuses";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }
}

message AgentGetStatusRequest {
  int64 session_sid = 1;
  bool perform_keep_alive = 2;
}

message AgentGetStatusReply {
  int64 status = 2;
  api.commons.AgentStatus.Enum status_desc = 3;
  bool paused = 4;
  string queue = 5;
  int64 current_session_id = 6;
  int64 last_status_change = 7;
  bool monitoring = 8;
  int64 calls_count = 9;
  int64 last_sip_code = 10;
  bool agent_peer_is_lost_call = 11;
  bool disabled = 12;
  bool keep_alive_succeeded = 13;
  repeated api.commons.TransferMember transfer_members = 14;
  bool agent_is_muted = 15;
}

message AgentGetConnectedPartyRequest {
  int64 session_sid = 1;
  string user_id = 2;
}

message AgentGetConnectedPartyReply {
  int64 call_id = 2;
  api.commons.CallType.Enum call_type = 3;
}

message ManagerAgentGetConnectedPartyRequest {
  int64 session_sid = 1;
  string user_id = 2;
}

message ManagerAgentGetConnectedPartyReply {
  int64 call_id = 2;
  api.commons.CallType.Enum call_type = 3;
}

message AgentIntercomRequest {
  int64 target_agent_id = 3;
  int64 session_sid = 4;
}

message AgentIntercomReply {}

message AgentIntercomAcceptRequest {
  int64 session_sid = 1;
}

message AgentIntercomAcceptReply {}

message AgentIntercomRejectRequest {
  int64 session_sid = 1;
}

message AgentIntercomRejectReply {}

message AgentIntercomCancelRequest {
  int64 session_sid = 1;
}

message AgentIntercomCancelReply {}

message DialManualPrepareRequest {
  int64 session_sid = 1;
}

message DialManualPrepareReply {}

message DialManualCancelRequest {
  int64 session_sid = 1;
}

message DialManualCancelReply {}

message DialPreviewPrepareRequest {
  int64 session_sid = 1;
}

message DialPreviewPrepareReply {}

message AgentPauseRequest {
  int64 session_sid = 1;
  string reason = 2;
}

message AgentPauseReply {}

message AgentSetReadyRequest {
  int64 session_sid = 1;
}

message AgentSetReadyReply {}

message AgentGUIBusyRequest {
  int64 session_sid = 1;
}

message AgentGUIBusyReply {}

message AgentDisconnectRequest {
  // TODO: reason - will need to be converted to use an ENUM.
  string reason = 1;
  int64 session_sid = 2;
}

message AgentDisconnectReply {}

message AgentSessionEventReq {
  int64 agent_session_sid = 3;
  api.commons.AgentSessionLogActionKey.Enum action_key = 10;
  string action_value = 11;
}

message AgentSessionEventRes {}

message CallerRequeueRequest {
  string new_config_folder = 3;
  map<string, bool> skills = 4;
  bool replace_skills = 5;
  api.commons.ReplaceConfig.Enum replace_config = 6;
  int64 session_sid = 7;
  // the voicemail extesion to use for the caller
  string voicemail_box = 8;
}

message CallerRequeueReply {}

message TransferWarmToAgentCancelRequest {
  reserved 3;
  int64 session_sid = 4;
}

message TransferWarmToAgentCancelReply {}

message TransferWarmToOutboundCancelRequest {
  int64 session_sid = 1;
}

message TransferWarmToOutboundCancelReply {}

message TransferWarmToAgentApproveRequest {
  reserved 3;
  int64 session_sid = 4;
}

message TransferWarmToAgentApproveReply {}

// the request used to approve a warm outbound transfer
message TransferWarmToOutboundApproveRequest {
  // the session sid of the current agent
  int64 session_sid = 1;
  // the ids of the transfer member to want to be joined with the caller
  // it will hang up all others (you don't need need to include the caller)
  // If you leave this blank/empty it will include all members in the approval
  repeated string member_identifiers = 2;
}

message TransferWarmToOutboundApproveReply {}

message CallerSendToVoicemailRequest {
  string mailbox = 3;
  int64 session_sid = 4;
}

message CallerSendToVoicemailReply {}

message AgentInviteTransferCallerToConferenceRequest {
  int64 session_sid = 1;
}

message AgentInviteTransferCallerToConferenceReply {}

message AgentMonitorCallsRequest {
  bool monitor = 3;
  int64 session_sid = 4;
}

message AgentMonitorCallsReply {}

message TransferColdToOutboundRequest {
  string caller_id = 3;
  string destination = 4;
  repeated string reserved_carriers = 5;
  int64 session_sid = 6;
}

message TransferColdToOutboundReply {}

message TransferColdToAgentRequest {
  int64 destination_agent_id = 3;
  int64 session_sid = 4;
}

message TransferColdToAgentReply {}

message TransferWarmToOutboundStartRequest {
  string caller_id = 3;
  string destination = 4;
  repeated string reserved_carriers = 5;
  bool caller_hold = 6;
  int64 session_sid = 7;
}

message TransferWarmToOutboundStartReply {}

// request to add a new outbound transfer member
message CreateWarmOutboundTransferMemberRequest {
  // where the call should look like it comming from
  string caller_id = 3;
  // where the call should go to
  string destination = 4;
  // specific carriers to use
  repeated string reserved_carriers = 5;
  // the session sid for the agent
  int64 session_sid = 6;
}

// request to add a new outbound transfer member
message CreateWarmOutboundTransferMemberReply {}

// request to add a new outbound transfer member
message RemoveTransferMemberRequest {
  // the id of the member to be hungup
  string member_identifier = 1;
  // the session sid for the agent
  int64 session_sid = 2;
}

// request to hangup a transfer member
message RemoveTransferMemberReply {}

message TransferWarmToAgentStartRequest {
  int64 destination_agent_id = 3;
  bool caller_hold = 4;
  int64 session_sid = 5;
  map<string, bool> skills = 6;
}

message TransferWarmToAgentStartReply {}

message AgentGetCallFromHoldRequest {
  int64 session_sid = 1;
}

message AgentGetCallFromHoldReply {}

message AgentGetSpecificCallFromHoldRequest {
  int64 call_id = 3;
  api.commons.CallType.Enum call_type = 4;
  int64 session_sid = 5;
}

message AgentGetSpecificCallFromHoldReply {}

message AgentPutCallOnHoldRequest {
  api.commons.HoldType hold_type = 1;
  int64 session_sid = 2;
}

message AgentPutCallOnHoldReply {}

message ACDGetAllAgentsStatusesRequest {
  repeated string skills = 2;
  bool all_skills_required = 3;
}

message AgentStatusDetails {
  int64 sid = 1;
  int64 current_session_id = 2;
  int64 status = 3;
  api.commons.AgentStatus.Enum status_desc = 4;
  // The users id
  string user_id = 5;
}

message ACDGetAllAgentsStatusesReply {
  repeated AgentStatusDetails agent_status_details = 1;
}

message AgentReceiveMessageRequest {
  int64 minimum_timestamp = 3;
  int64 session_sid = 4;
}

message AgentReceiveMessageReply {
  string message = 2;
  int64 timestamp = 3;
}

message AgentPBXRejectCallRequest {
  int64 session_sid = 1;
}

message AgentPBXRejectCallReply {}

message AgentPBXApproveCallRequest {
  int64 session_sid = 1;
}

message AgentPBXApproveCallReply {}

message GetCallerLostPeerRequest {
  int64 call_sid = 1;
  api.commons.CallType.Enum call_type = 2;
}

message GetCallerLostPeerReply {
  reserved 1;
  int64 hunt_group_sid = 2;
}

message CallerGetRawEventRequest {
  int64 call_sid = 1;
  api.commons.CallType.Enum call_type = 2;
}

message CallerGetRawEventReply {
  CallerEvent event = 1;
}

// This is the front end version of the caller event. If more data is needed we can add.
message CallerEvent {
  map<string, bool> skills = 19;
  map<string, bool> allSkills = 20;
}

message PeerAgentWithCallerRequest {
  int64 call_sid = 1;
  api.commons.CallType.Enum call_type = 2;
  int64 session_sid = 3;
}

message PeerAgentWithCallerReply {}

message HoldTransferMemberReq {
  int64 session_sid = 1;
  string member_identifier = 2;
}

message HoldTransferMemberRes {}

message UnholdTransferMemberReq {
  int64 session_sid = 1;
  string member_identifier = 2;
}

message UnholdTransferMemberRes {}

message GetAgentCallCountsReq {
  repeated string agent_skills = 1;
  repeated string agent_pbx_extensions = 2;
}
message GetAgentCallCountsRes {
  int64 agent_calls = 1;
  int64 skill_calls = 2;
  int64 on_hold_calls = 3;
}

// message used to start a warm caller transfer
message WarmCallerTransferStartReq {
  // the session sid for the agent
  int64 session_sid = 1;
  // the sid for the destination caller
  int64 call_sid = 2;
  // the type for the destination caller
  api.commons.CallType.Enum call_type = 3;
  // whether or not we should mute current caller ro not
  bool caller_hold = 4;
}

// message used in response to start a warm caller transfer
message WarmCallerTransferStartRes {}

// message used to cancel a warm caller transfer
message WarmCallerTransferCancelReq {
  // the session sid for the agent
  int64 session_sid = 1;
  // the reason for the cancel
  string reason = 2;
}

// message used in response to canceling a wamr caller transfer
message WarmCallerTransferCancelRes {}

// message used to approve a warm caller transfer
message WarmCallerTransferApproveReq {
  // the session sid for the agent
  int64 session_sid = 1;
  // the reason for the approve
  string reason = 2;
}

// message used in response to approving a wamr caller transfer
message WarmCallerTransferApproveRes {}

// message used in a request for playing audio from the soundboard
message PlaySoundboardEntityReq {
  // the session sid for the agent
  int64 session_sid = 1;
  // the id of the requested soundboard entity to play
  int64 soundboard_entity_id = 2 [jstype = JS_STRING];
}

// message used in a response for playing audio from the soundboard
message PlaySoundboardEntityRes {
  // the id of the instance of sound being played
  string sound_instance_id = 1;
}

// message used in a request for stopping audio from the soundbooard
message StopSoundboardEntityReq {
  // the session sid for the agent
  int64 session_sid = 1;
  // the id of the instance of sound being played
  string sound_instance_id = 2;
}

// message used in a response for stopping audio from the soundbooard
message StopSoundboardEntityRes {}

// message used to update an agent's skills
message UpdateAgentSkillsRequest {
  // the session sid for the agent
  int64 session_sid = 1;
  // the skills to update
  map<string, int64> skills = 2;
  // true to replace the skills or false to add them
  bool replace_skills = 4;
}

// message used in response to updating an agent's skills
message UpdateAgentSkillsReply {}

// message used to play a dtmf tone in an agent's conference
message PlayDTMFRequest {
  // the session sid for the agent
  int64 session_sid = 1;
  // the dtmf tone to play
  repeated api.commons.DTMFDigit dtmf_digits = 2;
}

// message used in response to playing a dtmf tone in an agent's conference
message PlayDTMFReply {}

message AgentMuteRequest {
  // the session sid for the agent
  int64 session_sid = 1;
}

message AgentMuteReply {}

message AgentUnmuteRequest {
  // the session sid for the agent
  int64 session_sid = 1;
}

message AgentUnmuteReply {}

message StartSecureFormReq {
  string portal_id = 1;
  int64 voice_session_sid = 2;
}
message StartSecureFormRes {}

message CollectSecureFormFieldReq {
  string field_name = 1;
  int64 voice_session_sid = 2;
}
message CollectSecureFormFieldRes {}

message ResetSecureFormFieldReq {
  int64 voice_session_sid = 1;
}
message ResetSecureFormFieldRes {}

message AcceptSecureFormFieldReq {
  int64 voice_session_sid = 1;
}
message AcceptSecureFormFieldRes {}

message ProcessSecureFormReq {
  map<string, api.v1alpha1.integrations.Value> values = 1;
  string portal_id = 2;
  // segment tells us which workflow segment needs processing
  int32 segment = 3;
  // which choice in the workflow array to be processed
  int32 choice = 4;
  int64 voice_session_sid = 5;
}
message ProcessSecureFormRes {
  bool success = 1;
  // the response data from the process
  map<string, api.v1alpha1.integrations.Value> data = 2;
}

message FinishSecureFormHandlingReq {
  string reason = 1;
  map<string, api.v1alpha1.integrations.Value> data = 2;
  int64 voice_session_sid = 3;
}
message FinishSecureFormHandlingRes {}

message PopulateWorkflowFieldsReq {
  int64 client_sid = 1;
  int64 agent_sid = 2;
  int64 call_sid = 3;
  .api.commons.CallType.Enum call_type = 4;
  string scheduled_callback_id = 5;
  //field_definitions are all the fields that we will check if they have already been collected during the IVR
  repeated api.commons.integrations.FieldDefinition field_definitions = 6;
}

message PopulateWorkflowFieldsRes {
  map<string, api.v1alpha1.integrations.Value> values = 1;
}

message ValidateFieldReq {
  int64 voice_session_sid = 1;
  api.commons.integrations.Validation validation_type = 2;
  string field_name = 3;
}

message ValidateFieldRes {
  bool valid = 1;
  string reason = 2;
}

message ListAgentsVoiceStatusesRequest {
  repeated string skills = 1;
  bool all_skills_required = 2;
  string page_token = 3;
}

message ListAgentsVoiceStatusesReply {
  repeated AgentVoiceStatusDetails agent_details = 1;
  string next_page_token = 2;
}

message AgentVoiceStatusDetails {
  int64 agent_sid = 1;
  int64 hunt_group_sid = 2;
  int64 current_session_sid = 3;
  string first_name = 4;
  string last_name = 5;
  int64 status = 6;
  api.commons.AgentStatus.Enum status_desc = 7;
  repeated string skills = 8;
  repeated string pbx_extensions = 9;
}
