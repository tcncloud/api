// Copyright (c) 2019, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package api.v0alpha;

import "annotations/authz.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// A service for creating and reading learning material
service Learn {
  // check if learning page already exists
  rpc Exist(ExistReq) returns (ExistRes) {
    option (google.api.http).post = "/api/v0alpha/learn/exist";
    option (google.api.http).body = "*"; //Exist intentionally empty, no perm required
    option (annotations.authz) = {no_permissions: true};
  }

  // retreive content from learning pages
  rpc Content(ContentReq) returns (ContentRes) {
    option (google.api.http).post = "/api/v0alpha/learn/content";
    option (google.api.http).body = "*"; //Content intentionally empty, no perm required
    option (annotations.authz) = {no_permissions: true};
  }

  // exports multiple pages of the learning center markdown as PDF
  rpc ExportMany(ExportManyReq) returns (ExportRes) {
    option (google.api.http).post = "/api/v0alpha/learn/exportmany";
    option (google.api.http).body = "*"; //Export intentionally empty, no perm required
    option (annotations.authz) = {no_permissions: true};
  }

  // search content in learning pages
  // we allow all the logged in agents/admins to view search content
  rpc SearchContent(SearchContentReq) returns (SearchRes) {
    option (google.api.http).post = "/api/v0alpha/learn/searchcontent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // stream search content results in learning pages
  // we allow all the logged in agents/admins to view search content
  rpc ListSearchResults(SearchContentReq) returns (stream SearchRes) {
    option (google.api.http).post = "/api/v0alpha/learn/listsearchresults";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // get standalone articles from learning pages
  // we allow all the logged in agents/admins to view standalone articles
  rpc Standalone(StandaloneReq) returns (StandaloneRes) {
    option (google.api.http).post = "/api/v0alpha/learn/standalone";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // retrieve user who edited the content last
  rpc ContentEditorData(ContentEditorDataReq) returns (ContentEditorDataRes) {
    option (google.api.http).post = "/api/v0alpha/learn/contenteditordata";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // update contents for learning pages
  rpc Update(UpdateReq) returns (UpdateRes) {
    option (google.api.http).post = "/api/v0alpha/learn/update";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // upload url for static images
  rpc StoreStaticImage(StoreStaticImageReq) returns (StoreStaticImageRes) {
    option (google.api.http).post = "/api/v0alpha/learn/storestaticimage";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // upload dynamic learning image screenshot
  rpc UploadDynamicScreenshot(UploadDynamicScreenshotReq) returns (UploadDynamicScreenshotRes) {
    option (google.api.http).post = "/api/v0alpha/learn/uploaddynamic";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // delete standalone articles from learning pages
  rpc DeleteStandalone(DeleteStandaloneReq) returns (DeleteStandaloneRes) {
    option (google.api.http).post = "/api/v0alpha/learn/deletestandalone";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // get snippet content from learning pages
  // we allow all the logged in agents/admins to view snippet content
  rpc Snippet(SnippetReq) returns (SnippetRes) {
    option (google.api.http).post = "/api/v0alpha/learn/snippet";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // delete learning pages
  rpc DeleteLearnPages(DeleteLearnPagesReq) returns (DeleteLearnPagesRes) {
    option (google.api.http).post = "/api/v0alpha/learn/deletelearnpages";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // create edit version
  rpc CreateEditVersion(CreateEditVersionReq) returns (CreateEditVersionRes) {
    option (google.api.http).post = "/api/v0alpha/learn/createeditversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // publish version
  rpc PublishVersion(PublishVersionReq) returns (PublishVersionRes) {
    option (google.api.http).post = "/api/v0alpha/learn/publishversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // retrieve content from learning pages based on version
  rpc ContentByVersion(ContentByVersionReq) returns (ContentRes) {
    option (google.api.http).post = "/api/v0alpha/learn/contentbyversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // update contents for learning pages by version
  rpc UpdateByVersion(UpdateByVersionReq) returns (UpdateRes) {
    option (google.api.http).post = "/api/v0alpha/learn/updatebyversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // stream search content results in learning pages by version
  // we allow all the logged in agents/admins to view search content
  rpc ListSearchResultsByVersion(SearchContentByVersionReq) returns (stream SearchRes) {
    option (google.api.http).post = "/api/v0alpha/learn/listsearchresultsbyversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // return diff by comparing file contens from any version
  rpc ReviewFileVersions(ReviewFileVersionsReq) returns (ReviewFileVersionsRes) {
    option (google.api.http).post = "/api/v0alpha/learn/reviewfileversions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // returns list of file details after comparing different versions
  rpc ReviewVersion(ReviewVersionReq) returns (ReviewVersionRes) {
    option (google.api.http).post = "/api/v0alpha/learn/reviewversion";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }

  // exports multiple pages of the learning center markdown as PDF file stream
  rpc ExportManyStream(ExportManyReq) returns (stream ExportRes) {
    option (google.api.http).post = "/api/v0alpha/learn/exportmanystream";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // list all the different versions
  rpc ListVersions(ListVersionsReq) returns (ListVersionsRes) {
    option (google.api.http).post = "/api/v0alpha/learn/listversions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_LEARN_EDIT]
        }
      ];
    };
  }
}

// request to check if learning page url exists
message ExistReq {
  string url = 1;
  string locale = 2;
}

// response for checking if learning page  url exists
message ExistRes {
  bool exist = 1;
}

// request to retreive learning pages content from the url
message ContentReq {
  string url = 1;
  string locale = 2;
}

// response to retreive learning pages content
message ContentRes {
  string content = 1;
  // The last time this learning content was edited.
  google.protobuf.Timestamp last_edited_timestamp = 2;
  // List containing static file links from parsing markdown
  repeated LearnImage images = 3;
  // title of the article
  string title = 4;
  // view total count
  int64 total_view_count = 5;
  // The user who edited the content last
  string last_edited_user = 6;
}

// request to retreive last user edited learning pages content
message ContentEditorDataReq {
  string url = 1;
  string locale = 2;
}

// response to retreive last user edited learning pages content
message ContentEditorDataRes {
  // The user who edited the content last. This is only visible to users with the Permission_PERMISSION_LEARN_EDIT permission.
  string last_edited_user = 1;
}

//request to update learning pages content based on the url
message UpdateReq {
  string url = 1;
  string locale = 2;
  string content = 3;

  // commit message
  string message = 12;

  // title of the article
  string title = 13;
}

//response to update learning pages content
message UpdateRes {}

// request to export multiple pages of the learning center markdown to PDF
message ExportManyReq {
  // url identifiers for the whole book containing all the pages
  repeated string url = 1;
  // locale used for the markdown contents
  string locale = 2;
  // header image content
  string content = 3;
}

// response to export the pages of the learning center markdown to PDF
message ExportRes {
  // generated pdf contents to be downloaded from url
  string download_url = 1;
}

// request to upload url for static images
message StoreStaticImageReq {
  // LearnImage
  LearnImage image = 1;
}

// request for LearnImage
message LearnImage {
  // unique name of the image
  string uuid = 1;
  // image content
  string content = 2;
  // download image url
  string download_url = 3;
}

// response to upload url for static images
message StoreStaticImageRes {
  // updated LearnImage details
  LearnImage image = 1;
}

// request to search content in learning pages
message SearchContentReq {
  // search for the specific content in markdown contents
  string search_content = 1;
  // locale used for the markdown contents
  string locale = 2;
  // field mask to filter apps that are accessible to be searched
  google.protobuf.FieldMask field_mask = 5;
}

// response to search in learning pages
message SearchRes {
  // matched urls
  repeated LearnSearchDetails search_details = 1;
}

// search response details
message LearnSearchDetails {
  // matched storage bucket
  string name = 1;
  // matched markdown content
  string content = 2;
}

// upload dynamic learning image screenshot request
message UploadDynamicScreenshotReq {
  // learn id name
  string data_learn_id = 1;
  // current version
  int64 version = 2;
  // locale used for the markdown contents
  string locale = 3;
  // image content
  string content = 4;
}

// upload dynamic learning image screenshot response
message UploadDynamicScreenshotRes {
  // learn id name
  string data_learn_id = 1;
  // download url
  string download_url = 2;
}

// request to get standalone articles
message StandaloneReq {
  // locale used for the markdown contents
  string locale = 1;
  // categorize the articles
  string category = 2;
  // version
  string version = 3;
}

// standalone articles
message StandaloneRes {
  repeated LearnStandaloneDetails standalone_details = 1;
}

// response to get standalone articles
message LearnStandaloneDetails {
  // storage bucket
  string name = 1;
  // deprecated
  string content = 2 [deprecated = true];
  // deprecated
  google.protobuf.Timestamp last_edited_timestamp = 3 [deprecated = true];
  // title of the article
  string title = 4;
}

// request to delete standalone articles
message DeleteStandaloneReq {
  // locale used for the markdown contents
  string locale = 1;
  // list of article names
  repeated string article_names = 2;
  // version
  string version = 3;
}

// response to delete standalone articles
message DeleteStandaloneRes {}

// request to get snippets
message SnippetReq {
  // locale used for the markdown contents
  string locale = 1;
  // version
  string version = 3;
}

// response to get snippets
message SnippetRes {
  repeated LearnSnippetDetails snippet_details = 1;
}

// snippet details
message LearnSnippetDetails {
  // storage bucket
  string name = 1;
  // markdown content
  string content = 2;
  // The last time this learning content was edited.
  google.protobuf.Timestamp last_edited_timestamp = 3;
  // title of the article
  string title = 4;
}

// request to delete learn pages
message DeleteLearnPagesReq {
  // locale used for the markdown contents
  string locale = 1;
  // list of learning urls to be deleted
  repeated string url = 2;
  // version
  string version = 3;
}

// response to delete learn pages
message DeleteLearnPagesRes {}

// request to create edit version
message CreateEditVersionReq {
  // src version
  string src_version = 1;
  // dest version
  string dest_version = 2;
  // dest version name
  string dest_version_name = 3;
}

// response to create edit version
message CreateEditVersionRes {
  // details about version
  VersionDetails version_details = 1;
}

// request to publish version
message PublishVersionReq {
  // publish version
  string publish_version = 1;
}

// response to publish version
message PublishVersionRes {
  // details about version
  VersionDetails version_details = 1;
}

// request to retrieve learning pages content from the url by version
message ContentByVersionReq {
  string url = 1;
  string locale = 2;
  // by version
  string version = 3;
}

//request to update learning pages content based on the url by version
message UpdateByVersionReq {
  string url = 1;
  string locale = 2;
  string content = 3;
  string version = 4;

  // commit message
  string message = 12;

  // title of the article
  string title = 13;
}

// request to search content in learning pages based on version
message SearchContentByVersionReq {
  // search for the specific content in markdown contents
  string search_content = 1;
  // locale used for the markdown contents
  string locale = 2;
  // field mask to filter apps that are accessible to be searched
  google.protobuf.FieldMask field_mask = 5;
  // by version
  string version = 6;
}

// request to retrieve diff after comparing file contents in different versions
message ReviewFileVersionsReq {
  // url to master version
  string url = 1;
  // version to be compared with
  string version = 2;
  // locale
  string locale = 3;
}

// response to retrieve diff after comparing file contents in different versions
message ReviewFileVersionsRes {
  // existing file contents from master
  string content = 1;
  // diff contents between both master and passed version
  string diff_content = 2;
  // List containing image links from parsing both files
  repeated LearnImage images = 3;
}

// request to retrieve list of differences after comparing different versions
message ReviewVersionReq {
  // version to be compared with
  string version = 1;
  // locale
  string locale = 2;
}

// response to list of differences after comparing different versions
message ReviewVersionRes {
  // diff of urls between both versions
  string diff_urls = 1;
  // diff of file names between both versions
  string diff_file_names = 2;
}

// request to list all the learning pages in different versions
message ListVersionsReq {
  // locale
  string locale = 1;
}

// response to list all the learning pages in different versions
message ListVersionsRes {
  // all the existing versions
  repeated string versions = 1;
  // all the details about versions
  repeated VersionDetails version_details = 2;
}

// version details
message VersionDetails {
  // version
  string version = 1;
  // version name
  string version_name = 2;
  // version creation date
  google.protobuf.Timestamp date_created = 3;
  // version publised date
  google.protobuf.Timestamp date_published = 4;
  // published status
  string status = 5;
}
