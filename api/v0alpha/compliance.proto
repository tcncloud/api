syntax = "proto3";

package api.v0alpha;

import "annotations/authz.proto";
import "api/commons/acd.proto";
import "api/commons/communication.proto";
import "api/commons/compliance.proto";
import "api/commons/enums.proto";
import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service Compliance {
  rpc RuleAutoComplete(RuleAutoCompleteReq) returns (RuleAutoCompleteRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/ruleautocomplete";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc CheckRuleSet(CheckRuleSetReq) returns (CheckRuleSetRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/checkruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc AssignRuleSet(AssignRuleSetReq) returns (AssignRuleSetRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/assignruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc ListRuleSets(ListRuleSetsReq) returns (stream ListRuleSetsRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listrulesets";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc GetRuleSet(GetRuleSetReq) returns (RuleSet) {
    option (google.api.http).post = "/api/v0alpha/compliance/getruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc GetRuleSetByName(GetRuleSetByNameReq) returns (RuleSet) {
    option (google.api.http).post = "/api/v0alpha/compliance/getrulesetbyname";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc CreateRuleSet(CreateRuleSetReq) returns (RuleSet) {
    option (google.api.http).post = "/api/v0alpha/compliance/createruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc RenameRuleSet(RenameRuleSetReq) returns (RenameRuleSetRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/renameruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc EnableRuleSet(EnableRuleSetReq) returns (EnableRuleSetRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/enableruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc DisableRuleSet(DisableRuleSetReq) returns (DisableRuleSetRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/disableruleset";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc CreateScrubList(CreateScrubListReq) returns (ScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/createscrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Updates a scrub list metadata
  // The method will return an UpdateScrubListResponse.
  // Required permissions:
  //      PERMISSION_COMPLIANCE
  rpc UpdateScrubList(UpdateScrubListRequest) returns (UpdateScrubListResponse) {
    option (google.api.http).post = "/api/v0alpha/compliance/updatescrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Add entries to an existing scrub list defined by AddScrubListEntriesReq message.
  // The method will return a ScrubListRes message that will
  // contain the results.
  // Required permissions:
  //      PERMISSION_COMPLIANCE or PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS
  rpc AddScrubListEntries(AddScrubListEntriesReq) returns (ScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/addscrublistentries";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        },
        {
          permissions: [PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS]
        }
      ]
    };
  }

  // Update scrub list entry defined by UpdateScrubEntryReq message.
  // The method will update a scrub list entry with the specified fields
  // Required permissions:
  //      PERMISSION_COMPLIANCE
  rpc UpdateScrubEntry(UpdateScrubEntryReq) returns (UpdateScrubEntryRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/updatescrubentry";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc DeleteScrubListEntries(DeleteScrubListEntriesReq) returns (ScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/deletescrublistentries";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        },
        {
          permissions: [PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS]
        }
      ]
    };
  }

  rpc GetScrubList(GetScrubListReq) returns (ScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getScrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        },
        {
          permissions: [PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS]
        }
      ]
    };
  }

  rpc DeleteScrubList(DeleteScrubListReq) returns (ScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/deleteScrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc GetDefaultRules(GetDefaultRulesReq) returns (GetDefaultRulesRes) {
    option (google.api.http).get = "/api/v0alpha/compliance/getdefaultrules";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc GetScrubLists(GetScrubListsReq) returns (ScrubListsRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getscrublists";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        },
        {
          permissions: [PERMISSION_VOICE_ANALYTICS]
        }
      ]
    };
  }

  rpc SearchScrubList(SearchScrubListReq) returns (ScrubList) {
    option (google.api.http).post = "/api/v0alpha/compliance/searchscrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        },
        {
          permissions: [PERMISSION_AGENT_COMPLIANCE_SCRUBLIST_OPTIONS]
        }
      ]
    };
  }

  rpc GetScrubListUploadUrl(GetScrubListUploadUrlReq) returns (GetScrubListUploadUrlRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getscrublistuploadurl";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc ProcessScrubListUpload(ProcessScrubListUploadReq) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/processscrublistupload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Download a scrub list defined by ScrubListDownloadRequest message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE
  rpc ScrubListDownload(ScrubListDownloadRequest) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/scrublistdownload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc ProcessScrubListDeleteUpload(ProcessScrubListDeleteUploadReq) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/processscrublistdeleteupload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  rpc ExportScrubList(ExportScrubListReq) returns (ExportScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/exportscrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Purge entries from a scrub list defined by PurgeScrubListReq message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE
  rpc PurgeScrubList(PurgeScrubListReq) returns (PurgeScrubListRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/purgescrublist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Creates a new Scenario
  rpc CreateScenario(CreateScenarioReq) returns (CreateScenarioRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/createscenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Gets one Scenario
  rpc GetScenario(GetScenarioReq) returns (GetScenarioRes) {
    option (google.api.http).get = "/api/v0alpha/compliance/getscenario";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Updates a Scenario
  rpc UpdateScenario(UpdateScenarioReq) returns (UpdateScenarioRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/updatescenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Deletes a Scenario
  rpc DeleteScenario(DeleteScenarioReq) returns (DeleteScenarioRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/deletescenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Run scenarios against ruleset
  rpc RunAssignedScenarios(RunAssignedScenariosReq) returns (RunAssignedScenariosRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/runassignedscenarios";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Lists all scenarios
  rpc ListAllScenarios(ListAllScenariosReq) returns (ListAllScenariosRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listallscenarios";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // List currently unassigned scenarios available to be assigned to a given ruleset
  rpc ListUnassignedScenarios(ListUnassignedScenariosReq) returns (ListUnassignedScenariosRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listunassignedscenarios";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // List rule sets currently assigned to a given scenario
  rpc ListAssignedRuleSets(ListAssignedRuleSetsReq) returns (ListAssignedRuleSetsRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listassignedrulesets";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // List scenarios currently assigned to a given ruleset
  rpc ListAssignedScenarios(ListAssignedScenariosReq) returns (ListAssignedScenariosRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listassignedscenarios";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Assign a scenario to a given ruleset
  rpc AssignScenario(AssignScenarioReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/assignscenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Unassign a scenario from a given ruleset
  rpc UnassignScenario(UnassignScenarioReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/unassignscenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Enable an scenario
  rpc EnableScenario(EnableScenarioReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/enablescenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Disable an scenario
  rpc DisableScenario(DisableScenarioReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/disablescenario";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // Frequency data calls
  // This will get all available Meta Fields
  rpc GetFieldNames(GetFieldNamesReq) returns (FieldNames) {
    option (google.api.http).post = "/api/v0alpha/compliance/getfieldnames";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE]
        }
      ]
    };
  }

  // This will get all possible results (Answered, Answered Machine, Busy, etc.)
  rpc GetResultDescriptions(GetResultDescriptionsReq) returns (FieldNames) {
    option (google.api.http).post = "/api/v0alpha/compliance/getresultdescriptions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // consent api

  // Create/Record a consent profile defined by CreateConsentProfileReq
  // message.  The method will return a CreateConsentProfileRes message
  // that will contain the newly created consent_profile_id.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc CreateConsentProfile(CreateConsentProfileReq) returns (CreateConsentProfileRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/createconsentprofile";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Create/Record a consent defined by CreateConsentReq message.
  // The method will return a CreateConsentRes message that will
  // contain the newly created consent_id.
  // Required permissions:
  //      none
  rpc CreateConsent(CreateConsentReq) returns (CreateConsentRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/createconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Gets a consent profile defined by GetConsentProfileReq message
  // for the specified consent_profile_id and org_id.
  // The method will return a ConsentProfile message/entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsentProfile(GetConsentProfileReq) returns (ConsentProfile) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsentprofile";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Gets a consent defined by GetConsentReq message
  // for the specified consent_id and org_id.
  // The method will return a Consent entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsent(GetConsentReq) returns (Consent) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Gets a consent defined by GetConsentByProfileAndContentReq message
  // for the specified consent_profile_id and content.
  // The method will return a GetConsentByProfileAndContentRes message/entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsentByProfileAndContent(GetConsentByProfileAndContentReq) returns (GetConsentByProfileAndContentRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsentbyprofileandcontent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Gets a consent defined by GetConsentByContentReq message
  // for the specified consent_profile_id and content and channel_type.
  // The method will return a GetConsentByContentRes message/entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsentByContent(GetConsentByContentReq) returns (GetConsentByContentRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsentbycontent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Searches for a consent defined by SearchConsentByContentReq message
  // for the specified content.
  // The method will return a SearchConsentByContentRes message/entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc SearchConsentByContent(SearchConsentByContentReq) returns (SearchConsentByContentRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/searchconsentbycontent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Update a consent defined by UpdateConsentReq message for
  // the specified consent_id, and will update the following
  // consent fields:
  //    Content
  //    Recorded
  //    Revoked
  //    Expire
  //    ReferringUrl
  // The method will return a google.protobuf.Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc UpdateConsent(UpdateConsentReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/updateconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Expire a consent defined by ExpireConsentReq message.
  // Set the expiration date for the specified consent_id field.
  // The method will return a google.protobuf.Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ExpireConsent(ExpireConsentReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/expireconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Revoke a consent defined by RevokeConsentReq message.
  // Set the revoked date for the specified consent_id and
  // consent_profile_id fields.
  // The method will return a google.protobuf.Empty message.
  // Required permissions:
  //      none
  rpc RevokeConsent(RevokeConsentReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/revokeconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Delete a consent defined by DeleteConsentReq message
  // The method will return a google.protobuf.Empty message
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc DeleteConsent(DeleteConsentReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/deleteconsent";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Process a consent delete list defined by DeleteConsentReq message
  // The method will return a google.protobuf.Empty message
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ProcessConsentListDeleteUpload(ProcessConsentListDeleteUploadReq) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/processconsentlistdeleteupload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Download a consent list defined by ConsentListDownloadRequest message
  // The method will return a google.longrunning.Operation message
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ConsentListDownload(ConsentListDownloadRequest) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/consentlistdownload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Enable a consent profile defined by EnableConsentProfileReq message.
  // Set the disabled field to false for the specified
  // consent_profile_id field.
  // The method will return a google.protobuf.Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc EnableConsentProfile(EnableConsentProfileReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/enableconsentprofile";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Disable a consent profile defined by DisableConsentProfileReq message.
  // Set the disabled field to true for the specified
  // consent_profile_id field.
  // The method will return a google.protobuf.Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc DisableConsentProfile(DisableConsentProfileReq) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/disableconsentprofile";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // List consent profiles defined by ListConsentProfilesReq message.
  // Gets all of the unique consent profiles.
  // The method will return a ListConsentProfilesRes message
  // containing consent_profile_id, profile_name, the number of consents
  // belonging to the profile, and disabled.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ListConsentProfiles(ListConsentProfilesReq) returns (ListConsentProfilesRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listconsentprofiles";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Get consent upload url defined by GetConsentUploadUrlReq message.
  // The method will return a GetConsentUploadUrlRes messages
  // containing a url with which to upload an import file.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsentUploadUrl(GetConsentUploadUrlReq) returns (GetConsentUploadUrlRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsentuploadurl";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Process consent upload defined by ProcessConsentUploadReq message.
  // The method will process an uploaded consent file.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ProcessConsentUpload(ProcessConsentUploadReq) returns (google.longrunning.Operation) {
    option (google.api.http).post = "/api/v0alpha/compliance/processconsentupload";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Export consent list defined by ExportConsentListRequest message.
  // The method will create a consent download file in CSV format and return a URL for download.
  rpc ExportConsentList(ExportConsentListRequest) returns (ExportConsentListResponse) {
    option (google.api.http).post = "/api/v0alpha/compliance/exportconsentlist";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // List consent topics defined by ListConsentTopicsReq message.
  // Gets all of the unique consent topics.
  // The method will return a ListConsentTopicsRes message
  // containing topic, org_id, and deleted.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc ListConsentTopics(ListConsentTopicsReq) returns (ListConsentTopicsRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/listconsenttopics";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Gets a consent topic defined by GetConsentTopicReq message
  // for the specified topic and org_id.
  // The method will return a ConsentTopic message/entity.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc GetConsentTopic(GetConsentTopicReq) returns (ConsentTopic) {
    option (google.api.http).post = "/api/v0alpha/compliance/getconsenttopic";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Create a consent topic defined by ConsentTopic
  // message.  The method will return an Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc CreateConsentTopic(ConsentTopic) returns (Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/createconsenttopic";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Delete a consent topic defined by ConsentTopic message.
  // The method will return an Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc DeleteConsentTopic(ConsentTopic) returns (Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/deleteconsenttopic";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Update a consent topic defined by UpdateConsentTopicReq message.
  // The method will return an Empty message.
  // Required permissions:
  //      PERMISSION_COMPLIANCE_CONSENT
  rpc UpdateConsentTopic(UpdateConsentTopicReq) returns (Empty) {
    option (google.api.http).post = "/api/v0alpha/compliance/updateconsenttopic";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_COMPLIANCE_CONSENT]
        }
      ]
    };
  }

  // Process and Outbound Phone Number against a rule set.
  // The method will return a response indicating
  // if the call would be permited or not and the list
  // of rules checked against.
  // Required permissions:
  //      AGENT
  rpc ProcessOutboundCall(ProcessOutboundCallReq) returns (ProcessRes) {
    option (google.api.http).post = "/api/v0alpha/compliance/processoutboundcall";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // Return the holidays that match the request.
  // The method will return a stream of the matching holidays.
  // Required permissions:
  //      none
  rpc QueryHolidays(QueryHolidaysRequest) returns (QueryHolidaysResponse) {
    option (google.api.http).post = "/api/v0alpha/compliance/queryholidays";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }
}

// request used to process an outbound call against a rule set
message ProcessOutboundCallReq {
  // The name of the rule set to use for processing
  string rule_set_name = 1;
  // The country code of the phone number
  string country_code = 2;
  // The phone number to process
  string phone_number = 3;
  // Extra compliance metadata
  map<string, string> call_metadata = 4;
  // The id of the caller associated with this process request
  int64 source_id = 5;
  // The call type of the caller associated with this process request
  string source_field = 6;
  // The caller id being called from
  string caller_id = 7;
  // The client id
  int64 client_sid = 8;
  // The communication type
  api.commons.CommType comm_type = 9;
  // The call type
  string call_type = 10;
  // The organization id
  string org_id = 11;
  // The region id
  string region_id = 12;
  // The email address to process
  string email = 13;
  // The zip code
  string zip_code = 14;
}

// response given after processing something against a rule set
message ProcessRes {
  // indicates if the process request was permitted or not
  bool permit = 1;
  // the list of rules checked against
  repeated api.commons.RuleResponse rule_responses = 2;
}

message ScrubList {
  string list_id = 2;
  repeated ScrubEntry entries = 3;
}

message CreateScrubListReq {
  string list_id = 2;

  // payload
  repeated string list = 10;
  api.commons.ContentType content_type = 11;
  string country_code = 12;
  repeated api.commons.ScrubEntryDetails scrub_entry_details = 13;
  bool durable = 14;
  api.commons.Decompositions decompositions = 15;
}

message UpdateScrubListRequest {
  string list_id = 2;
  api.commons.Decompositions decompositions = 3;
}

message UpdateScrubListResponse {}

// AddScrubListEntries request message
message AddScrubListEntriesReq {
  // scrub list id, this is can be obtained from a GetScrubLists method
  string list_id = 2;

  // @deprecated
  // don't use it, it will be removed soon
  repeated string list = 10;

  // content_type represents the type of entries are stored in scrub_entry_details field (phone number, sms, email ...)
  api.commons.ContentType content_type = 11;

  // country calling code defined by ITU-T in E.164 standard w/o the + sign in front
  // this field is relevant if the scrub_entry_details list contains phone numbers
  string country_code = 12;

  // the list of scrub entries that are sent in order to be added
  repeated api.commons.ScrubEntryDetails scrub_entry_details = 13;
}

message UpdateScrubEntryReq {
  // keys
  string list_id = 2;

  // updateable fields
  google.protobuf.StringValue notes = 10;
  google.protobuf.StringValue content = 11;
  google.protobuf.Timestamp expiration_date = 12;
  google.protobuf.StringValue country_code = 13;
}

message UpdateScrubEntryRes {}

message DeleteScrubListEntriesReq {
  string list_id = 2;

  // payload
  repeated string list = 10;
}

message GetScrubListReq {
  string list_id = 2;
}

message GetScrubListsReq {}

message ScrubListsRes {
  repeated ScrubListRes lists = 1;
}

message ScrubListRes {
  string list_id = 1;
  bool read_only = 2;
  api.commons.ContentType content_type = 3;

  int64 entries_added = 4;
  repeated string invalid_entries = 5 [deprecated = true];
  int64 total_invalid = 6;
  repeated api.commons.InvalidScrubListEntry invalid_list = 7;
}

message DeleteScrubListReq {
  string list_id = 2;
}

message SearchScrubListReq {
  string list_id = 2;
  string term = 3;
}

message ScrubEntry {
  int64 country_sid = 2;
  string list_id = 6;
  int64 source_id = 7;
  string source_field = 8;

  // payload
  google.protobuf.StringValue notes = 10;
  google.protobuf.StringValue content = 11;
  google.protobuf.Timestamp expiration_date = 12;
  google.protobuf.StringValue result = 13;
  api.commons.ContentType type = 14;
  google.protobuf.StringValue country_code = 15;
  bool is_wild_card = 16;

  // audit
  google.protobuf.Timestamp created_on = 200;
  google.protobuf.StringValue created_by = 201;
}

message RuleAutoCompleteReq {
  string phrase = 1;
  int32 cursor = 2;
}

message RuleAutoCompleteRes {
  repeated string options = 1;
}

message CheckRuleSetReq {
  string phrase = 1;
}

message CheckRuleSetRes {
  repeated api.commons.Rule rules = 1;
  repeated string warnings = 2;
}

message ListRuleSetsReq {
  bool include_disabled = 2;
}

message ListRuleSetsRes {
  string rule_set_id = 1;
  string name = 2;
  int64 rule_count = 4;
  bool disabled = 5;
}

message GetRuleSetReq {
  string rule_set_id = 1;
  string rule_set_sha = 2;
}

message GetRuleSetByNameReq {
  string name = 3;
}

message AssignRuleSetReq {
  api.commons.CommType comm_type = 1;
  string comm_id = 2;
  string rule_set_id = 3;
}

message AssignRuleSetRes {
  string cpl_rule_set_assignment_id = 1;
}

message RenameRuleSetReq {
  string rule_set_id = 2;
  string name = 3;
}

message RenameRuleSetRes {}

message CreateRuleSetReq {
  string rule_set_id = 1;
  string name = 4;
  string rules_text = 6;
  repeated api.commons.Rule rules = 7;
}

message EnableRuleSetReq {
  string rule_set_id = 2;
  string rule_set_sha = 3;
}
message DisableRuleSetReq {
  string rule_set_id = 2;
  string rule_set_sha = 3;
}

message EnableRuleSetRes {}
message DisableRuleSetRes {}
message EvaluationResults {}

// RuleSet / Rule
message RuleSet {
  string rule_set_id = 1;

  string name = 4;
  bool head = 5;

  bool disabled = 6;

  // original text from where we derived the rules
  string rules_text = 9;
  // sha256 for the input strings
  string sha = 10;

  repeated api.commons.Rule rules = 20;
}

message GetDefaultRulesReq {}
message GetDefaultRulesRes {
  repeated string rules = 1;
}

message GetScrubListUploadUrlReq {
  string org_id = 1;
}

message GetScrubListUploadUrlRes {
  string url = 1;
  string filename = 2;
  string bucket = 3;
}

message ProcessScrubListUploadReq {
  string filename = 2;

  string list_id = 4;

  // payload
  api.commons.ContentType content_type = 10;
  string notification_message = 11;
  string country_code = 12;
}

message ProcessScrubListUploadRes {
  int64 entries_added = 1;
  repeated string invalid_entries = 2;
}

message ProcessScrubListDeleteUploadReq {
  // payload
  string list_id = 10;
  string filename = 11;
  string notification_message = 12;
}

message ProcessScrubListDeleteUploadRes {}

message ExportScrubListReq {
  string list_id = 1;
}

message ExportScrubListRes {
  string url = 1;
}

message Scenario {
  int64 cpl_scenario_id = 1;
  reserved 2;
  api.commons.ScenarioData should_allow = 3;
  api.commons.ScenarioData should_deny = 4;
  api.commons.ScenarioResult last_execution_result = 5;
  string name = 6;
}

message CreateScenarioReq {
  reserved 1;
  api.commons.ScenarioData should_allow = 2;
  api.commons.ScenarioData should_deny = 3;
  string name = 4;
}
message CreateScenarioRes {
  Scenario scenario = 1;
}
message GetScenarioReq {
  int64 cpl_scenario_id = 1;
}
message GetScenarioRes {
  Scenario scenario = 1;
}
message UpdateScenarioReq {
  Scenario scenario = 1;
}
message UpdateScenarioRes {
  Scenario scenario = 1;
}
message DeleteScenarioReq {
  int64 cpl_scenario_id = 1;
}
message DeleteScenarioRes {}
message RunAssignedScenariosReq {
  string cpl_rule_set_id = 1;
}
message RunAssignedScenariosRes {
  reserved 1;
  repeated api.commons.ScenarioResult results = 2;
  bool passed_value = 4;
  string cpl_rule_set_name = 3;
}

message ListAllScenariosReq {}
message ListAllScenariosRes {
  repeated Scenario scenarios = 1;
}
message ListAssignedRuleSetsReq {
  int64 cpl_scenario_id = 3;
}
message ListAssignedRuleSetsRes {
  repeated RuleSet rule_sets = 1;
}
message ListAssignedScenariosReq {
  string cpl_rule_set_id = 3;
}
message AssignedScenario {
  Scenario scenario = 1;
  bool enabled = 2;
  api.commons.ScenarioResult last_execution_result = 3;
}
message ListAssignedScenariosRes {
  repeated AssignedScenario assigned_scenarios = 1;
}
message ListUnassignedScenariosReq {
  string cpl_rule_set_id = 3;
}
message ListUnassignedScenariosRes {
  repeated Scenario scenarios = 1;
}
message AssignScenarioReq {
  string cpl_rule_set_id = 3;
  int64 cpl_scenario_id = 4;
}
message UnassignScenarioReq {
  string cpl_rule_set_id = 3;
  int64 cpl_scenario_id = 4;
}
message EnableScenarioReq {
  string cpl_rule_set_id = 3;
  int64 cpl_scenario_id = 4;
}
message DisableScenarioReq {
  string cpl_rule_set_id = 3;
  int64 cpl_scenario_id = 4;
}

message CreateConsentProfileReq {
  string consent_profile_id = 1;

  // payload
  string profile_name = 10;
  bool disabled = 11;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 12 [deprecated = true];

  // auditing
  string created_by = 50;
}

message CreateConsentProfileRes {
  string consent_profile_id = 1;
}

message GetConsentReq {
  int64 consent_id = 1;
}

message CreateConsentReq {
  string consent_profile_id = 2;

  // payload
  string content = 10;
  google.protobuf.Timestamp recorded = 11;
  google.protobuf.Timestamp expire = 12;
  string referring_url = 13;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 15 [deprecated = true];
  // topic (future payment vs payment reminder vs account reminders vs receipts)
  string topic = 16;
  // notate revocation (reason)
  string revoked_reason = 17;
  // notate grant reason
  string granted_reason = 18;
  // proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
  string proof = 19;
  // consent conditions
  repeated api.commons.Weekday.Enum condition_days_of_the_week = 20;
  string condition_time_of_day_from = 21;
  string condition_time_of_day_to = 22;
  google.protobuf.Timestamp condition_from = 23;
  google.protobuf.Timestamp condition_to = 24;
  string notes = 25;
  // Consent Conditions
  repeated api.commons.ConsentCondition conditions = 26;
  // content_type (call, email, sms, account number)
  api.commons.ContentType content_type = 27;
  api.commons.Channel channel_type = 28;
}

message CreateConsentRes {
  int64 consent_id = 1;
}

message ConsentProfile {
  string consent_profile_id = 1;

  // payload
  string profile_name = 10;
  bool disabled = 11;
  repeated Consent consents = 12;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 13 [deprecated = true];

  // auditing
  google.protobuf.Timestamp created_on = 50;
  string created_by = 51;
}

message Consent {
  int64 consent_id = 1;
  string consent_profile_id = 2;
  bool deleted = 4;
  google.protobuf.Timestamp deleted_on = 5;

  // payload
  string content = 10;
  // date consent granted
  google.protobuf.Timestamp recorded = 11;
  // date consent revoked
  google.protobuf.Timestamp revoked = 12;
  // expiration of consent
  google.protobuf.Timestamp expire = 13;
  string referring_url = 14;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 15 [deprecated = true];
  // topic (future payment vs payment reminder vs account reminders vs receipts)
  string topic = 16;
  // notate revocation (reason)
  string revoked_reason = 17;
  // notate grant reason
  string granted_reason = 18;
  // proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
  string proof = 19;
  // consent conditions
  repeated api.commons.Weekday.Enum condition_days_of_the_week = 20 [deprecated = true];
  string condition_time_of_day_from = 21 [deprecated = true];
  string condition_time_of_day_to = 22 [deprecated = true];
  google.protobuf.Timestamp condition_from = 23 [deprecated = true];
  google.protobuf.Timestamp condition_to = 24 [deprecated = true];
  string notes = 25;
  // Consent Conditions
  repeated api.commons.ConsentCondition conditions = 26;
  // content_type (call, email, sms, account number)
  api.commons.ContentType content_type = 27;
  api.commons.Channel channel_type = 28;
}

message GetConsentProfileReq {
  string consent_profile_id = 1;
}

message UpdateConsentReq {
  int64 consent_id = 1;
  string consent_profile_id = 3;

  // payload
  string content = 10;
  google.protobuf.Timestamp recorded = 11;
  google.protobuf.Timestamp revoked = 12;
  google.protobuf.Timestamp expire = 13;
  string referring_url = 14;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 15 [deprecated = true];
  // topic (future payment vs payment reminder vs account reminders vs receipts)
  string topic = 16;
  // notate revocation (reason)
  string revoked_reason = 17;
  // notate grant reason
  string granted_reason = 18;
  // proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
  string proof = 19;
  // consent conditions
  repeated api.commons.Weekday.Enum condition_days_of_the_week = 20;
  string condition_time_of_day_from = 21;
  string condition_time_of_day_to = 22;
  google.protobuf.Timestamp condition_from = 23;
  google.protobuf.Timestamp condition_to = 24;
  string notes = 25;
  // Consent Conditions
  repeated api.commons.ConsentCondition conditions = 26;
  // content_type (call, email, sms, account number)
  api.commons.ContentType content_type = 27;
  api.commons.Channel channel_type = 28;
}

message ExpireConsentReq {
  int64 consent_id = 1;
  google.protobuf.Timestamp expire = 3;
}

message RevokeConsentReq {
  int64 consent_id = 1;
  google.protobuf.Timestamp revoked = 3;
  string consent_profile_id = 4;
  string content = 5;
  api.commons.Channel channel_type = 6;
  string revoked_reason = 7;
  api.commons.ContentType content_type = 8;
}

message EnableConsentProfileReq {
  string consent_profile_id = 1;
}

message DisableConsentProfileReq {
  string consent_profile_id = 1;
}

message ListConsentProfilesReq {}

message ListConsentProfile {
  string consent_profile_id = 1;
  string profile_name = 2;
  int64 count = 3;
  bool disabled = 4;
  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 5 [deprecated = true];
}

message ListConsentProfilesRes {
  repeated ListConsentProfile consent_profiles = 1;
}

message GetConsentUploadUrlReq {}

message GetConsentUploadUrlRes {
  string url = 1;
  string filename = 2;
  string bucket = 3;
}

message DeleteConsentReq {
  int64 consent_id = 1;
}

message ProcessConsentUploadReq {
  string filename = 2;
  string consent_profile_id = 3;
  string user_id = 4;
}

message ProcessConsentUploadRes {
  int64 entries_added = 1;
}

message GetFieldNamesReq {
  bool phone_only = 2;
}

message FieldNames {
  repeated string names = 1;
}

message GetResultDescriptionsReq {}

message PurgeScrubListReq {
  string list_id = 1;
}

message PurgeScrubListRes {
  int64 entries_found = 1;
}

message Empty {}

message ConsentTopic {
  string topic = 1;
  string org_id = 2;
  bool deleted = 3;
}

message ListConsentTopicsReq {}

message ListConsentTopicsRes {
  repeated ConsentTopic topics = 1;
}

message GetConsentTopicReq {
  string topic = 1;
}

message UpdateConsentTopicReq {
  string original_topic = 1;
  string new_topic = 3;
}

message SearchConsentByContentReq {
  string content = 2;
  // optional field to also filter by consent_profile_id
  string consent_profile_id = 3;
}

message ConsentByContent {
  string org_id = 1;
  string profile_id = 2;
  string profile_name = 3;
  int64 consent_id = 4;
  // consent content (phone number, email address, account number, etc.)
  string content = 5;

  google.protobuf.Timestamp revoked = 10;
  google.protobuf.Timestamp expire = 11;
  bool disabled = 12;

  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 13 [deprecated = true];
  // topic (future payment vs payment reminder vs account reminders vs receipts)
  string topic = 14;
  // consent conditions
  repeated api.commons.Weekday.Enum condition_days_of_the_week = 15;
  string condition_time_of_day_from = 16;
  string condition_time_of_day_to = 17;
  google.protobuf.Timestamp condition_from = 18;
  google.protobuf.Timestamp condition_to = 19;
  string notes = 20;
  // content_type (call, email, sms, account number)
  api.commons.ContentType content_type = 21;
  // Consent Conditions
  repeated api.commons.ConsentCondition conditions = 22;
  api.commons.Channel channel_type = 23;
}

message SearchConsentByContentRes {
  repeated ConsentByContent consents = 1;
}

message GetConsentByProfileAndContentReq {
  string profile_name = 2;
  string content = 3;
  string profile_id = 4;
  api.commons.ContentType content_type = 5;
  api.commons.Channel channel_type = 6;
}

message GetConsentByProfileAndContentRes {
  string org_id = 1;
  string profile_id = 2;
  string profile_name = 3;
  // id of consent
  int64 consent_id = 4;

  google.protobuf.Timestamp revoked = 10;
  google.protobuf.Timestamp expire = 11;
  bool disabled = 12;

  // channel (email, sms, phone, etc)
  api.commons.CommType channel = 13 [deprecated = true];
  // topic (future payment vs payment reminder vs account reminders vs receipts)
  string topic = 14;
  // consent conditions
  repeated api.commons.Weekday.Enum condition_days_of_the_week = 15;
  string condition_time_of_day_from = 16;
  string condition_time_of_day_to = 17;
  google.protobuf.Timestamp condition_from = 18;
  google.protobuf.Timestamp condition_to = 19;
  string notes = 20;
  // content_type (call, email, sms, account number)
  api.commons.ContentType content_type = 21;
  // Consent Conditions
  repeated api.commons.ConsentCondition conditions = 22;
  api.commons.Channel channel_type = 23;
  // notate revocation (reason)
  string revoked_reason = 24;
  // notate grant reason
  string granted_reason = 25;
  // proof of consent (pdf, voice recording etc) this will be filename which can be retrieved via matrix-fts
  string proof = 26;
}

message GetConsentByContentReq {
  // name of consent profile
  string profile_name = 2;
  // consent content (phone_number, email, account number, etc.)
  string content = 3;
  // id of consent profile
  string profile_id = 4;
  // consent channel
  api.commons.Channel channel_type = 5;
}

message GetConsentByContentRes {
  // id of assigned org
  string org_id = 1;
  // name of consent profile
  string profile_name = 2;
  // consent entity
  Consent consent = 3;
  // consent profile disabled
  bool disabled = 4;
}

message ProcessConsentListDeleteUploadReq {
  // payload
  string consent_profile_id = 10;
  string filename = 11;
  string notification_message = 12;
}

message ProcessConsentListDeleteUploadRes {}

message ProcessConsentListDeleteUploadMeta {
  google.protobuf.Timestamp time_started = 1;
}

message QueryHolidaysResponse {
  repeated HolidayData rows = 1;
}

message HolidayData {
  string date = 1;
  string name = 2;
  string year = 3;
  string month = 4;
  string day = 5;
  string weekday = 6;
  repeated string types = 7;
  string is_observed = 8;
  string country = 9;
  repeated string states = 11;
}

message QueryHolidaysRequest {
  string date = 1;
  string name = 2;
  string year = 3;
  string month = 4;
  string day = 5;
  string weekday = 6;
  string type = 7;
  string is_observed = 8;
  string country = 9;
  string state = 11;
}

message ExportConsentListRequest {
  string consent_profile_id = 1;
}

message ExportConsentListResponse {
  string url = 1;
}

message ScrubListDownloadRequest {
  string list_id = 4;
}

message ConsentListDownloadRequest {
  string consent_profile_id = 4;
}
