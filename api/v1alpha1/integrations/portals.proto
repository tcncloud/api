syntax = "proto3";

package api.v1alpha1.integrations;

import "annotations/authz.proto";
import "api/commons/integrations/integrations.proto";
import "api/commons/perms.proto";
// our entities are located here, entities should probably be in own file
import "api/v1alpha1/integrations/service.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

service PortalManagerApi {
  rpc UpsertPortalConfig(UpsertPortalConfigReq) returns (UpsertPortalConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/upsertportalconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc ListPortalConfigs(ListPortalConfigsReq) returns (ListPortalConfigsRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listportalconfigs";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc GetPortalConfig(GetPortalConfigReq) returns (GetPortalConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getportalconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc DeletePortalConfig(DeletePortalConfigReq) returns (DeletePortalConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/deleteportalconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc UpdatePortalConfigLogo(UpdatePortalConfigLogoReq) returns (UpdatePortalConfigLogoRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/updateportalconfiglogo";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc GetPortalConfigLogo(GetPortalConfigLogoReq) returns (GetPortalConfigLogoRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getportalconfiglogo";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  // portal links
  rpc ListPortalLinks(ListPortalLinksReq) returns (ListPortalLinksRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listportallinks";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc GetPortalLink(GetPortalLinkReq) returns (GetPortalLinkRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getportallink";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc DeletePortalLink(DeletePortalLinkReq) returns (DeletePortalLinkRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/deleteportallink";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc CreatePortalLinks(CreatePortalLinksReq) returns (CreatePortalLinksRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/createportallinks";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  // portals
  rpc UpsertPortal(UpsertPortalReq) returns (UpsertPortalRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/upsertportal";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc GetPortal(GetPortalReq) returns (GetPortalRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getportal";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  rpc DeletePortal(DeletePortalReq) returns (DeletePortalRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/deleteportal";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc ListPortals(ListPortalsReq) returns (ListPortalsRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listportals";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  rpc ListDetailedPortals(ListDetailedPortalsReq) returns (ListDetailedPortalsRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listdetailedportals";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  rpc GetDetailedPortal(GetDetailedPortalReq) returns (GetDetailedPortalRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getdetailedportal";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  // PluginInstances
  rpc UpsertPluginInstance(UpsertPluginInstanceReq) returns (UpsertPluginInstanceRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/upsertplugininstance";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc GetPluginInstance(GetPluginInstanceReq) returns (GetPluginInstanceRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/getplugininstance";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc DeletePluginInstance(DeletePluginInstanceReq) returns (DeletePluginInstanceRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/deleteplugininstance";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc ListPluginInstance(ListPluginInstanceReq) returns (ListPluginInstanceRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listplugininstances";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PLUGINS_VIEW]
        }
      ];
    };
  }
  rpc ListFlowFieldNames(ListFlowFieldNamesReq) returns (ListFlowFieldNamesRes) {
    option (google.api.http).post = "/api/v1alpha1/portalmanager/listflowfieldnames";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_AGENT_PORTALS_VIEW]
        },
        {
          permissions: [PERMISSION_OMNI_PORTALS_VIEW]
        }
      ];
    };
  }
  // returns the default form fields for verification flow
  rpc ListAvailableVerificationFields(ListAvailableVerificationFieldsReq) returns (ListAvailableVerificationFieldsRes) {
    option (google.api.http).post = "/api/v1alpha1/integrations/listavailableverificationfields";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  // returns the default form fields for payment flow
  rpc ListAvailablePaymentFields(ListAvailablePaymentFieldsReq) returns (ListAvailablePaymentFieldsRes) {
    option (google.api.http).post = "/api/v1alpha1/integrations/listavailablePaymentfields";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc ListPortalTypes(ListPortalTypesReq) returns (ListPortalTypesResponse) {
    option (google.api.http).post = "/api/v1alpha1/integrations/listportaltypes";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
  rpc ListPortalWorkflows(ListPortalWorkflowsReq) returns (ListPortalWorkflowsResponse) {
    option (google.api.http).post = "/api/v1alpha1/integrations/listportalworkflows";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_INTEGRATIONS_VIEW]
        }
      ];
    };
  }
}

message UpsertPortalConfigReq {
  PortalConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpsertPortalConfigRes {
  PortalConfigId entity = 1;
}
// TODO LETS MOVE THIS TO HERE WHEN WE CAN UPDATE FRONT ENd IMPORT
// message GetPortalConfigReq

message GetPortalConfigRes {
  PortalConfig entity = 1;
}
// TODO LETS MOVE THIS TO HERE WHEN WE CAN UPDATE FRONT ENd IMPORT
// message DeletePortalConfigReq

message DeletePortalConfigRes {}
// TODO LETS MOVE THIS TO HERE WHEN WE CAN UPDATE FRONT ENd IMPORT
// message ListPortalConfigsReq

message ListPortalConfigsRes {
  repeated PortalConfig entities = 1;
  string next_page_token = 2;
}
message UpdatePortalConfigLogoReq {
  PortalConfig entity = 1;
}
message UpdatePortalConfigLogoRes {}
message GetPortalConfigLogoReq {
  PortalConfigId entity = 1;
}
message GetPortalConfigLogoRes {
  bytes entity = 1;
}
message UpsertPortalReq {
  Portal entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpsertPortalRes {
  PortalId entity = 1;
}
message GetPortalReq {
  PortalId entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetPortalRes {
  Portal entity = 1;
}
message DeletePortalReq {
  PortalId entity = 1;
}
message DeletePortalRes {}
message ListPortalsReq {
  PortalId entity = 1;
  google.protobuf.FieldMask mask = 2;
  int32 page_size = 3;
  int32 page = 4;
  repeated PortalType ptypes = 5;
}
message ListPortalsRes {
  repeated Portal entities = 1;
}
message ListDetailedPortalsReq {
  PortalId entity = 1;
  google.protobuf.FieldMask portal_mask = 2;
  // controls which fields are sent back on entity related to the portal's portal_config.
  // If left empty, only the portal_config.name, and portal_config.id fields will be set.
  google.protobuf.FieldMask portal_config_mask = 3;
  // controls which fields are sent back on entity related to the portal's plugin_instances.
  // If left empty, only each plugin_instance.name, and plugin_instance.id fields will be set.
  google.protobuf.FieldMask plugin_instance_mask = 4;
  int32 page_size = 5;
  int32 page = 6;
  repeated PortalType ptypes = 7;
}
message ListDetailedPortalsRes {
  message Entity {
    Portal portal = 1;
    PortalConfig portal_config = 2;
    repeated PluginInstance plugin_instances = 3;
  }
  repeated Entity entities = 4;
}

message GetDetailedPortalReq {
  PortalId entity = 1;
  google.protobuf.FieldMask portal_mask = 2;
  // controls which fields are sent back on entity related to the portal's portal_config.
  // If left empty, only the portal_config.name, and portal_config.id fields will be set.
  google.protobuf.FieldMask portal_config_mask = 3;
  // controls which fields are sent back on entity related to the portal's plugin_instances.
  // If left empty, only each plugin_instance.name, and plugin_instance.id fields will be set.
  google.protobuf.FieldMask plugin_instance_mask = 4;
}

message GetDetailedPortalRes {
  message Entity {
    Portal portal = 1;
    PortalConfig portal_config = 2;
    repeated PluginInstance plugin_instances = 3;
  }
  Entity entity = 4;
}

message UpsertPluginInstanceReq {
  PluginInstance entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpsertPluginInstanceRes {
  PluginInstanceId entity = 1;
}
message GetPluginInstanceReq {
  PluginInstanceId entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetPluginInstanceRes {
  PluginInstance entity = 1;
}
message DeletePluginInstanceReq {
  PluginInstanceId entity = 1;
}
message DeletePluginInstanceRes {}
message ListPluginInstanceReq {
  PluginInstance entity = 1;
  google.protobuf.FieldMask mask = 2;
  int32 page_size = 3;
  int32 page = 4;
}
message ListPluginInstanceRes {
  repeated PluginInstance entities = 1;
}
message ListPluginsReq {}
message ListPluginsRes {
  // TODO DISCUSS
}
message ListPortalLinksReq {
  PortalLinkId entity = 1;
  google.protobuf.FieldMask mask = 2;
  int32 page_size = 3;
  int32 page = 4;
}
message ListPortalLinksRes {
  repeated PortalLink entities = 1;
}
message GetPortalLinkReq {
  PortalLinkId entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetPortalLinkRes {
  PortalLink entity = 1;
}
message DeletePortalLinkReq {
  PortalLinkId entity = 1;
}
message DeletePortalLinkRes {}
message CreatePortalLinksReq {
  // the portal's pk the link is for
  PortalId entity = 1;
  // each task will have a url created for it
  // and all info for it can be located by Task.task_id
  repeated Task link_datas = 2;
}
message CreatePortalLinksRes {
  // each url will be returned in order of the CreatePortalLinks.link_datas sent them in
  repeated string urls = 1;
}

// used to check what field names are expected by a flow
// does not return any other information about the fields,
// and the user backend still allows any data to be submitted.
message ListFlowFieldNamesReq {
  message Entity {
    // the single flow we are interested in checking
    api.commons.integrations.Flow flow = 3;
    // the location the flow will check for fields
    api.commons.integrations.FlowFieldLoc loc = 4;
  }
  Entity entity = 5;
}

// the field names the flow will look for at the request's specified location
message ListFlowFieldNamesRes {
  repeated string field_names = 1;
}

// for listing fields on the given verification flow
message ListAvailableVerificationFieldsReq {
  api.commons.integrations.VerificationFlow verification = 1;
}

// the available fields for the verification flow
message ListAvailableVerificationFieldsRes {
  repeated api.commons.integrations.FieldDefinition verification_fields = 2;
}

// for listing fields on the given payment flow
message ListAvailablePaymentFieldsReq {
  api.commons.integrations.PaymentFlow payment = 1;
}

// the available fields for the payment flow
message ListAvailablePaymentFieldsRes {
  repeated api.commons.integrations.FieldDefinition payment_fields = 2;
}

message ListPortalTypesReq {}
message ListPortalTypesResponse {
  repeated PortalDefinition values = 1;
}

message ListPortalWorkflowsReq {}
message ListPortalWorkflowsResponse {
  repeated WorkflowDefinition values = 1;
}

// this describes a portal type. any created portals must conform to a
// portal definition.
message PortalDefinition {
  // the name of this type of portal
  string definition_name = 2;
  // each FlowRequirement below represents a screen that must be presented
  // to the user in order. All flows in the workflow_requirements must be completed in order.
  // Payment portal would have 3 workflow_requirements:
  // workflow_requirements: [
  //   FlowRequirement{max_choices: 1, flow_type: VERIFICATION},
  //   FlowRequirement{max_choices: 1, flow_type: INVOICE},
  //   FlowRequirement{max_choices: 0, flow_type: PAYMENT},
  // ]
  repeated WorkflowRequirement workflow_requirements = 3;
}
message WorkflowRequirement {
  // how many different flows the user can choose from on this step.
  // 0 and below is interpreted as unlimited flows.
  // example:
  // PaymentPortal would have this set to 1 for verification flow and invoice flows
  // and set to 0 for payment flows. This forces the user to verify exactly 1 way
  // see exactly 1 invoice, and choose credit card, ach paypal, etc to pay.
  int32 max_choices = 1;
  // the flows for this step must be of this type
  // FLOW_TYPE_UNKNOWN is interpreted as any flow type is acceptable
  api.commons.integrations.FlowType flow_type = 2;
}

// this describes the requirements to build a Flow entity
// that matches this description.  All created flows must
// conform to a FlowDefinition.
message WorkflowDefinition {
  // the type of flow
  api.commons.integrations.FlowType flow_type = 1;
  // the name of this flow definition
  string definition_name = 2;
  // the api method performed for this flow.
  api.commons.integrations.RequestMethod method = 3;
  // the fields required to complete this flow
  repeated api.commons.integrations.FieldDefinition req_fields = 4;
  // the fields returned from this flows execution
  repeated api.commons.integrations.FieldDefinition res_fields = 5;
  // a subset of req_fields we suggest go in the plugin instance.
  repeated api.commons.integrations.FieldDefinition plugin_fields = 6;
  // a subset of req_fields we suggest go in the portal link
  repeated api.commons.integrations.FieldDefinition link_fields = 7;
  // a subset of req_fields we suggest come from some previously called flow.
  // this is usually empty. Experian Payment flows do have this populated with
  // data that comes from the experian query balance flow.
  repeated api.commons.integrations.FieldDefinition prev_fields = 8;
  // a subset of either req_fields OR res_fields that is suggested comes from the user.
  // Example:
  // verification flows would have a subset of the res_fields here, because
  // we want to verify the user provided data against the api call's result.
  // but
  // payment flows would have a subset of req_fields here, because
  // we want to take the payment fields from the user to make the api call.
  // Some flows have no form fields. Invoice Flows and Execute Flows don't need
  // a user form, so this is empty on those flows.
  repeated api.commons.integrations.FieldDefinition form_fields = 9;
  // The default template that can be used with the result data to make it pretty
  // and grouped. Right now this is only used for invoices.
  Template template = 10;
  // Optional data that can be defined on Flow creation tine to affect the execution
  // of the flow entity.
  // Example:
  // Experian flows have a 'use_invoice_account_number' field that is a boolean.
  // if checked, we change the account number used for payment, rather than use the
  // one provided in the portal link.
  repeated api.commons.integrations.FieldDefinition opts = 11;
}
