// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package api.v1alpha1.asm;

import "annotations/authz.proto";
import "api/commons/acd.proto";
import "api/commons/asm.proto";
import "api/commons/omnichannel.proto";
import "api/v1alpha1/asm/service.proto";
import "google/api/annotations.proto";

service Asm {
  // Streams back status updates for the given asm session
  // only the asm session sid filter is allowed
  rpc StreamAgentState(StreamAgentStateReq) returns (stream api.commons.StreamAgentStateRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/streamagentstate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }
  // Streams back statuses for the desired filter
  rpc ManagerStreamAgentState(ManagerStreamAgentStateReq) returns (stream api.commons.ManagerStreamAgentStateRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/managerstreamagentstate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT_MANAGEMENT]
        }
      ]
    };
  }

  rpc PushEvents(PushEventsReq) returns (PushEventsRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/pushevents";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // Creates an agent session and enables the voice channel
  rpc CreateSession(CreateSessionReq) returns (CreateSessionRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/createsession";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Closes an asm session and all sub sessions
  rpc EndSession(EndSessionReq) returns (EndSessionRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/endsession";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Gets an agent's current asm session
  rpc GetCurrentSession(GetCurrentSessionReq) returns (AsmSession) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/getcurrentsession";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Updates the currently active subsession
  rpc EnableVoice(EnableVoiceReq) returns (EnableVoiceRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/enablevoice";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  rpc DisableVoice(DisableVoiceReq) returns (DisableVoiceRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/disablevoice";
    option (google.api.http).body = "*";
    option (annotations.authz) = {no_permissions: true};
  }

  // Lists the conversations for an assigned agent
  rpc ListConversations(ListConversationsReq) returns (ListConversationsRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/listconversations";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // Assign agent to matched conversation based on skills and channelTypes requested
  rpc AssignNewConversation(AssignNewConversationReq) returns (AssignNewConversationRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/assignnewconversation";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }

  // List all agents for the given user. Contains statistical enrichments for each agent and their conversations.
  rpc ListAgents(ListAgentsReq) returns (ListAgentsRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/listagents";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_OMNI_BOSS]
        }
      ]
    };
  }

  // Set collected data per conversation
  rpc SetConversationCollectedData(SetConversationCollectedDataReq) returns (SetConversationCollectedDataRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/setconversationcollecteddata";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        },
        {
          permissions: [PERMISSION_OMNI_BOSS]
        }
      ]
    };
  }

  // Set queue details
  rpc GetQueuesDetails(GetQueuesDetailsReq) returns (api.commons.GetQueuesDetailsRes) {
    option (google.api.http).post = "/api/v1alpha1/asm/asm/getqueuesdetails";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_AGENT]
        }
      ]
    };
  }
}
