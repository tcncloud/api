syntax = "proto3";

package api.v1alpha1.vanalytics;

import "api/commons/acd.proto";
import "api/v1alpha1/vanalytics/aclpb/aclpb.proto";
import "api/v1alpha1/vanalytics/expr.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// [BULK_DELETE] ===============================================================

// BulkDeleteTranscriptsRequest defines the bulk delete transcripts request.
message BulkDeleteTranscriptsRequest {
  // Required. A query which determines which transcripts to delete.
  SearchRequest query = 1;
}

// BulkDeleteTranscriptsResponse defines the bulk delete transcripts response.
message BulkDeleteTranscriptsResponse {
  // The number of transcripts deleted.
  uint32 total = 1;
}

// [BULK_RESTORE] ===============================================================

// BulkRestoreTranscriptsRequest defines the bulk restore transcripts request.
message BulkRestoreTranscriptsRequest {
  // Required. A query which determines which transcripts to restore.
  SearchRequest query = 1;
}

// BulkRestoreTranscriptsResponse defines the bulk restore transcripts response.
message BulkRestoreTranscriptsResponse {
  // The number of transcripts restored.
  uint32 total = 1;
}

// [SEARCH] ====================================================================

message SearchRequest {
  reserved 1;
  Silence silence = 2;
  // talk time in milliseconds
  Uint32Expr talk_time = 3;
  // agent defines query constraints on agent specific fields
  Agent agent = 4;
  // number of hits included in response
  uint32 page_size = 5;
  Sort sort = 6;
  TimestampExpr create_time = 7;
  TalkOver talk_over = 8;
  Terms terms = 9;
  // channel when set requires search terms to be matched on a specific channel
  uint32 channel = 10;
  // phrase is words to search for that are close together
  Phrase phrase = 11;
  // Optional. transcript_mask contains a list of transcript fields to be returned.
  // If no transcript_mask is provided it defaults to returning all fields.
  google.protobuf.FieldMask transcript_mask = 12;
  // Optional. When not zero filter on transcript_sid.
  int64 transcript_sid = 13;
  // Optional. Phone number to search for.
  string phone_number = 14;
  // Optional. Caller id to search for.
  string caller_id = 15;
  // Optional. When not empty filter on transcript_sids.
  repeated int64 transcript_sids = 16;
  // Optional. Call start time to filter on.
  TimestampExpr call_start_time = 17;
  // Optional. Call types to filter on. Possible call types are INBOUND, OUTBOUND,
  // PREVIEW, and MANUAL.
  repeated api.commons.CallType.Enum call_types = 18;
  // Optional. Call sids to filter on.
  repeated int64 call_sids = 19;
  // Optional. Hunt group sids to filter on.
  repeated int64 hunt_group_sids = 20;
  // Optional. Group names to filter on.
  repeated string group_names = 21;
  // Optional. Agent call log to filter on.
  AgentCallLogQuery agent_call_log = 22;

  // Optional. Query on transcript fields.
  SearchQuery where = 23;

  // Optional. Time frame to filter on in milliseconds. For example, this can be used to
  // filter for a term or phrase that is within the first 500 milliseconds of a transcript.
  Uint32Range time_frame = 24;

  message Phrase {
    // words that will be searched for
    repeated Word words = 1;
    // slop is the number of extra terms that can be in the query that
    // are not being searched for. For example: slop of 2 when searching for
    // "This is my dog" would allow "This is my quick brown dog".
    uint32 slop = 2;
    // when in_order is true then the terms must be found in the order given.
    bool in_order = 3;
    // highlight contains settings for highlighting the words in the response
    Highlight highlight = 4;
    // When true the phrase must not be matched.
    bool not = 5;

    // When set, phrase must be spoken during agent session.
    // Use with channel to target (a) speaker(s).
    //   - e.g. caller spoke phrase to this specific agent
    Agent agent = 6;

    // When set, targets side of call (caller or agent).
    // Use 1 for caller, 2 for agent.
    // Use with agent to target (a) speaker(s).
    //   - e.g. caller spoke phrase to this specific agent
    uint32 channel = 7;

    // PositionOffset defines where a phrase will be searched for
    // in a transcript. For example:
    // [  0,   0] match anywhere
    // [ 30,  60] match between (start + 30) and (start + 60)
    // [  0,  30] match between  (start + 0) and (start + 30)
    // [  0, -30] match between  (start + 0) and (stop - 30)
    // [-60, -30] match between  (stop - 60) and (stop - 30)
    // [-30,   0] match between  (stop - 30) and (stop - 0)
    PositionOffset position_offset = 8;

    message Word {
      // value is a word to search for
      string value = 1;
      // fuzziness allows the term to be spelled slightly incorrect and still
      // match. Fuzziness can have the values 0, 1, 2, or "AUTO"; 0 would require
      // that the term matches exactly, 2 would allow 2 letter differences, and
      // AUTO would automatically pick a number based on the word length.
      string fuzziness = 2;
    }

    message Highlight {
      // pre_tags are tags that will come before any highlighted word
      // to show it is highlighted. Defaults to ["<em>"]
      repeated string pre_tags = 1;
      // post_tags are tags that will come after any highlighted word
      // to show it is highlighted. Defaults to ["</em>"]
      repeated string post_tags = 2;
    }
  }

  message PositionOffset {
    google.protobuf.Duration start = 1;
    google.protobuf.Duration stop = 2;
  }

  message Silence {
    // duration_total is the total silence duration within a transcript in milliseconds
    Uint32Expr duration_total = 1;
    // duration_max is the max individual duration of silence within a transcript in milliseconds
    Uint32Expr duration_max = 2;
    Uint32Expr occurrence_total = 3;
    // duration_percentage is a number from 0-100 representing the percent
    // of the transcript that is silence
    Uint32Expr duration_percentage = 4;
  }

  message TalkOver {
    // duration_total is the total talkover duration within a transcript in milliseconds
    Uint32Expr duration_total = 1;
    // duration_max is the max individual duration of talkover within a transcript in milliseconds
    Uint32Expr duration_max = 2;
    Uint32Expr occurrence_total = 3;
    // duration_percentage is a number from 0-100 representing the percent
    // of the transcript that is talkover
    Uint32Expr duration_percentage = 4;
  }

  message Terms {
    // any is a set of terms which the transcript must contain at least one of
    repeated string any = 1;
    // all is a set of terms which the transcript must contain
    repeated string all = 2;
    // When true the terms must not be matched.
    bool not = 3;

    // When set, terms must be spoken during agent session.
    // Use with channel to target (a) speaker(s).
    //   - e.g. caller spoke terms to this specific agent
    Agent agent = 4;

    // When set, targets side of call (caller or agent).
    // Use 1 for caller, 2 for agent.
    // Use with agent to target (a) speaker(s).
    //   - e.g. caller spoke terms to this specific agent
    uint32 channel = 5;

    // PositionOffset defines where terms will be searched for
    // in a transcript. For example:
    // [  0,   0] match anywhere
    // [ 30,  60] match between (start + 30) and (start + 60)
    // [  0,  30] match between  (start + 0) and (start + 30)
    // [  0, -30] match between  (start + 0) and (stop - 30)
    // [-60, -30] match between  (stop - 60) and (stop - 30)
    // [-30,   0] match between  (stop - 30) and (stop - 0)
    PositionOffset position_offset = 6;
  }

  message Agent {
    UserName user_name = 1;

    message UserName {
      // any is a set of agent user names which the transcript must contain at least one of
      repeated string any = 1;
      // all is a set of agent user names which the transcript must contain
      repeated string all = 2;
    }
  }
}

// SearchQuery defines a query on transcript fields.
message SearchQuery {
  // Optional. Queries transcript sid.
  TranscriptSid transcript_sid = 1;

  // Optional. Queries flag summary.
  FlagSummary flag_summary = 2;

  // Optional. Groups query conditions with logical or.
  repeated SearchQuery or = 3;

  // Optional. Groups query conditions with logical and.
  repeated SearchQuery and = 4;

  // Optional. Queries on audio time.
  AudioTime audio_time = 5;

  // Optional. By default all transcripts (including deleted) will be shown.
  DeleteTime delete_time = 6;

  // Optional. Queries for what does not match the query.
  SearchQuery not = 7;

  Results results = 8;

  // Optional. Queries on agent responses.
  AgentResponse agent_response = 9;

  // Optional. Queries on agent call log.
  AgentCallLog agent_call_log = 10;

  // Optional. Queries on phone.
  Phone phone = 11;

  // Phone defines a query on the phone.
  message Phone {
    // Optional. Queries on phone country code.
    Cc cc = 1;

    // Optional. Queries on phone ndc (area code).
    Ndc ndc = 2;

    // Optional. Queries on phone subscriber number prefix.
    Prefix prefix = 3;

    // Optional. Queries on phone city.
    City city = 4;

    // Optional. Queries on phone iso2 country code.
    Iso2 iso2 = 5;

    // Optional. Queries on phone region code.
    RegionCode region_code = 6;

    // Optional. Queries on phone region name.
    RegionName region_name = 7;

    // Optional. Queries on phone time zone.
    TimeZone time_zone = 8;

    // Optional. Queries on phone number type.
    Type type = 9;

    // Optional. Queries on phone number utc.
    Utc utc = 10;

    // Optional. Queries on phone number location.
    Location location = 11;
  }

  // Cc defines a query on the phone country code.
  message Cc {
    // Optional. Queries where cc in list provided.
    repeated string in = 1;
  }

  // Ndc defines a query on the phone ndc.
  message Ndc {
    // Optional. Queries where ndc in list provided.
    repeated string in = 1;
  }

  // Prefix defines a query on the phone prefix.
  message Prefix {
    // Optional. Queries where prefix in list provided.
    repeated string in = 1;
  }

  // City defines a query on the phone city.
  message City {
    // Optional. Queries where city in list provided.
    repeated string in = 1;
  }

  // Iso2 defines a query on the phone Iso2.
  message Iso2 {
    // Optional. Queries where iso2 in list provided.
    repeated string in = 1;
  }

  // RegionCode defines a query on the phone region code.
  message RegionCode {
    // Optional. Queries where region code in list provided.
    repeated string in = 1;
  }

  // RegionName defines a query on the phone region name.
  message RegionName {
    // Optional. Queries where region name in list provided.
    repeated string in = 1;
  }

  // TimeZone defines a query on the phone time zone.
  message TimeZone {
    // Optional. Queries where time zone in list provided.
    repeated string in = 1;
  }

  // Type defines a query on the phone type.
  message Type {
    // Optional. Queries where type in list provided.
    repeated string in = 1;
  }

  // Utc defines a query on the phone utc.
  message Utc {
    // Optional. Queries where utc in list provided.
    repeated float in = 1;
  }

  // Location defines a query on the phone location.
  message Location {
    ZipCodeProximity zip_code_proximity = 1;
    message ZipCodeProximity {
      // Required. Queries on phone number country code.
      string country_code = 1;
      // Required. Queries where phone location is within distance of zipcode.
      string zip_code = 2;
      // Required. Queries where phone location is within distance (km or mi) of zipcode. For example: 100km.
      string distance = 3;
    }
  }

  // AgentCallLog is a query for the agent call log.
  message AgentCallLog {
    // Optional. Call skills initial will query the initial call skills.
    CallSkillsInitial call_skills_initial = 1;
    // Optional. Call ended will query on the reason the call ended.
    CallEnded call_ended = 2;
  }

  // CallEnded is a query for the call ended.
  message CallEnded {
    // Required. The reasons to be filtered on.
    repeated api.commons.AgentCallLogCallEnded reasons = 1;
  }

  // CallSkillsInitial is a query for the initial call skills.
  message CallSkillsInitial {
    // Optional. Needed initial call skills to filter on.
    repeated string need = 1;
    // Optional. Wanted initial call skills to filter on.
    repeated string want = 2;
  }

  // AgentResponse defines a query on agent responses.
  message AgentResponse {
    // Optional. Key to query on.
    Key key = 1;

    // Optional. Queries values for the given keys. If no keys are provided then
    // it will run the query on all values.
    Values values = 2;

    // Optional. Queries values as numbers for the given keys.
    Numbers numbers = 3;

    // Values defines a query on values.
    message Values {
      // Optional. Queries where value in list provided.
      repeated string in = 1;

      // Optional. Queries where value for key starts with given string.
      string starts_with = 2;

      // Optional. Queries where value for key contains given string.
      string contains = 3;
    }

    // Numbers defines a query on values as numbers.
    message Numbers {
      // Optional. Queries where value in list provided.
      repeated double in = 1;

      // Optional. Queries where greater than or equal.
      google.protobuf.DoubleValue gte = 2;

      // Optional. Queries where less than or equal.
      google.protobuf.DoubleValue lte = 3;

      // Optional. Queries where greater than.
      google.protobuf.DoubleValue gt = 4;

      // Optional. Queries where less than.
      google.protobuf.DoubleValue lt = 5;

      // Optional. Queries where equal to.
      google.protobuf.DoubleValue eq = 6;
    }

    // Key defines a query on keys.
    message Key {
      // Optional. Queries where key in list provided.
      repeated string in = 1;

      // Optional. Queries where key starts with given string.
      string starts_with = 2;

      // Optional. Queries where key contains given string.
      string contains = 3;
    }
  }

  message Results {
    Channel channel = 1;
    AgentUserName agent_user_name = 2;
    Segments segments = 3;

    message Channel {
      uint32 eq = 1;
    }

    message AgentUserName {
      repeated string any = 1;
      repeated string all = 2;
    }

    message Segments {
      Text text = 1;

      message Text {
        Phrase phrase = 1;

        message Phrase {
          repeated Word words = 1;
          uint32 slop = 2;
          bool in_order = 3;

          message Word {
            string value = 1;
            string fuzziness = 2;
          }
        }
      }
    }
  }

  // DeleteTime defines a query on delete time.
  message DeleteTime {
    // Optional. Queries on if delete time field exists.
    // If value is true then only deleted transcripts are returned.
    // If value is false then only non-deleted transcripted are returned.
    google.protobuf.BoolValue exists = 1;
  }

  // TranscriptSid defines a query on transcript sid.
  message TranscriptSid {
    // Optional. Must have any provided transcript sid.
    repeated int64 any = 1;

    // Optional. Queries where greater than or equal.
    google.protobuf.Int64Value gte = 2;
  }

  // AudioTime defines a query on audio_time.
  message AudioTime {
    // Optional. Queries where greater than or equal.
    google.protobuf.Int32Value gte = 1;
    // Optional. Queries where less than or equal.
    google.protobuf.Int32Value lte = 2;
    // Optional. Queries where greater than.
    google.protobuf.Int32Value gt = 3;
    // Optional. Queries where less than.
    google.protobuf.Int32Value lt = 4;
  }

  // FlagSummary defines a query on flag summary fields.
  message FlagSummary {
    // Optional. Queries need review.
    NeedReview need_review = 1;

    // Optional. Queries review status.
    ReviewStatus review_status = 2;

    // Optional. Queries flags.
    Flags flags = 3;

    // Optional. Queries count.
    Count count = 4;

    // NeedReview defines a query on need review fields.
    message NeedReview {
      // Optional. Queries flag sids. If no flag sids are given then
      // it will filer on need review count > 0.
      FlagSids flag_sids = 1;

      // FlagSids defines a query on flag sids.
      message FlagSids {
        // Optional. Must have any provided flag sids.
        repeated int64 any = 1;
      }
    }

    // ReviewStatus defines a query on review status.
    message ReviewStatus {
      // Optional. Must have any provided review status.
      repeated TranscriptReviewStatus any = 1;
    }

    // Flags defines a query on flags.
    message Flags {
      // Optional. Queries flag sid.
      FlagSid flag_sid = 1;

      // FlagSid defines a query on flag sid.
      message FlagSid {
        // Optional. Must have any of the provided flag sids.
        repeated int64 any = 1;

        // Optional. Must have all of the provided flag sids.
        repeated int64 all = 2;

        // TODO:
        // FlagSid not = 5;
      }
    }

    // Count defines a query on count.
    message Count {
      // Optional. Queries count greater than or equal.
      google.protobuf.Int32Value gte = 1;
      // Optional. Queries count less than or equal.
      google.protobuf.Int32Value lte = 2;
      // Optional. Queries count greater than.
      google.protobuf.Int32Value gt = 3;
      // Optional. Queries count less than.
      google.protobuf.Int32Value lt = 4;
      // Optional. Queries count equal to.
      google.protobuf.Int32Value eq = 5;
    }
  }
}

message SearchResponse {
  // total number of hits in query
  uint64 total = 1;
  // one page of hits
  repeated Hit hits = 4;
  // Sort is the original sort but also includes after values of last search
  // hit. This is intended to be used on a subsequent search request to get the
  // next page of search hits.
  Sort sort = 5;

  message Hit {
    Transcript transcript = 1;
  }
}

// AgentCallLogQuery is a query for the agent call log.
message AgentCallLogQuery {
  // call skills initial will query the initial call skills.
  CallSkillsInitialQuery call_skills_initial = 1;
}

// CallSkillsInitialQuery is a query for the initial call skills.
message CallSkillsInitialQuery {
  // Optional. Needed initial call skills to filter on.
  repeated VanaTermsQuery need = 1;
  // Optional. Wanted initial call skills to filter on.
  repeated VanaTermsQuery want = 2;
}

// VanaTermsQuery is a query for none, all, or any terms.
message VanaTermsQuery {
  // Required. The terms to be filtered on.
  repeated string terms = 1;
  // Optional. If true then filters out where terms match.
  bool lacks = 2;
  // Optional. If true then all terms must match.
  bool all = 3;
}

message Sort {
  // Fields to sort by with names in json notation. i.e.
  // audio_time, silence.duration.total, result.text
  repeated Field fields = 1;
  // After values define the starting offset of response hits. i.e.
  // given sort {"fields":[{"name":"silence.duration.total"}],"after":["3200"]}
  // then the search response is sorted by ascending silence duration where
  // silence duration total is greater than 3200. The after values are used
  // to scroll through the paginated search hits.
  repeated string after = 2;

  message Field {
    string name = 1;
    bool desc = 2;
  }
}

// [LIST GROUP NAMES] ===========================================================

// ListTranscriptGroupNamesRequest is a request for listing group names.
message ListTranscriptGroupNamesRequest {}

// ListTranscriptGroupNamesResponse is a response for listing group names.
message ListTranscriptGroupNamesResponse {
  // Group names are the transcript group names.
  repeated TranscriptGroupName group_names = 1;
}

// TranscriptGroupName is the transcript group name.
message TranscriptGroupName {
  // value is a group name value.
  string value = 1;
}

// [LIST AGENT RESPONSE VALUES] ===========================================================

// ListAgentResponseValuesRequest is a request for listing agent reponse values.
message ListAgentResponseValuesRequest {
  string key = 2;
}

// ListAgentResponseValuesResponse is a response for listing agent response values.
message ListAgentResponseValuesResponse {
  // Values are the transcript agent response values.
  repeated string values = 1;
}

// [RESOURCE] ==================================================================

message Transcript {
  int64 transcript_sid = 1;
  int64 call_sid = 3;
  api.commons.CallType.Enum call_type = 4;
  repeated Result results = 5;
  Silence silence = 6;
  // talk time in milliseconds
  uint32 talk_time = 7;
  google.protobuf.Timestamp create_time = 9;
  google.protobuf.Timestamp call_start_time = 10;
  TalkOver talk_over = 11;
  string caller_id = 12;
  string phone_number = 13;
  // audio time in milliseconds
  uint32 audio_time = 14;
  int64 audio_bytes = 15;
  string group_name = 17;
  v1alpha1.vanalytics.aclpb.AgentCallLog agent_call_log = 18;
  FlagSummary flag_summary = 19;
  // delete time is the time the transcript was marked as deleted.
  google.protobuf.Timestamp delete_time = 20;
  string number_format = 21;
  map<string, AgentResponse> agent_response = 22;
}

message Result {
  int32 channel = 1;
  repeated Segment segments = 2;
  string agent_first_name = 5;
  string agent_last_name = 6;
  string agent_user_name = 7;
  uint32 begin_time = 8;
  uint32 duration = 9;
  string text = 10;
  int64 hunt_group_sid = 11;
}

message Segment {
  // begin time in milliseconds
  uint32 begin_time = 1;
  // confidence from 0 to 100
  uint32 confidence = 2;
  // duration in milliseconds
  uint32 duration = 3;
  string text = 4;
  repeated Word words = 5;
}

message Word {
  // begin time in milliseconds
  uint32 begin_time = 1;
  // confidence from 0 to 100
  uint32 confidence = 2;
  // duration in milliseconds
  uint32 duration = 3;
  string spoken = 4;
  bool redacted = 5;
}

message Silence {
  Duration duration = 1;
  repeated Segment segments = 2;
  Occurrence occurrence = 3;
  // threshold in milliseconds is the minimum duration of silence
  // to be counted as silence in a transcript
  uint32 threshold = 4;

  message Duration {
    // total in milliseconds
    uint32 total = 1;
    // max in milliseconds
    uint32 max = 2;
    // percentage of silence in transcript from 0-100
    uint32 percentage = 3;
  }

  message Segment {
    // begin time in milliseconds
    uint32 begin_time = 1;
    // duration in milliseconds
    uint32 duration = 2;
  }

  message Occurrence {
    // total in milliseconds
    uint32 total = 1;
  }
}

message TalkOver {
  Occurrence occurrence = 1;
  Duration duration = 2;
  repeated Result results = 3;
  // threshold in milliseconds is the minimum duration of talk over
  // to be counted as talk over in a transcript
  uint32 threshold = 4;

  message Duration {
    // total in milliseconds
    uint32 total = 1;
    // max in milliseconds
    uint32 max = 2;
    // percentage of talkover in transcript from 0-100
    uint32 percentage = 3;
  }

  message Result {
    int32 channel = 1;
    Occurrence occurrence = 2;
    Duration duration = 3;
    repeated Segment segments = 4;
    string agent_user_name = 5;
    int64 agent_session_sid = 6;
  }

  message Segment {
    // begin time in milliseconds
    uint32 begin_time = 1;
    // duration in milliseconds
    uint32 duration = 2;
  }

  message Occurrence {
    // total in milliseconds
    uint32 total = 1;
  }
}

// FlagSummary defines a summary of flags which were applied to a transcript.
message FlagSummary {
  // The number of flags associated with the transcript.
  int32 count = 1;

  // The sum of the priorities of the flags associated with the transcript.
  int32 priority_sum = 2;

  // The highest priority of the flags associated with the transcript.
  int32 priority_max = 3;

  // Need Review provides info on the flags that need review.
  NeedReview need_review = 4;

  // Flags contain the flags and filters that are associated with the transcript.
  repeated Flag flags = 5;

  // The review status of the flagged transcript.
  TranscriptReviewStatus review_status = 6;

  // NeedReview defines flags which need to be reviewed.
  message NeedReview {
    // The sum of the priorities of the flags that need review.
    int32 priority_sum = 1;

    // The highest priority of the flags that need review.
    int32 priority_max = 2;

    // The number of flags that need review.
    int32 count = 3;

    // The Flag sids that need review.
    repeated int64 flag_sids = 4;
  }

  // Flag defines a flag that was applied to a transcript by one or more filters
  // along with a user review when one exists.
  message Flag {
    // The unique id of this flag.
    int64 flag_sid = 1;

    // The name of this flag.
    string name = 2;

    // The priority of this flag.
    int32 priority = 3;

    // The version of this flag.
    int64 version = 4;

    // Filters which applied this flag.
    repeated Filter filters = 5;

    // Determines whether this flag must be reviewed.
    bool must_review = 6;

    // Determines whether this flag must be notified.
    bool must_notify = 7;

    // The reviews of this flag.
    repeated Review reviews = 8;
  }

  // Filter defines a filter which applied some flag to some transcript.
  message Filter {
    // The join key in form [flag_sid:filter_sid].
    string join_key = 1;

    // The flag sid this filter belongs to.
    int64 flag_sid = 2;

    // The unique id of this filter.
    int64 filter_sid = 3;

    // The version of this filter.
    int64 version = 4;

    // The name of this filter.
    string name = 5;
  }

  // Review contains info on the flag review when one exists.
  message Review {
    // The join key in form [flag_sid:user_id].
    string join_key = 1;

    // The flag sid this review belongs to.
    int64 flag_sid = 2;

    // The user id of the reviewer.
    string user_id = 3;
  }
}

// TranscriptReviewStatus is an enumeration of a flagged transcripts review
// statuses. Todo means there are flags that need review and have not been
// reviewed. Done means every flag that needs review has been reviewed. None
// means zero flags require review.
enum TranscriptReviewStatus {
  TRANSCRIPT_REVIEW_STATUS_TODO = 0;
  TRANSCRIPT_REVIEW_STATUS_DONE = 1;
  TRANSCRIPT_REVIEW_STATUS_NONE = 2;
}

// AgentResponse contains the agent responses aka dispositions.
message AgentResponse {
  repeated string values = 1;
}
