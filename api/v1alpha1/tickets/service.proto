syntax = "proto3";

package api.v1alpha1.tickets;

import "annotations/authz.proto";
import "api/v1alpha1/tickets/project.proto";
import "api/v1alpha1/tickets/ticket.proto";
import "google/api/annotations.proto";

// Tickets service is the public api for the tickets service., for public integrations to manage tickets / customer service requests. Can be used by any authorized frontend-app.
service Tickets {
  // Public Method to create a ticket.
  rpc CreateTicket(CreateTicketReq) returns (CreateTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/createticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }
  // Public Method to edit a ticket.
  rpc EditTicket(EditTicketReq) returns (EditTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/editticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to list tickets
  rpc ListTickets(ListTicketsReq) returns (ListTicketsRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listtickets";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to assign ticket
  // Would be deprecated
  rpc AssignTicket(AssignTicketReq) returns (AssignTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/assignticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public Method to Close a ticket
  // Any agent can close the ticket. No BE validation required
  rpc CloseTicket(CloseTicketReq) returns (CloseTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/closeticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to view ticket
  rpc ViewTicket(ViewTicketReq) returns (ViewTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/viewticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public Method to create a Comment.
  rpc CreateComment(CreateCommentReq) returns (CreateCommentRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/createcomment";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to Enable Project for Ticketing system
  rpc EnableProject(EnableProjectReq) returns (EnableProjectRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/enableproject";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to List projects enabled for Ticketing system
  rpc ListEnabledProjects(ListEnabledProjectsReq) returns (ListEnabledProjectsRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listprojects";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }
  // Public Method to create a sla.
  rpc CreateSLA(CreateSlaReq) returns (CreateSlaRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/createsla";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to list sla
  rpc ListSLA(ListSlaReq) returns (ListSlaRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listsla";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        },
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to update sla
  rpc UpdateSLA(UpdateSlaReq) returns (UpdateSlaRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/updatesla";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to list sla_condition
  rpc ListSLACondition(ListSlaConditionReq) returns (ListSlaConditionRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listslacondition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        },
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to list sla_condition
  rpc ReplyComment(ReplyCommentReq) returns (ReplyCommentRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/replycomment";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to List audit log for Ticketing system
  rpc ListTicketAuditLog(ListTicketAuditLogReq) returns (ListTicketAuditLogRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/auditlog";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to assign a ticket
  rpc AssignSelf(CreateSelfAssignReq) returns (CreateSelfAssignRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/assignself";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }
  // Public Method to edit a ticket.
  // EditTicket would be deprecated
  rpc EditMaskTicket(EditMaskTicketReq) returns (EditMaskTicketRes) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/editmaskticket";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  rpc ListAllocatedTickets(ListAllocatedTicketReq) returns (ListAllocatedTicketRes) {
    option deprecated = true;
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listallocatedtickets";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  //public method - to return list of available tickets to pick for an Agent
  rpc ListAvailableAgentTickets(ListAvailableAgentTicketsRequest) returns (ListAvailableAgentTicketsResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listavailableagenttickets";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // public method to fetch list of skills for a tickets user
  rpc ListSkills(ListSkillsRequest) returns (ListSkillsResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listskills";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // public method to fetch list of users for a tickets user
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listusers";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Any agent can close the ticket. No BE validation required
  rpc CloseTicketAction(CloseTicketActionRequest) returns (CloseTicketActionResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/closeticketaction";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to assign a ticket action
  rpc AssignTicketAction(AssignTicketActionRequest) returns (AssignTicketActionResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/assignticketaction";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }
  // Public method to assign a ticket
  rpc CreateTicketAction(CreateTicketActionRequest) returns (CreateTicketActionResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/createticketaction";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to change the Status of a ticket
  rpc ChangeTicketStatus(ChangeTicketStatusRequest) returns (ChangeTicketStatusResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/changeticketstatus";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to create a Ticket Template
  rpc CreateTicketTemplate(CreateTicketTemplateRequest) returns (CreateTicketTemplateResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/createtickettemplate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to Edit a Ticket Template
  rpc EditTicketTemplate(EditTicketTemplateRequest) returns (EditTicketTemplateResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/edittickettemplate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to all Ticket Templates
  rpc ListTicketTemplate(ListTicketTemplateRequest) returns (ListTicketTemplateResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/listtickettemplate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        },
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }

  // Public method to assign a Template To a Project
  rpc AssignTicketTemplate(AssignProjectTemplateRequest) returns (AssignProjectTemplateResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/assigntickettemplate";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        }
      ];
    };
  }

  // Public method to list all Action Types
  rpc GetAllActionType(GetActionTypeRequest) returns (GetActionTypeResponse) {
    option (google.api.http).post = "/api/v1alpha1/tickets/tickets/getallActiontype";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_TICKETS_ADMIN]
        },
        {
          permissions: [PERMISSION_TICKETS_APP]
        }
      ];
    };
  }
}
