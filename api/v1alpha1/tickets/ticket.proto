syntax = "proto3";

package api.v1alpha1.tickets;

import "api/commons/tickets.proto";
import "google/protobuf/timestamp.proto";

message PingReq {}
message PingRes {}

// CreateTicketReq - Request for CreateTicket
message CreateTicketReq {
  // title of the ticket to be created.
  string title = 1;

  // description of the ticket
  string description = 2;

  // the enabled project sid. project must have been enabled/imported from omni.project.project_sid to tickets_db.ticket_project.project_sid
  int64 project_sid = 3 [jstype = JS_STRING];

  // ticket due date
  google.protobuf.Timestamp due_date = 8;
  // A list of conversation context meatadatgit stata
  repeated api.commons.Metadata metadata = 9;
  // A list of skills assotiated with a ticket
  repeated api.commons.Skills ticket_skills = 10;
  // Status - Ticket status : 1 open, 2 doing, 3 close etc
  int64 status = 11;
  // A list of sla assotiated with a ticket
  repeated api.commons.Sla ticket_sla = 12;
  bool assign_self = 13;
  string assign_other = 14;
}

// CreateTicketRes - Response from CreateTicket BE API
message CreateTicketRes {
  // Returns the created ticket row in the response
  api.commons.Ticket ticket = 1;
}

// EditTicketReq - Request for EditTicketReq
message EditTicketReq {
  int64 ticket_sid = 1 [jstype = JS_STRING];
  // The comment text
  api.commons.EditAttribute edit_value = 2;
}

// EditTicketRes - Response for EditTicketReq
message EditTicketRes {
  bool is_edited = 1;
}

// ListTicketsReq
message ListTicketsReq {}

message ListTicketsRes {
  repeated api.commons.Ticket tickets = 1;
}

// AssignTicketReq
message AssignTicketReq {
  int64 ticket_sid = 1 [jstype = JS_STRING];
  string assignee_list = 2; // type:json - send 0 or null for un-assigning a ticket
  string assigned_id = 3; // uuid
}

// AssignTicketRes
message AssignTicketRes {
  int64 ticket_sid = 1 [jstype = JS_STRING];
  string assignee_list = 2;
  string assigned_id = 3; // uuid
}

// ViewTicketReq -
message ViewTicketReq {
  int64 ticket_sid = 1 [jstype = JS_STRING];
}

// ViewTicketRes -
message ViewTicketRes {
  api.commons.Ticket ticket = 1; // ticket details
  repeated api.commons.Comment comments = 2; // comments
  repeated api.commons.ReplyComment reply_comment = 3;
}

// Create CommentReq  - Create Comment Request From Client
message CreateCommentReq {
  // ticket Id of the comment to be created.

  int64 ticket_sid = 1 [jstype = JS_STRING];

  // description of the comment
  string comment = 2;
}

// CreateCommenttRes - Response from CreateComment BE API
message CreateCommentRes {
  // Returns the created comment row in the response
  api.commons.Comment comment = 1;
}

// CloseTicketReq - Close Ticket Request Messages
message CloseTicketReq {
  // ticket Id of the ticket which needs to be closed
  int64 ticket_sid = 1 [jstype = JS_STRING];
  // description of the comment
  string comment = 2;
  // from status of the ticket
  int64 from_status = 3 [jstype = JS_STRING];
}

// CloseTicketRes - Close Ticket Response Messages
message CloseTicketRes {
  bool is_status = 1;
}
// EditCommentReq - Edit Comment Request Messages
/*message EditCommentReq {
       // The snowflake id of a comment row in ticket_comment.
       int64 comment_sid = 1 [jstype = JS_STRING];
       // The ticket reference where the comment was added.
       int64 ticket_sid = 2 [jstype = JS_STRING];
       // The comment text
       string comment = 3;
       // commenter by id
       string created_by_id = 4; // used in creating comment
   }*/
// EditCommentRes - Edit Comment Response Messages
/*message EditCommentRes {
       // Returns boolen true OR False in the response
       api.commons.ConfirmEditComment is_edited = 1;
   }*/

// Create CreateSlaReq  - Create Sla Request From Client
message CreateSlaReq {
  // sla_sid of the sla to be created.
  int64 sla_sid = 1 [jstype = JS_STRING];

  // name of the sla
  string name = 2;

  // description of the sla
  string description = 3;

  // sla interval
  int64 interval = 4;
}

// CreateSlaRes - Response from CreateSla BE API
message CreateSlaRes {
  // Returns the created sla row in the response
  api.commons.TicketSla sla = 1;
}

// ListSlaReq -
message ListSlaReq {}

// ListSlaRes -
message ListSlaRes {
  repeated api.commons.TicketSla ticketsSla = 1;
}

// UpdateSlaReq -
message UpdateSlaReq {
  // sla_sid of the sla to be created.
  int64 sla_sid = 1 [jstype = JS_STRING];
  // sla is_active
  int64 is_active = 2;
}

// ListSlaRes -
message UpdateSlaRes {
  api.commons.TicketSla ticketsSla = 1;
}

// ListSlaConditionReq -
message ListSlaConditionReq {}

// ListSlaConditionRes -
message ListSlaConditionRes {
  repeated api.commons.SlaConditions slaCondition = 1;
}

// ReplyCommentReq - Reply Comment Request Messages
message ReplyCommentReq {
  // The snowflake id of a comment row in ticket_comment.
  int64 comment_sid = 1 [jstype = JS_STRING];
  // The ticket reference where the comment was added.
  int64 ticket_sid = 2 [jstype = JS_STRING];
  // The comment text
  string reply = 3;
  // commenter by id
  string created_by_id = 4; // used in creating comment
}

// ReplyCommentRes - Reply Comment Response Messages
message ReplyCommentRes {
  // Returns boolen true OR False in the response
  api.commons.ConfirmReplyComment is_created = 1;
}

// CreateSelfAssignReq -
message CreateSelfAssignReq {
  int64 ticket_sid = 1 [jstype = JS_STRING];
}

// CreateSelfAssignRes -
message CreateSelfAssignRes {
  bool is_assigned = 1;
}
