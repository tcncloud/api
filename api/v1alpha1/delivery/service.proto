syntax = "proto3";

package api.v1alpha1.delivery;

import "annotations/authz.proto";
import "api/commons/delivery.proto";
import "api/commons/omnichannel.proto";
import "api/commons/org.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

service DeliveryApi {
  rpc CreateTransferConfig(CreateTransferConfigReq) returns (CreateTransferConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/createtransferconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc ListTransferConfigs(ListTransferConfigsReq) returns (ListTransferConfigsRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listtransferconfigs";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListTransferConfigsByCredentialID(ListTransferConfigsByCredentialIDReq) returns (ListTransferConfigsByCredentialIDRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listtransferconfigsbycredentialid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc UpdateTransferConfig(UpdateTransferConfigReq) returns (UpdateTransferConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/updatetransferconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc DeleteTransferConfig(DeleteTransferConfigReq) returns (DeleteTransferConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/deletetransferconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc GetTransferConfig(GetTransferConfigReq) returns (GetTransferConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/gettransferconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc GetTransferConfigByName(GetTransferConfigByNameReq) returns (GetTransferConfigByNameRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/gettransferconfigbyname";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListHistory(ListHistoryReq) returns (ListHistoryRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listhistory";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListHistoryByTransferConfig(ListHistoryByTransferConfigReq) returns (ListHistoryByTransferConfigRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listhistorybytransferconfig";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListCredentials(ListCredentialsReq) returns (ListCredentialsRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listcredential";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc GetCredential(GetCredentialReq) returns (GetCredentialRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/getcredential";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc CreateCredential(CreateCredentialReq) returns (CreateCredentialRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/createcredential";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc DeleteCredential(DeleteCredentialReq) returns (DeleteCredentialRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/deletecredential";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc UpdateCredential(UpdateCredentialReq) returns (UpdateCredentialRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/updatecredential";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc CreateDeliveryDefinition(CreateDeliveryDefinitionReq) returns (CreateDeliveryDefinitionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/createdeliverydefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        },
        {
          permissions: [PERMISSION_VOICE_ANALYTICS_FLAG]
        }
      ]
    };
  }
  rpc DeleteDeliveryDefinition(DeleteDeliveryDefinitionReq) returns (DeleteDeliveryDefinitionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/deletedeliverydefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc GetDeliveryDefinition(GetDeliveryDefinitionReq) returns (GetDeliveryDefinitionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/getdeliverydefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc GetDeliveryDefinitionByName(GetDeliveryDefinitionByNameReq) returns (GetDeliveryDefinitionByNameRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/getdeliverydefinitionbyname";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListDeliveryDefinitions(ListDeliveryDefinitionsReq) returns (ListDeliveryDefinitionsRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listdeliverydefinitions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        },
        {
          permissions: [PERMISSION_VOICE_ANALYTICS]
        }
      ]
    };
  }
  rpc ListDeliveryDefinitionsByCredentialID(ListDeliveryDefinitionsByCredentialIDReq) returns (ListDeliveryDefinitionsByCredentialIDRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listdeliverydefinitionsbycredentialid";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc UpdateDeliveryDefinition(UpdateDeliveryDefinitionReq) returns (UpdateDeliveryDefinitionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/updatedeliverydefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc CreateEncryption(CreateEncryptionReq) returns (CreateEncryptionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/createencryption";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc DeleteEncryption(DeleteEncryptionReq) returns (DeleteEncryptionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/deleteencryption";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc GetEncryption(GetEncryptionReq) returns (GetEncryptionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/getencryption";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc ListEncryptions(ListEncryptionsReq) returns (ListEncryptionsRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listencryptions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc UpdateEncryption(UpdateEncryptionReq) returns (UpdateEncryptionRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/updateencryption";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
  rpc ListSMSNumbers(ListSMSNumbersReq) returns (ListSMSNumbersRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/listsmsnumbers";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_VIEW]
        }
      ]
    };
  }
  rpc SendTestEmail(SendTestEmailReq) returns (SendTestEmailRes) {
    option (google.api.http).post = "/api/v1alpha1/delivery/sendtestemail";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_DELIVERY_NOTIFICATIONS_EDIT]
        }
      ]
    };
  }
}

message SendTestEmailReq {}

message SendTestEmailRes {}

message CreateTransferConfigReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message CreateTransferConfigRes {
  ID entity = 1;
}
message ListTransferConfigsReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
  ListReq list_req = 3;
}
message ListTransferConfigsRes {
  repeated TransferConfig entities = 1;
}
message ListTransferConfigsByCredentialIDReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
  ID credential_sid = 3;
  ListReq list_req = 4;
}
message ListTransferConfigsByCredentialIDRes {
  repeated TransferConfig entities = 1;
}
message UpdateTransferConfigReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpdateTransferConfigRes {
  ID entity = 1;
}
message DeleteTransferConfigReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message DeleteTransferConfigRes {}
message GetTransferConfigReq {
  TransferConfig entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetTransferConfigRes {
  TransferConfig entity = 1;
}
message GetTransferConfigByNameReq {
  string name = 1 [deprecated = true]; // obsolete dont use
  google.protobuf.FieldMask mask = 2;
  TransferConfig entity = 3;
}
message GetTransferConfigByNameRes {
  TransferConfig entity = 1;
}
message ListHistoryReq {
  History entity = 1;
  google.protobuf.FieldMask mask = 2;
  ListReq list_req = 3;
}
message ListHistoryRes {
  repeated History entities = 1;
}
message ListHistoryByTransferConfigReq {
  ListByIDReq entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message ListHistoryByTransferConfigRes {
  repeated History entities = 1;
}
message CreateHistoryReq {
  History entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message CreateHistoryRes {
  ID entity = 1;
}
message GetHistoryReq {
  ID entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetHistoryRes {
  History entity = 1;
}
message CreateDeliveryDefinitionReq {
  DeliveryDefinition definition = 1;
}
message CreateDeliveryDefinitionRes {
  ID entity = 1;
}
message DeleteDeliveryDefinitionReq {
  ID entity = 1;
}
message DeleteDeliveryDefinitionRes {}
message GetDeliveryDefinitionReq {
  DeliveryDefinition entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetDeliveryDefinitionRes {
  DeliveryDefinition entity = 1;
}
message GetDeliveryDefinitionByNameReq {
  string name = 1 [deprecated = true]; // obsolete dont use
  google.protobuf.FieldMask mask = 2;
  DeliveryDefinition entity = 3;
}
message GetDeliveryDefinitionByNameRes {
  DeliveryDefinition entity = 1;
}
message ListDeliveryDefinitionsReq {
  DeliveryDefinition entity = 1;
  google.protobuf.FieldMask mask = 2;
  ListReq list_req = 3;
}
message ListDeliveryDefinitionsRes {
  repeated DeliveryDefinition entities = 1;
}
message ListDeliveryDefinitionsByCredentialIDReq {
  DeliveryDefinition entity = 1;
  google.protobuf.FieldMask mask = 2;
  ID credential_sid = 3;
  ListReq list_req = 4;
}
message ListDeliveryDefinitionsByCredentialIDRes {
  repeated DeliveryDefinition entities = 1;
}
message UpdateDeliveryDefinitionReq {
  DeliveryDefinition entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpdateDeliveryDefinitionRes {
  ID entity = 1;
}
message CreateEncryptionReq {
  Encryption encryption = 1;
}
message CreateEncryptionRes {
  ID entity = 1;
}
message DeleteEncryptionReq {
  ID entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message DeleteEncryptionRes {}
message GetEncryptionReq {
  Encryption entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetEncryptionRes {
  Encryption entity = 1;
}
message ListEncryptionsReq {
  ListReq entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message ListEncryptionsRes {
  repeated Encryption entities = 1;
}
message UpdateEncryptionReq {
  Encryption entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpdateEncryptionRes {
  ID entity = 1;
}

//entity types
message TransferConfig {
  // snowflake id
  int64 sid = 1 [jstype = JS_STRING];
  // the name of this config. Must be unique within the org
  string name = 3;
  string description = 4;
  // optional nofitifications to send out when this config is being used
  // TODO:
  // bool transfer_start_notification = 5;
  // bool transfer_end_notification = 6;

  // how many hours the files should live in cloud storage for
  // must always be > 0
  int32 ttl = 7;

  Credential credential = 8; // credential_sid stored on table
  // where we will put the payload if we are triggering a delivery
  Destination destination = 9; // stored as jsonb
  // where we will get the payload if we are triggering a retrieval
  Source source = 10; // stored as jsonb
  // when the config was last created/edited
  google.protobuf.Timestamp created_on = 11;
  google.protobuf.Timestamp last_edited = 12;
}

message ID {
  int64 sid = 1 [jstype = JS_STRING];
}
message ListReq {
  // start listing records less than this sid
  int64 before_sid = 2;
  // max records to retrieve
  int64 limit = 3;
}

message History {
  int64 sid = 1 [jstype = JS_STRING];
  string transfer_config_name = 3;
  int64 transfer_config_sid = 4 [jstype = JS_STRING];
  // delivery or retrieval
  string delivery_type = 5;
  string error = 6;
  bool success = 7;
  // when the transaction was first opened
  google.protobuf.Timestamp created_on = 8;
  // when upload of deps is finished and we started moving the files
  google.protobuf.Timestamp transfer_start = 9;
  // when the record was inserted into the db (delivery ended)
  google.protobuf.Timestamp transfer_complete = 10;
  // the application calling for delivery
  api.commons.OperatorApplications origin = 11;
  string org_id = 12;
  // this should only be the first 64 chars of the message_payload
  string message_payload = 13;
  // this represents the full actual length of the message_payload from the frontend
  int32 message_payload_len = 14;
  // the status of the delivery
  api.commons.TransferStatus status = 15;
  bool is_inbound = 16;
  int64 transaction_sid = 17 [jstype = JS_STRING];
}

message ListByIDReq {
  // start listing records less than this sid
  int64 before_sid = 2;
  // max records to retrieve
  int64 limit = 3;
  // the sid that is in the where clause
  int64 other_sid = 4;
}

message Credential {
  int64 sid = 1 [jstype = JS_STRING];
  string name = 3;
  string description = 4;

  CredentialData data = 5; // stored as jsonb

  google.protobuf.Timestamp created_on = 10;
  google.protobuf.Timestamp last_edited = 11;
}
message Destination {
  api.commons.Encryption encryption = 1;
  oneof value {
    EmailDestination email = 2;
    Room303Destination room303 = 3;
    SmsDestination sms = 4;
    SftpDestination sftp = 5;
  }
}

message SftpDestination {
  // path that will be joined with the filename specified on the attachment.
  // this is optional.  If not provided the attachments must include the full filepath
  string base_directory = 2;
  string address = 3;
  int32 port = 4;
}

message Room303Destination {
  // which room or user to sned the file to
  string room = 1;
  // will lookup user_sid through org if not provided
  // username of the intended user
  string username = 2;
  // user_id of the intended user
  string user_id = 3;
}
message SmsDestination {
  // must include country code and area code
  string destination_phone = 1;
  // the phone number we want this message to come from
  string source_phone = 2;
}

message EmailDestination {
  // which email we are sending to
  string to_addr = 1 [deprecated = true];
  // additional emails we are sending to
  repeated string cc_addrs = 2;
  // which email we want to show up as as from
  string from_addr = 3;
  repeated string to_addrs = 4;
}

message CredentialData {
  oneof data {
    UserPassword user_password = 1;
    Password password = 2;
    SSHKeyPair ssh_key_pair = 3;
    PGPKeyPair pgp_key_pair = 4;
    AESPassword aes_password = 5;
  }
}

message UserPassword {
  string username = 1;
  string password = 2;
}
message Password {
  string password = 1;
}
message SSHKeyPair {
  string public_key = 1;
  string private_key = 2;
}
message PGPKeyPair {
  string public_key = 1;
  string private_key = 2;
}
message AESPassword {
  string password = 1;
}

message Source {
  api.commons.Encryption encryption = 1;
  oneof value {
    SftpSource sftp = 2;
  }
}

message SftpSource {
  // directory files should be in
  string directory = 2;
}
message GetCredentialReq {
  Credential entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message GetCredentialRes {
  Credential credential = 1;
}
message ListCredentialsReq {
  ListReq entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message ListCredentialsRes {
  Credentials credentials = 1;
}
message CreateCredentialReq {
  Credential entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message CreateCredentialRes {
  ID entity = 1;
}
message DeleteCredentialReq {
  ID entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message DeleteCredentialRes {}
message UpdateCredentialReq {
  Credential entity = 1;
  google.protobuf.FieldMask mask = 2;
}
message UpdateCredentialRes {
  ID entity = 1;
}
message Credentials {
  repeated Credential entities = 1;
}

// replaces TransferConfig
message DeliveryDefinition {
  int64 delivery_definition_sid = 1 [jstype = JS_STRING];
  string org_id = 2;
  // the name of the definition. Must be unique within the org
  string name = 3;
  string description = 4;
  // optional nofitifications to send out when this config is being used
  // TODO:
  // bool transfer_start_notification = 5;
  // bool transfer_end_notification = 6;

  // how many hours the files should live in cloud storage for
  // must always be > 0
  int32 ttl = 8;

  oneof transport {
    SFTPTransport sftp = 9;
    EmailTransport email = 10;
    Room303Transport room303 = 11;
    SMSTransport sms = 12;
  }
  oneof encryption {
    AESEncryptionRef aes = 13;
    PGPEncryptionRef pgp = 14;
  }

  google.protobuf.Timestamp created_on = 15;
  google.protobuf.Timestamp last_edited = 16;
}

message SFTPTransport {
  string host = 1;
  int32 port = 2 [deprecated = true];
  oneof credentials {
    PasswordRef password = 3;
    SSHKeyRef ssh_key = 4;
  }
  string username = 5;
  string base_dir = 6;
}
message EmailTransport {
  // which email we want to show up as as from
  string from_address = 1 [deprecated = true];
  // which email we are sending to
  string to_address = 2 [deprecated = true];
  // additional emails we are sending to
  repeated string cc_addresses = 3;
  repeated string to_addresses = 4;
}
message Room303Transport {
  oneof transport {
    // this way we can use different types of room303 deliveries
    // in the future, support different api calls,
    // maybe support multiple groups etc
    Room303SystemMessage system_message = 1 [deprecated = true];
    Room303SystemMessages system_messages = 2;
  }
}
message Room303SystemMessage {
  // which room or user to sned the file to
  string room = 1;
  oneof user {
    // will lookup user_sid through org if not provided
    // username of the intended user
    string username = 2;
    // user_id of the intended user
    string user_id = 3;
  }
}
message Room303SystemMessages {
  repeated Room303SystemMessage system_messages = 1;
}
message SMSTransport {
  // must include country code and area code
  string destination_phone = 1;
  // the phone number we want this message to come from
  string source_phone = 2;
}

message AESEncryptionRef {
  int64 aes_sid = 1 [jstype = JS_STRING];
}
message PGPEncryptionRef {
  int64 pgp_sid = 1 [jstype = JS_STRING];
}
message PasswordRef {
  int64 password_sid = 1 [jstype = JS_STRING];
}
message SSHKeyRef {
  int64 ssh_key_sid = 1 [jstype = JS_STRING];
}

message Encryption {
  int64 encryption_sid = 1;
  string org_id = 2;
  string name = 3;
  string description = 4;

  oneof encryption { // stored as jsonb
    PGPKeyPair pgp_key_pair = 5;
    AESPassword aes_password = 6;
  }

  google.protobuf.Timestamp created_on = 10;
  google.protobuf.Timestamp last_edited = 11;
}

message ListSMSNumbersReq {}
message ListSMSNumbersRes {
  repeated commons.SmsNumber sms_numbers = 1;
}
