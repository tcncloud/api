syntax = "proto3";

package api.v1alpha1.org;

import "api/commons/org.proto";
import "api/commons/org/labels.proto";
import "api/commons/org/permissions.proto";
import "api/commons/org/trusts.proto";
import "api/commons/org/user.proto";
import "api/commons/org_preferences.proto";
import "api/commons/perms.proto";
import "api/commons/user.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// Request message for the CreateUser rpc.
message CreateUserRequest {
  // if org_id is set the user will be created for
  // the given org_id. This requires the CUSTOMER_SUPPORT permission.
  // if this field is not set it will get the org_id
  // from the token. This only requires the USER_CREATE permission.
  string org_id = 1;
  // The first name for the new user.
  string first_name = 2;
  // The last name for the new user.
  string last_name = 3;
  // The email for the new user.
  string email = 4;
  // The user name of the new user.
  string user_name = 5;
  // The password of the new user.
  string password = 6;
  // The ids of the permission groups that the new user will have.
  repeated string permission_group_ids = 7;
  // The partner agent id of the new user.
  string partner_agent_id = 9;
  // The id of the p3 permission group that the new user will have.
  string p3_permission_group_id = 10;
  // The linkback numbers the new user will have.
  repeated string linkback_numbers = 11;
  // The caller ids the new user will have.
  repeated string caller_ids = 12;
  // Default app the user starts on
  api.commons.OperatorApplications default_app = 13;
  // The caller id for the user.
  string user_caller_id = 14;
  // The id of the agent profile group the user will belong to.
  string agent_profile_group_id = 15;
  // A list of labels to assign to the user
  repeated string label_ids = 16;
  // User TimeZone with wrapper for nullable timezone
  api.commons.TimeZoneWrapper time_zone_override = 17;
  // The hunt group that the created user will belong to.
  int64 hunt_group_sid = 18;
}

// Response message for the CreateUser rpc.
message CreateUserResponse {
  // The id of the created user.
  string user_id = 1;
}

// Request message for the CreateDelegatedUser rpc.
message CreateDelegatedUserRequest {
  // the user id provided by the auth (idp) connection.
  string auth_user_id = 1;
  // org_id for which the user will be created for.
  // generally when org_id is passed, it requires
  // customer support permission, but this is an
  // un-authenticated request so it is an exception
  // which is handled by envoy.
  string org_id = 2;
  // the user's email provided by the auth connection.
  string email = 3;
  // the username provided by the auth connection.
  string username = 4;
  // the user's first name.
  string first_name = 5;
  // the user's last name.
  string last_name = 6;
  // the user's groups provided by the auth connection.
  repeated string groups = 7;
  // the id of the auth connection the user is coming from.
  string connection_id = 8;
}

// Response message for the CreateDelegatedUser rpc.
message CreateDelegatedUserResponse {
  // The id of the created user.
  string user_id = 1;
}

// Request message for GetMyUser.
message GetMyUserRequest {}

// Response message for GetMyUser.
message GetMyUserResponse {
  // Object to contain the hunt group fields
  message HuntGroup {
    // The sid of the hunt group the agent is assigned to
    int64 hunt_group_sid = 1;
    // The name of the hunt group the agent is assigned to
    string hunt_group_name = 2;
  }

  // Object to contain the agent profile group fields
  message AgentProfileGroup {
    // The id of the user's agent profile group
    string agent_profile_group_id = 1;
    // The name of the user's agent profile group
    string agent_profile_group_name = 2;
  }

  // The user ID of the user
  string user_id = 1;
  // The ID of the user's organization
  string org_id = 2;
  // The agents's username
  string username = 13;
  // Whether the user is delegated (sso related)
  bool delegated = 3;
  // The name of the user's organization
  string org_name = 4;
  // An object with the hunt group fields required for the call
  HuntGroup hunt_group = 5;
  // A list of the labels associated with the user
  repeated api.commons.org.Label labels = 6;
  // A list of the skills associated with the user
  repeated api.commons.org.Skill skills = 7;
  // A list of the permission groups the user belongs to
  repeated api.commons.org.PermissionGroup permission_groups = 8;
  // The user's p3 permission group
  api.commons.org.P3PermissionGroup p3_permission_group = 9;
  // An object with the agent profile group fields required for the call
  AgentProfileGroup agent_profile_group = 10;
  // A list of the trusts assigned to the user.
  repeated api.commons.org.Trust trusts = 11;
  // Whether the user is an account owner
  bool account_owner = 12;
  // if the user email is verified
  bool email_verified = 14;
}

// Request message for GetUser.
message GetUserRequest {
  // Get by UserId.
  string user_id = 1;
}

// Response message for GetUser.
message GetUserResponse {
  // Object to contain the hunt group fields
  message HuntGroup {
    // The sid of the hunt group the agent is assigned to
    int64 hunt_group_sid = 1;
    // The name of the hunt group the agent is assigned to
    string hunt_group_name = 2;
  }

  // Object to contain the agent profile group fields
  message AgentProfileGroup {
    // The id of the user's agent profile group
    string agent_profile_group_id = 1;
    // The name of the user's agent profile group
    string agent_profile_group_name = 2;
  }

  // The user ID of the user
  string user_id = 1;
  // The ID of the user's organization
  string org_id = 2;
  // Whether the user is delegated (sso related)
  bool delegated = 3;
  // The name of the user's organization

  // User TimeZone with wrapper for nullable timezone.
  api.commons.TimeZoneWrapper time_zone_override = 4;
  // An object with the hunt group fields required for the call
  HuntGroup hunt_group = 5;
  // A list of the labels associated with the user
  repeated api.commons.org.Label labels = 6;
  // A list of the skills associated with the user
  repeated api.commons.org.Skill skills = 7;
  // A list of the permission groups the user belongs to
  repeated api.commons.org.PermissionGroup permission_groups = 8;
  // The user's p3 permission group
  api.commons.org.P3PermissionGroup p3_permission_group = 9;
  // An object with the agent profile group fields required for the call
  AgentProfileGroup agent_profile_group = 10;
  // name of users organization
  string org_name = 11;
  // users first name
  string first_name = 12;
  // The agents's username
  string username = 13;
  // users last name
  string last_name = 14;
  // if the user is disabled from logging in
  bool login_disabled = 15;
  // users partner agent sid
  string partner_agent_id = 16;
  // users caller id
  string user_caller_id = 17;
  // a users array of linkback numbers
  repeated string linkback_numbers = 18;
  // a users array of caller ids
  repeated string caller_ids = 19;
  // default application that is selected when signed in
  api.commons.OperatorApplications default_app = 20;
  // Login Sid of the user
  int64 login_sid = 21;
  // Agent Sid
  int64 agent_sid = 22;
  // A list of trusts the user has been assigned.
  repeated api.commons.org.Trust trusts = 23;
  // user's email
  string email = 24;
  // user's default region
  string default_region = 25;
  // user's created date
  google.protobuf.Timestamp created_at = 26;
  // user's last updated date
  google.protobuf.Timestamp last_updated = 27;
  // user's password reset required
  bool password_reset_required = 28;
  // Whether the user is an account owner
  bool account_owner = 29;
  // if the user's email is verified
  bool email_verified = 30;
}

// Request message for GetUserByOrgId.
message GetUserByOrgIdRequest {
  // Get by UserId.
  string user_id = 1;
  // OrgId of the user being requested.
  string org_id = 2;
}

// Response message for GetUserByOrgId.
message GetUserByOrgIdResponse {
  // Object to contain the hunt group fields
  message HuntGroup {
    // The sid of the hunt group the agent is assigned to
    int64 hunt_group_sid = 1;
    // The name of the hunt group the agent is assigned to
    string hunt_group_name = 2;
  }

  // Object to contain the agent profile group fields
  message AgentProfileGroup {
    // The id of the user's agent profile group
    string agent_profile_group_id = 1;
    // The name of the user's agent profile group
    string agent_profile_group_name = 2;
  }

  // The user ID of the user
  string user_id = 1;
  // The ID of the user's organization
  string org_id = 2;
  // The agents's username
  string username = 13;
  // Whether the user is delegated (sso related)
  bool delegated = 3;
  // The name of the user's organization
  string org_name = 4;
  // An object with the hunt group fields required for the call
  HuntGroup hunt_group = 5;
  // A list of the labels associated with the user
  repeated api.commons.org.Label labels = 6;
  // A list of the skills associated with the user
  repeated api.commons.org.Skill skills = 7;
  // A list of the permission groups the user belongs to
  repeated api.commons.org.PermissionGroup permission_groups = 8;
  // The user's p3 permission group
  api.commons.org.P3PermissionGroup p3_permission_group = 9;
  // An object with the agent profile group fields required for the call
  AgentProfileGroup agent_profile_group = 10;
  // A list of trusts the user has been assigned.
  repeated api.commons.org.Trust trusts = 21;
  // Whether the user is an account owner
  bool account_owner = 22;
  // if the user's email is verified
  bool email_verified = 23;
}

// Request message for listAgents rpc.
message ListAgentsRequest {}

// Response message for listAgents rpc.
message ListAgentsResponse {
  // Object for ListAgents to return a list of.
  message AgentDetails {
    // Object to contain the hunt group fields
    message HuntGroup {
      // The sid of the hunt group the agent is assigned to
      int64 hunt_group_sid = 1;
      // The name of the hunt group the agent is assigned to
      string hunt_group_name = 2;
    }

    // Object to contain the agent profile group fields
    message AgentProfileGroup {
      // The id of the user's agent profile group
      string agent_profile_group_id = 1;
      // The name of the user's agent profile group
      string agent_profile_group_name = 2;
    }

    // The user ID of the agent
    string user_id = 1;
    // The ID of the agent's organization
    string org_id = 2;
    // The agent's first name
    string first_name = 3;
    // The agent's last name
    string last_name = 4;
    // The agents's username
    string username = 5;
    // A list of the skills associated with the agent
    repeated api.commons.org.Skill skills = 6;
    // Whether or not the agent is disabled.
    bool login_disabled = 7;
    // An object with the hunt group fields required for the call
    HuntGroup hunt_group = 8;
    // A list of the labels associated with the agent
    repeated api.commons.org.Label labels = 9;
    // Whether the agent is delegated (sso related)
    bool delegated = 10;
    // A list of the trust ids the user has been assigned.
    repeated string trust_ids = 11;
    // A list of the (neo)permission groups the user belongs to
    repeated api.commons.org.PermissionGroup permission_groups = 12;
    // The agent's agent sid
    int64 agent_sid = 13;
    // The agent's full name
    string name = 14;
    // The User's partner agent id.
    string partner_agent_id = 15;
    // User caller id
    string user_caller_id = 16;
    // The date/time the user was created.
    google.protobuf.Timestamp created = 17;
    // The date/time the user was last updated.
    google.protobuf.Timestamp last_updated = 18;
    // An object with the agent profile group fields required for the call
    AgentProfileGroup agent_profile_group = 19;
    // a bool signalling whether or not the user is also an agent
    bool agent = 20;
    // User TimeZone with wrapper for nullable timezone
    api.commons.TimeZoneWrapper time_zone_override = 21;
    // The email of the agent. Empty if none set.
    string email = 22;
    // Whether or not the agent's email is verified.
    bool email_verified = 23;
    // The agent's mfa information.
    api.commons.org.MfaInfo mfa_info = 24;
  }

  // List of returned agents with masked data.
  repeated AgentDetails agents = 1;
}

// Request message for ListPublicUsers rpc.
message ListPublicUsersRequest {
  // Return a list of only user agents. When this is false all users are returned.
  bool agent_filter = 1;
  // Filter by the user's archived status.
  api.commons.UserArchivedStateFilter archived_filter = 2;
}

// Response message for ListPublicUsers rpc.
message ListPublicUsersResponse {
  // The user ID of the user
  string user_id = 1 [deprecated = true];
  // The user's first name
  string first_name = 2 [deprecated = true];
  // The user's last name
  string last_name = 3 [deprecated = true];
  // The user's username
  string username = 4 [deprecated = true];

  message User {
    // The user ID of the user
    string user_id = 1;
    // The user's first name
    string first_name = 2;
    // The user's last name
    string last_name = 3;
    // The user's username
    string username = 4;
  }

  repeated User users = 5;
}

// Request message for listUsers rpc.
message ListUsersRequest {}

// Response message for listUsers rpc.
message ListUsersResponse {
  // Object for ListUsers to return a list of.
  message UserDetails {
    // The user ID of the user
    string user_id = 1;
    // The ID of the user's organization
    string org_id = 2;
    // The user's first name
    string first_name = 3;
    // The user's last name
    string last_name = 4;
    // The user's username
    string username = 5;
    // Whether or not the user is disabled.
    bool login_disabled = 7;
    // A list of the (neo)permission group Ids the agent belongs to
    repeated string permission_group_ids = 9;
    // A list of the labels associated with the user
    repeated api.commons.org.Label labels = 10;
    // Whether the user is an account owner
    bool account_owner = 11;
    // Whether the user is also an agent
    bool agent = 12;
    // A list of the trust ids the user has been assigned.
    repeated string trust_ids = 13;
    // MfaInfo of the user.
    api.commons.org.MfaInfo mfa_info = 14;
    // Whether or not the users email is verified.
    bool email_verified = 15;
  }

  // List of returned users with masked data.
  repeated UserDetails users = 1;
}

// Request message for the ListUsersByOrgId rpc.
message ListUsersByOrgIdRequest {
  // Filter by org ID.
  string org_id = 1;
  // Filter by the user's archived status.
  api.commons.UserArchivedStateFilter archived_filter = 2;
}

// Response message for the ListsUsersByOrgId rpc.
message ListUsersByOrgIdResponse {
  // Object for ListUsersByOrgId to return a list of.
  message UserDetails {
    // The user ID of the user
    string user_id = 1;
    // The ID of the user's organization
    string org_id = 2;
    // The name of the user's organization
    string org_name = 3;
    // The user's first name
    string first_name = 4;
    // The user's last name
    string last_name = 5;
    // The user's username
    string username = 6;
    // Whether or not the user is disabled.
    bool login_disabled = 7;
    // A list of the (neo)permission group Ids the agent belongs to
    repeated string permission_group_ids = 8;
    // A list of the labels associated with the user
    repeated api.commons.org.Label labels = 9;
    // Whether the user is an account owner
    bool account_owner = 10;
    // Whether the user is also an agent
    bool agent = 11;
    // A list of the trust ids the user has been assigned.
    repeated string trust_ids = 12;
    // MfaInfo of the user.
    api.commons.org.MfaInfo mfa_info = 14;
    // Whether or not the users email is verified.
    bool email_verified = 15;
  }

  // List of returned users with masked data.
  repeated UserDetails users = 1;
}

// Request message for the ListUsersByRegion rpc.
message ListUsersByRegionRequest {
  // Filter by region.
  string region_id = 1;
  // Return a list of only user agents (users whose default app is agent). When this is false all users are returned.
  bool agent = 2;
  // Filter by the user's archived status.
  api.commons.UserArchivedStateFilter archived_filter = 3;
}

// Response message for the ListsUserByRegion rpc.
message ListUsersByRegionResponse {
  // Object for ListUsersByRegion to return a list of.
  message UserDetails {
    // The user ID of the user
    string user_id = 1;
    // The ID of the user's organization
    string org_id = 2;
    // The user's first name
    string first_name = 3;
    // The user's last name
    string last_name = 4;
    // The user's username
    string username = 5;
    // Whether or not the user is disabled.
    bool login_disabled = 7;
    // A list of the (neo)permission group Ids the agent belongs to
    repeated string permission_group_ids = 9;
    // A list of the labels associated with the user
    repeated api.commons.org.Label labels = 10;
    // Whether the user is an account owner
    bool account_owner = 11;
    // Whether the user is also an agent
    bool agent = 12;
    // A list of the trust ids the user has been assigned.
    repeated string trust_ids = 13;
    // MfaInfo of the user.
    api.commons.org.MfaInfo mfa_info = 14;
    // Whether or not the users email is verified.
    bool email_verified = 15;
  }

  // List of returned users with masked data.
  repeated UserDetails users = 1;
}

// Request message for the UpdateMyUser rpc.
message UpdateMyUserRequest {
  // The linkback numbers the updated user will have.
  repeated string linkback_numbers = 1;
  // The caller ids the updated user will have.
  repeated string caller_ids = 2;
  // User TimeZone with wrapper for nullable timezone.
  api.commons.TimeZoneWrapper time_zone_override = 3;
  // Default app the user starts on
  api.commons.OperatorApplications default_app = 4;
  // Mask to filter fields on organization entities in response.
  repeated string field_mask = 10;
}

// Response message for the UpdateMyUser rpc.
message UpdateMyUserResponse {}

// Request message for the UpdateUser rpc.
message UpdateUserRequest {
  // The user id of the user to be updated
  string user_id = 1;
  // The first name the updated user will have.
  string first_name = 2;
  // The last name the updated user will have.
  string last_name = 3;
  // The partner agent id the updated user will have.
  string partner_agent_id = 4;
  // User TimeZone with wrapper for nullable timezone.
  api.commons.TimeZoneWrapper time_zone_override = 5;
  // The linkback numbers the updated user will have.
  repeated string linkback_numbers = 6;
  // The caller ids the updated user will have.
  repeated string caller_ids = 7;
  // Default app the user starts on
  api.commons.OperatorApplications default_app = 8;
  // Whether the updated user will require a password reset.
  bool password_reset_required = 9;
  // The agent profile group id the updated user will have.
  string agent_profile_group_id = 10;
  // The username the updated user will have.
  string username = 11;
  // The email the updated user will have.
  string email = 12;
  // The Agent Caller Id of the user
  string user_caller_id = 13;
  // A list of labels to assign to the user
  repeated string label_ids = 14;

  // Mask to filter fields on organization entities in response.
  repeated string field_mask = 20;
}

// Response message for the UpdateUser rpc.
message UpdateUserResponse {}

// Request message for the UpdateUserLabels rpc.
message UpdateUserLabelsRequest {
  // The ID of the user whose labels will be updated.
  string user_id = 1;
  // The organization ID of the user
  string org_id = 2;
  // Labels to update user to
  repeated string label_ids = 3;
}

// Response message for the UpdateUserLabels rpc.
message UpdateUserLabelsResponse {}

// Request message for the UpdateUserCallerId rpc.
message UpdateUserCallerIdRequest {
  // The user id of the user to be updated
  string user_id = 1;
  // The caller id for the updated user
  string user_caller_id = 2;
}

// Response message for the UpdateUserCallerId rpc.
message UpdateUserCallerIdResponse {}

// Request message for the UpdateUserDisabled rpc.
message UpdateUserDisabledRequest {
  // The user id of the user to be updated
  string user_id = 1;
  // Whether the user is able to login
  bool login_disabled = 2;
}

// Response message for the UpdateUserDisabled rpc.
message UpdateUserDisabledResponse {}

// Request message for the UpdateUserDisabledByOrgId rpc.
message UpdateUserDisabledByOrgIdRequest {
  // The user id of the user to be updated
  string user_id = 1;
  // The organization id of the user to be updated
  string org_id = 2;
  // Whether the user is able to login
  bool login_disabled = 3;
}

// Response message for the UpdateUserDisabledByOrgId rpc.
message UpdateUserDisabledByOrgIdResponse {}

// Request message for the GetMyUserPasswordResetLink rpc.
message GetMyUserPasswordResetLinkRequest {
  // The time to live (in seconds) of the generated link, defaults to 180 if unset.
  int64 ttl = 1;
}

// Response message for the GetMyUserPasswordResetLink rpc.
message GetMyUserPasswordResetLinkResponse {
  // The generated password reset link URL.
  string url = 1;
}

// Request message for the GetUserPasswordResetLink rpc.
message GetUserPasswordResetLinkRequest {
  // The ID of the user whose password will be updated.
  string user_id = 1;
  // The time to live (in seconds) of the generated link, defaults to 180 if unset.
  int64 ttl = 2;
}

// Response message for the GetUserPasswordResetLink rpc.
message GetUserPasswordResetLinkResponse {
  // The generated password reset link URL.
  string url = 1;
}

// Request message for the GetUserPasswordResetLinkByOrgId rpc.
message GetUserPasswordResetLinkByOrgIdRequest {
  // The ID of the user whose password will be updated.
  string user_id = 1;
  // The organization ID of the user
  string org_id = 2;
  // The time to live (in seconds) of the generated link, defaults to 180 if unset.
  int64 ttl = 3;
}

// Response message for the GetUserPasswordResetLinkByOrgId rpc.
message GetUserPasswordResetLinkByOrgIdResponse {
  // The generated password reset link URL.
  string url = 1;
}

// Request message for the CreatePasswordResetLink rpc.
message CreatePasswordResetLinkRequest {
  string user_id = 1;
  // DEPRECATED: no longer used.
  google.protobuf.Timestamp expiration = 2;
}

// Response message for the CreatePasswordResetLink rpc.
message CreatePasswordResetLinkResponse {
  string url = 1;
}

// Request message for the CreatePasswordResetLinkByOrgId rpc.
message CreatePasswordResetLinkByOrgIdRequest {
  // The ID of the user.
  string user_id = 1;
  // The organization ID of the user
  string org_id = 2;
}

// Response message for the CreatePasswordResetLinkByOrgId rpc.
message CreatePasswordResetLinkByOrgIdResponse {
  string url = 1;
}

// This rpc used to be called GetUserBlocked
// Request message for the GetUserLoginInfo rpc.
message GetUserLoginInfoRequest {
  // The ID of the user.
  string user_id = 1;
  // The organization ID of the user
  string org_id = 2;
}

// Response message for the GetUserLoginInfo rpc.
message GetUserLoginInfoResponse {
  // Whether the user is manually blocked in auth0
  bool blocked = 1;
  // The last IP the user used to login
  string last_ip = 2;
  // The time of the user's latest login
  google.protobuf.Timestamp last_login = 3;
  // The time of the user's latest password reset
  google.protobuf.Timestamp last_password_reset = 4;
  // The number of times the user has logged in
  int64 logins_count = 5;
  // The time the user was created in auth0
  google.protobuf.Timestamp created_at = 6;
  // The last time the user was updated in auth0
  google.protobuf.Timestamp updated_at = 7;
  // Whether the user has specific IPs which are blocked
  bool has_blocked_ips = 8;
}

// Request message for the SendPasswordReset rpc.
message SendPasswordResetRequest {
  // The email address to send the password reset lnk to.
  string email = 1;
}

// Response message for the SendPasswordReset rpc.
message SendPasswordResetResponse {}

// Request message for the SendPasswordResetByOrgId rpc.
message SendPasswordResetByOrgIdRequest {
  // The organization ID of the user to be emailed.
  string org_id = 1;
  // The email address to send the password reset lnk to.
  string email = 2;
}

// Response message for the SendPasswordResetByOrgId rpc.
message SendPasswordResetByOrgIdResponse {}

// Request message for the ResetMyPassword rpc.
message ResetMyPasswordRequest {
  // The new password to use for my user.
  string password = 1;
}

// Response message for the ResetMyPassword rpc.
message ResetMyPasswordResponse {}

// Request message for the ResetUserPassword rpc.
message ResetUserPasswordRequest {
  // The new password to use for the specified user.
  string password = 1;
  // The ID of the user password to be changed.
  string user_id = 2;
}

// Response message for the ResetUserPassword rpc.
message ResetUserPasswordResponse {}

// Request message for the ResetUserPasswordByOrgId rpc.
message ResetUserPasswordByOrgIdRequest {
  // The new password to use for the specified user.
  string password = 1;
  // The ID of the user password to be changed.
  string user_id = 2;
  // The organization ID of the user password to be changed.
  string org_id = 3;
}

// Response message for the ResetUserPasswordByOrgId rpc.
message ResetUserPasswordByOrgIdResponse {}

// Request message for the GetUserEmailVerified rpc.
message GetUserEmailVerifiedRequest {
  // The ID of the user to be checked.
  string user_id = 1;
}

// Response message for the GetUserEmailVerified rpc.
message GetUserEmailVerifiedResponse {
  // Whether the user's email is verified
  bool email_verified = 1;
}

// Request message for the GetUserEmailVerifiedByOrgId rpc.
message GetUserEmailVerifiedByOrgIdRequest {
  // The ID of the user to be checked.
  string user_id = 1;
  // The organization ID of the user.
  string org_id = 2;
}

// Response message for the GetUserEmailVerifiedByOrgId rpc.
message GetUserEmailVerifiedByOrgIdResponse {
  // Whether the user's email is verified
  bool email_verified = 1;
}

// Request message for the SendUserEmailVerification rpc.
message SendUserEmailVerificationRequest {
  // The ID of the user to be verified.
  string user_id = 1;
}

// Response message for the SendUserEmailVerification rpc.
message SendUserEmailVerificationResponse {}

// Request message for the SendUserEmailVerificationByOrgId rpc.
message SendUserEmailVerificationByOrgIdRequest {
  // The ID of the user to be verified.
  string user_id = 1;
  // The organization ID of the user.
  string org_id = 2;
}

// Response message for the SendUserEmailVerificationByOrgId rpc.
message SendUserEmailVerificationByOrgIdResponse {}

// Request message for the GetUserSessionData rpc.
message GetUserSessionDataRequest {}

// Response message for the GetUserSessionData rpc.
message GetUserSessionDataResponse {
  message User {
    // The ID of the user
    string user_id = 1;
    // The ID of the org the user belongs to.
    string org_id = 2;
    // The Username of the user.
    string username = 3;
    // The ID of the p3 permission group the user has.
    string p3_permission_group_id = 4;
    // The User's partner agent id.
    string partner_agent_id = 8;

    // The entity object used in the region_sid_map.
    message RegionSids {
      // The login sid for the region.
      int64 login_sid = 1;
      // THe agent sid for the region.
      int64 agent_sid = 2;
      // THe client sid for the region.
      int64 client_sid = 3;
    }
    // The user's regional sids. The key of the map is a region id.
    map<string, RegionSids> region_sid_map = 10;
    // region_id of a the user's default region
    string default_region = 11;

    // payload
    string api_key = 12;
    // The User's email.
    string email = 13;

    // Whether or not the user is disabled.
    bool login_disabled = 14;

    // login preferences
    repeated string caller_ids = 15;
    repeated string linkback_numbers = 16;

    string auth_user_id = 17;

    reserved "enable_mfa";
    reserved 18;

    // The user's first name.
    string first_name = 19;
    // The user's last name.
    string last_name = 20;
    // The date/time the user was created.
    google.protobuf.Timestamp created = 21;
    // The date/time the user was last updated.
    google.protobuf.Timestamp last_updated = 22;
    // Whether or not the user must reset their password on next login.
    bool password_reset_required = 23;
    // connection id is the id of the auth connection that the
    // user is coming from if it is a delgated user. If the user
    // is not delgated this will be nil.
    google.protobuf.StringValue connection_id = 24;
    // User TimeZone with wrapper for nullable timezone
    api.commons.TimeZoneWrapper time_zone_override = 25;
    // UserSettings
    // List of permission groups ids the user is a member of
    repeated string permission_group_ids = 26;
    // List of trust ids the user has been assigned.
    repeated string trust_ids = 27;
    // default_app for a user
    api.commons.OperatorApplications default_application = 28;
    // User caller id
    string user_caller_id = 29;
    // users assigned agent profile group
    string agent_profile_group_id = 30;

    // a bool signalling whether or not the user is also an agent
    bool agent = 31;
    // a bool to determine whether or not user is account owner
    bool account_owner = 32;

    // Timestamp beyond which the user is required to have multi factor authentication set up
    google.protobuf.Timestamp mfa_timestamp = 33;
    // Timestamp of of when a user must reset their password before
    google.protobuf.Timestamp password_reset_date = 34;
  }

  // The user the data is about
  User user = 1;

  // The user's organizations's name
  string org_name = 2;
  // List of legacy P3 permissions.
  repeated api.commons.Permission p3_permissions = 3;
  // A list of the permission groups the user belongs to
  repeated api.commons.org.PermissionGroup permission_groups = 4;
  // A list of the labels associated with the user
  repeated api.commons.org.Label labels = 5;
  // A boolean for if the organization allows multi factor authentication
  bool org_allowed_mfa = 6;
  // The default locale preferences of the organization
  api.commons.LocalePreferences locale_preferences = 7;
}

// Request message for the RefreshMfaLockout rpc.
message RefreshMfaLockoutRequest {
  // The id of the user to refresh.
  string user_id = 1;
}

// Response message for the RefreshMfaLockout rpc.
message RefreshMfaLockoutResponse {
  // The new time that the user must setup mfa by.
  google.protobuf.Timestamp timeout = 1;
}

// Request message for the RefreshMfaLockoutByOrgId rpc.
message RefreshMfaLockoutByOrgIdRequest {
  // The id of the user to refresh.
  string user_id = 1;
  // The id of the org the user belongs to.
  string org_id = 2;
}

// Response message for the RefreshMfaLockoutByOrgId rpc.
message RefreshMfaLockoutByOrgIdResponse {
  // The new time that the user must setup mfa by.
  google.protobuf.Timestamp timeout = 1;
}

// Request message for the SetMfaTypeRequest rpc.
message SetMfaTypeRequest {
  reserved 1, 2;
  reserved "otp", "user_id";

  // The info object to pull the type from.
  // The user id field must be provided.
  api.commons.org.MfaInfo info = 3;
}

// Response message for the SetMfaTypeRequest rpc.
message SetMfaTypeResponse {}

// Request message for the SetMyMfaTypeRequest rpc.
message SetMyMfaTypeRequest {
  reserved 1;
  reserved "otp";
  // The info object to pull the type from.
  api.commons.org.MfaInfo info = 2;
}

// Response message for the SetMyMfaTypeRequest rpc.
message SetMyMfaTypeResponse {}

// Request message for the EnableUserMfa rpc.
message EnableUserMfaRequest {
  // The user to enable mfa for.
  string user_id = 1;
  // Whether or not mfa is enabled for the user.
  bool enabled = 2;
}

// Response message for the EnableUserMfa rpc.
message EnableUserMfaResponse {}

// Request message for the EnableMyUserMfa rpc.
message EnableMyUserMfaRequest {}

// Response message for the EnableUserMfa rpc.
message EnableMyUserMfaResponse {}

// Request message for the GetUserMfaInfo rpc.
message GetUserMfaInfoRequest {
  // The user to get the mfa info of.
  string user_id = 1;
}

// Response message for the GetUserMfaInfo rpc.
message GetUserMfaInfoResponse {
  api.commons.org.MfaInfo info = 1;
}

// Request message for the GetMyUserMfaInfo rpc.
message GetMyUserMfaInfoRequest {}

// Response message for the GetMyUserMfaInfo rpc.
message GetMyUserMfaInfoResponse {
  api.commons.org.MfaInfo info = 1;
}

// Request message for the GetMyAllowedMfaMethods rpc.
message GetMyAllowedMfaMethodsRequest {}

// Response message for the GetMyAllowedMfaMethods rpc.
message GetMyAllowedMfaMethodsResponse {
  // If the user is allowed to set up mfa
  bool mfa_enabled = 1;
  // If the user is allowed to set up email mfa
  bool email_enabled = 2;
  // If the user is allowed to set up duo mfa
  bool duo_enabled = 3;
}

// Request message for the AddGroupedUserIPRestrictions rpc.
message AddGroupedUserIPRestrictionsRequest {
  // List of users that can only use the provided IPs.
  repeated string user_ids = 1;
  // List of IPs to whitelist for the associated group of users.
  repeated string ips = 2;
}

// Response message for the AddGroupedUserIPRestrictions rpc.
message AddGroupedUserIPRestrictionsResponse {}

// Request message for the RemoveGroupedUserIPRestrictions rpc.
message RemoveGroupedUserIPRestrictionsRequest {
  // List of users to remove the restriction from.
  repeated string user_ids = 1;
  // List of IPs to un-restrict. Empty list will delete all restrictions
  repeated string ips = 2;
}

// Response message for the RemoveGroupedUserIPRestrictions rpc.
message RemoveGroupedUserIPRestrictionsResponse {}
