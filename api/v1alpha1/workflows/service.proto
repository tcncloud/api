// Copyright (c) 2020, TCN Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package api.v1alpha1.workflows;

import "annotations/authz.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// WorkflowDefinitionPersistService is the service that provides CRUD operations for workflow definitions.
// PERMISSION_WORKFLOWS is required for all operations
service WorkflowDefinitionPersistService {
  // CreateWorkflowDefinition creates a new flow definition in the database
  rpc CreateWorkflowDefinition(CreateWorkflowDefinitionRequest) returns (CreateWorkflowDefinitionResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/createworkflowdefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }

  // GetWorkflowDefinition retrieves a flow definition from the database
  rpc GetWorkflowDefinition(GetWorkflowDefinitionRequest) returns (GetWorkflowDefinitionResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/createworkflowdefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }

  // ListWorkflowDefinitions retrieves a list of flow definitions from the database optionally filtered by the owning application
  // if application is not specified, all flow definitions for the org are returned
  rpc ListWorkflowDefinitions(ListWorkflowDefinitionsRequest) returns (stream ListWorkflowDefinitionsResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/listworkflowdefinitions";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }

  // UpdateWorkflowDefinition updates a flow definition in the database. Only the name, description and definition graph itself are updated
  rpc UpdateWorkflowDefinition(UpdateWorkflowDefinitionRequest) returns (UpdateWorkflowDefinitionResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/updateworkflowdefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }
  // DeleteWorkflowDefinition deletes a flow definition from the database
  rpc DeleteWorkflowDefinition(DeleteWorkflowDefinitionRequest) returns (DeleteWorkflowDefinitionResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/deleteworkflowdefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }
  // ValidateWorkflowDefinition validates a flow definition in the database. Only the name, description and definition graph itself are updated
  rpc ValidateWorkflowDefinition(ValidateWorkflowDefinitionRequest) returns (ValidateWorkflowDefinitionResponse) {
    option (google.api.http).post = "/api/v1alpha1/workflows/validateworkflowdefinition";
    option (google.api.http).body = "*";
    option (annotations.authz) = {
      sets: [
        {
          permissions: [PERMISSION_WORKFLOWS]
        }
      ];
    };
  }
}

// PersistedWorkflowDefinition is the flow definition object
message PersistedWorkflowDefinition {
  // flow_definition_id is the unique identifier for the flow definition. This is generated by the system, therefor its value is meaningless on create
  string flow_definition_id = 1;
  // org_id that owns this definition. Must match the org_id of the authenticated user
  string org_id = 2;
  // application that owns this definition
  string application = 3;
  // this definition name
  string name = 4;
  // labels can be used to group/tag flow definitions together into logical categories
  repeated string labels = 9;
  // this definition description
  string description = 5;
  // the JSON serialized form of the flow definition
  string definition = 6; // JSON serialized form of the proto definition
  // create_time is the time the flow definition was created. Not used for the update request
  google.protobuf.Timestamp create_time = 7;
  // update_time is the time the flow definition was last updated. Not used for the create request
  google.protobuf.Timestamp update_time = 8;
  // delete_time is the time the flow definition was soft-deleted. Not used for the create request
  google.protobuf.Timestamp delete_time = 10;

  // extra is a JSON serialized string that can be used to store extra data for the flow definition (e.g. UI positioning data)
  string extra = 100; //JSON serialized data for UI (e.g. nodes positioning)
}

// CreateWorkflowDefinitionRequest is the request object for creating a flow definition
message CreateWorkflowDefinitionRequest {
  // workflow definition is the flow definition object
  PersistedWorkflowDefinition workflow_definition = 1;
}

// CreateWorkflowDefinitionResponse is the response object for creating a flow definition
message CreateWorkflowDefinitionResponse {
  // workflow_definition is the persisted flow definition object (with the flow_definition_id set)
  PersistedWorkflowDefinition workflow_definition = 1;
}

// GetWorkflowDefinitionRequest is the request object for retrieving a flow definition
message GetWorkflowDefinitionRequest {
  // flow_definition_id is the identifier for the flow definition to retrieve
  string workflow_definition_id = 1;
}

// GetWorkflowDefinitionResponse is the response object for retrieving a flow definition
message GetWorkflowDefinitionResponse {
  // workflow_1definition is the flow definition object
  PersistedWorkflowDefinition workflow_definition = 1;
}

// ListWorkflowDefinitionsRequest is the request object for listing flow definitions
message ListWorkflowDefinitionsRequest {
  // org_id is the organization identifier to list flow definitions for
  string org_id = 1;
  // application is the application identifier to list flow definitions for. If this is specified, the output is filtered to only include flow definitions for the application
  string application = 2;
  // labels can be used to filter grouped/tagged flow definitions
  repeated string labels = 3;
}

// ListWorkflowDefinitionsResponse is the response object for listing flow definitions
message ListWorkflowDefinitionsResponse {
  // workflow_definition is the flow definition object
  PersistedWorkflowDefinition workflow_definition = 1; // an array of
}

// UpdateWorkflowDefinitionRequest is the request object for updating a flow definition
message UpdateWorkflowDefinitionRequest {
  // flow_definition is the object to be updated. Only the name, description, definition graph and the extra information are updated
  PersistedWorkflowDefinition workflow_definition = 1;
}

// UpdateWorkflowDefinitionResponse is the response object for updating a flow definition
message UpdateWorkflowDefinitionResponse {
  // flow_definition is the updated flow definition object
  PersistedWorkflowDefinition workflow_definition = 1;
}

// DeleteWorkflowDefinitionRequest is the request object for deleting a flow definition
message DeleteWorkflowDefinitionRequest {
  // workflow_definition_id is the identifier for the flow definition to delete
  string workflow_definition_id = 1;
}

// DeleteWorkflowDefinitionResponse is the response object for deleting a flow definition
message DeleteWorkflowDefinitionResponse {
  // workflow_definition is the deleted flow definition object
  PersistedWorkflowDefinition workflow_definition = 1;
}

// ValidateWorkflowDefinitionRequest is the request object for validating a flow definition
message ValidateWorkflowDefinitionRequest {
  // workflow_definition is the object to be validated
  PersistedWorkflowDefinition workflow_definition = 1;
}

// ValidateWorkflowDefinitionResponse is the response object for validating a flow definition
message ValidateWorkflowDefinitionResponse {
  // valid is true if the flow definition is valid, false otherwise
  bool valid = 1;
  // error is the error message if the flow definition is invalid
  string error = 2;
}
