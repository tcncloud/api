syntax = "proto3";

package api.v1alpha1.integrationspublic;

import "api/commons/acd.proto";
import "api/commons/integrations/integrations.proto";
import "api/v1alpha1/integrations/portals.proto";
import "api/v1alpha1/integrations/service.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

service IntegrationsPublic {
  rpc GetLinkData(GetLinkDataReq) returns (GetLinkDataRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/getlinkdata";
    option (google.api.http).body = "*";
  }
  rpc SubmitVerification(SubmitVerificationReq) returns (SubmitVerificationRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/submitverification";
    option (google.api.http).body = "*";
  }
  rpc SessionKeepAlive(SessionKeepAliveReq) returns (SessionKeepAliveRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/sessionkeepalive";
    option (google.api.http).body = "*";
  }
  rpc GetInvoice(GetInvoiceReq) returns (GetInvoiceRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/getinvoice";
    option (google.api.http).body = "*";
  }
  rpc SubmitPayment(SubmitPaymentReq) returns (SubmitPaymentRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/submitpayment";
    option (google.api.http).body = "*";
  }
  rpc GetReceipt(GetReceiptReq) returns (GetReceiptRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/getreceipt";
    option (google.api.http).body = "*";
  }
  rpc ProcessWorkflow(ProcessWorkflowReq) returns (ProcessWorkflowRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/processworkflow";
    option (google.api.http).body = "*";
  }
  rpc GetLinkDetails(GetLinkDetailsReq) returns (GetLinkDetailsRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/getlinkdetails";
    option (google.api.http).body = "*";
  }
  rpc CalculateFees(CalculateFeesReq) returns (CalculateFeesRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/calculatefees";
    option (google.api.http).body = "*";
  }
  rpc DeliverReceipt(DeliverReceiptReq) returns (DeliverReceiptRes) {
    option (google.api.http).post = "/api/v1alpha1/integrationspublic/deliverreceipt";
    option (google.api.http).body = "*";
  }
}

message Values {
  map<string, Value> values = 1;
}

// kind of like a json value, but we don't support circular references
message Value {
  oneof val {
    string str_val = 1;
    double num_val = 2;
    bool bool_val = 3;
    google.protobuf.Timestamp time_val = 4;
    CompositeVal comp_val = 6;
    int64 int_val = 7;
  }
  // whether this value should be allowed to be stored
  bool sensitive = 5;
  // what type of data value we *want* to validate as.
  // a value does *not* have to match the validation enum.
  // a value that does not match its validation enum is just invalid.
  api.commons.integrations.Validation validation = 8;
}

// represents the individual parts of a string, where some of the parts are
// fields in the payload, and other parts are static strings
// CompositeVal cannot handle circular references. Meaning you cannot have two
// values that contain fields of each other in the same payload.
// Fields that are not found when built into a string will throw an error
message CompositeVal {
  repeated FieldOrStr parts = 1;
}

// represents either a field name whose value needs to be looked up in the payload
// or a static string value
message FieldOrStr {
  oneof val {
    string field = 1;
    string str_val = 2;
  }
}

message PortalConfigId {
  string id = 3;
}

// all these things will show up on the portal screen to the receiver of the link
// contact info should look like the company who is using the portal(not tcn)
message PortalConfig {
  // reserved names: receipt_sms_template, receipt_email_template,
  // receipt_sms_source_phone, receipt_email_from_addr
  reserved 9 to 12;
  string id = 21;
  string name = 22;
  string description = 23;
  // link to pull up a chat with customer service
  string chat_client_link = 2;
  string contact_email = 3;
  string contact_phone = 4;
  string postal_code = 5;
  string city = 6;
  string state = 7;
  string company_name = 8;
  // is the logo used in the corner of the payment portal screen
  bytes logo = 13;
  // is the primary color used for the portal screen
  string primary_color = 14;
  // accent color used on the portal screen
  string secondary_color = 15;
  string street_address = 19;
}

message PortalLinkId {
  string id = 3;
}

message GetLinkDataReq {
  PortalLinkId entity = 1;
}
message GetLinkDataRes {
  // true if payment was taken for this link
  bool complete = 2;
  // true if the link is expired
  bool expired = 3;
  // styling info
  PortalConfig portal_config = 4;
  // how the user verifies identity for this portal
  api.commons.integrations.VerificationFlow verification = 5;
  // how the user retrieves invoice for this portal
  api.commons.integrations.InvoiceFlow invoice = 6;
  // all the accepted payment flows for this portal
  repeated api.commons.integrations.PaymentFlow payments = 7;

  message FieldNames {
    api.commons.integrations.Flow flow = 8;
    repeated string field_names = 9;
    repeated api.commons.integrations.FieldDefinition fields = 10;
  }
  repeated FieldNames flow_forms = 9;
  // text that appears on one of the portal pages
  PortalText portal_text = 15;
}

message PortalText {
  string verification_header = 1;
  string verification_footer = 2;
  string payment_header = 3;
  string payment_footer = 4;
  string receipt_header = 5;
  string receipt_footer = 6;
  string invoice_header = 7;
  string invoice_footer = 8;
}

message SubmitVerificationReq {
  PortalLinkId entity = 1;
  // values from the verification form
  map<string, Value> verification_fields = 2;
}
message SubmitVerificationRes {
  // if true, the session_id is valid and the user is considered "logged in"
  bool verified = 1;
  // must be sent for requests that require a user to be verified
  string session_id = 2;
}
message SessionKeepAliveReq {
  PortalLinkId entity = 1;
  string session_id = 2;
}
message SessionKeepAliveRes {
  // session refreshed ok
  bool ok = 1;
  string session_id = 2;
}
message GetInvoiceReq {
  PortalLinkId entity = 1;
  string session_id = 2;
}
message GetInvoiceRes {
  // the raw data
  map<string, Value> fields = 1;
  double amount_due = 2;
  string amount_due_key = 3;
  // the parsed data
  api.commons.integrations.Invoices invoices = 4;
}
message SubmitPaymentReq {
  PortalLinkId entity = 1;
  string session_id = 2;

  map<string, Value> payment_fields = 3;
  api.commons.integrations.PaymentFlow payment_flow = 4;
}
message SubmitPaymentRes {
  map<string, Value> fields = 1;
  double amount_paid = 2;
  string amount_paid_key = 3;
}
message GetReceiptReq {
  PortalLinkId entity = 1;
  string session_id = 2;
}
message GetReceiptRes {
  string receipt_id = 1;
  // the non-sensitive request fields used to make the payment
  map<string, Value> request = 2;
  // the response from the payment
  map<string, Value> response = 3;
  // amount charged
  double amount_paid = 4;
  // field in the response that represents the amount charged
  string amount_paid_key = 5;
  // flow name, type and options used
  api.commons.integrations.PaymentFlow payment_flow = 6;
}

message ProcessWorkflowReq {
  // portal link id is optional depending on the type of portal being processed
  // if it is specified, we merge in the link data to the request params
  string portal_link_id = 1;
  string portal_id = 2;
  // segment tells us which workflow segment needs processing
  int32 segment = 3;
  // which choice in the workflow array to be processed
  int32 choice = 4;
  // params are what the user fills out before it is processed.
  // It will be merged with plugin instance data and potentially link data
  map<string, Value> params = 5;
  api.commons.integrations.RequestOrigin request_origin = 6;
  // session_id is an optional field, only specific Portals will check the session before processing.
  string session_id = 7;
}

message ProcessWorkflowRes {
  bool success = 1;
  // the response data from the process
  map<string, Value> data = 2;
  string session_id = 3;
}

message GetLinkDetailsReq {
  PortalLinkId entity = 1;
}

message GetLinkDetailsRes {
  api.v1alpha1.integrations.Portal portal = 1;
  PortalConfig portal_config = 2;
  bool expired = 3;
  bool completed = 4;
  api.v1alpha1.integrations.PortalDefinition portal_definition = 5;
}

message CalculateFeesReq {
  PortalLinkId entity = 1;
  repeated api.commons.integrations.Fee fees = 2;
  map<string, Value> params = 3; // form fields collected during portal execution. Some data cannot be set at the plugin level because it is a runtime parameter.
  int64 call_sid = 4; // used for BI
  api.commons.CallType.Enum call_type = 5; // used for BI
  api.commons.integrations.RequestOrigin request_origin = 6; // used for BI
}

message CalculateFeesRes {
  map<string, google.type.Money> calculated_fees = 1; // key: fee name, field: fee amount
  google.type.Money total_amount_due = 2;
}

message DeliverReceiptReq {
  oneof delivery_method {
    EmailReceipt email_receipt = 3;
    // adding sms, and pdf download in the future if requested
  }
  string receipt_id = 6; // used to look up the populated receipt template in tmp storage
}

message EmailReceipt {
  string to_addr = 1;
}

message DeliverReceiptRes {
  // empty for now, can send back an fts url if we decide to allow them to download a pdf of the receipt
}
