syntax = "proto3";

package api.commons.audit;

import "api/commons/omnichannel.proto";
import "google/protobuf/wrappers.proto";

///
/// This file contains event from Class 300
/// Omnichannel events
///

// OmnichannelCreateProjectEvent - whenever a project is created
message OmnichannelCreateProjectEvent {
  int64 client_sid = 1;
  string name = 2;
  string description = 3;
}

// OmnichannelCreateCampaignEvent - whenever a campaign is created
message OmnichannelCreateCampaignEvent {
  // campaign name
  string name = 1;
  // campaign description
  string description = 2;
  // campaign type
  api.commons.ChannelType channel_type = 3;
  // campaign direction
  api.commons.CampaignDirection campaign_direction = 4;
  // generated campaign sid
  int64 campaign_sid = 5 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 6;
  // project identifier
  int64 project_sid = 7 [jstype = JS_STRING];
}

// OmnichannelT10Event - whenever a T10 is triggered
message OmnichannelT10Event {
  // conversation_id
  int64 conversation_sid = 1 [jstype = JS_STRING];
  // campaign_id
  int64 campaign_sid = 2 [jstype = JS_STRING];
  // channel_type
  api.commons.ChannelType channel_type = 3;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 4;
  // the message sent by the agent
  api.commons.OmniMessage message = 5;
}

// OmnichannelDailyReportEvent - whenever a daily project report is generated
message OmnichannelDailyProjectReportEvent {
  string download_url = 1;
}

// OmnichannelDailyReportEvent - whenever a daily conversation report is generated
message OmnichannelDailyConversationReportEvent {
  string download_url = 1;
}

// OmnichannelAgentAssignConversationEvent - handle agent assign conversation event
message OmnichannelAgentAssignConversationEvent {
  // conversation id
  int64 conversation_sid = 1 [jstype = JS_STRING];
  //campaign id
  int64 campaign_sid = 2 [jstype = JS_STRING];
  //channel type - chat|email|sms
  api.commons.ChannelType channel_type = 3;
  //agent user id
  string user_id = 4;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 5;
  // the message sent by the agent
  api.commons.OmniMessage message = 6;
}

// OmnichannelAgentUnassignConversationEvent - handle agent unassign conversation event
message OmnichannelAgentUnassignConversationEvent {
  // conversation id
  int64 conversation_sid = 1 [jstype = JS_STRING];
  //campaign id
  int64 campaign_sid = 2 [jstype = JS_STRING];
  //channel type - chat|email|sms
  api.commons.ChannelType channel_type = 3;
  //agent user id
  string user_id = 4;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 5;
  // the message sent by the agent
  api.commons.OmniMessage message = 6;
}

// OmnichannelAgentReassignConversationEvent - handle agent reassign conversation event
message OmnichannelAgentReassignConversationEvent {
  // conversation id
  int64 conversation_sid = 1 [jstype = JS_STRING];
  //campaign id
  int64 campaign_sid = 2 [jstype = JS_STRING];
  //channel type - chat|email|sms
  api.commons.ChannelType channel_type = 3;
  // manager/agent who initiated reassign
  string user_id = 4;
  // current agent who is being unassigned
  string current_user_id = 5;
  // new agent who who is being assigned to
  string new_user_id = 6;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 7;
  // the message sent by the agent
  api.commons.OmniMessage message = 8;
  // the AsmSession Sid
  google.protobuf.Int64Value new_user_asm_session_sid = 9;
}

// OmnichannelCustomerTextMessageEvent - whenever a customer sends a text message
message OmnichannelCustomerTextMessageEvent {
  // the unique identifier for the conversation
  int64 conversation_sid = 3 [jstype = JS_STRING];
  // the message sent by the customer
  api.commons.OmniMessage message = 4;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 5;
}

// OmnichannelAgentTextMessageEvent - whenever an agent send a text message
message OmnichannelAgentTextMessageEvent {
  // the unique identifier for the conversation
  int64 conversation_sid = 3 [jstype = JS_STRING];
  // the message sent by the agent
  api.commons.OmniMessage message = 4;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 5;
}

// OmnichannelManagerTextMessageEvent - whenever an agent send a text message
message OmnichannelManagerTextMessageEvent {
  // the unique identifier for the conversation
  int64 conversation_sid = 3 [jstype = JS_STRING];
  // the message sent by the agent
  api.commons.OmniMessage message = 4;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 5;
}

// OmnichannelFinishWrapUpEvent - when an agent has finished wrap up
message OmnichannelFinishWrapUpEvent {
  // the unique identifier for the conversation
  int64 conversation_sid = 1 [jstype = JS_STRING];
  // the campaign identifier the event is associated with
  int64 campaign_sid = 2 [jstype = JS_STRING];
  // the channel type i.e. chat|email|sms|etc.
  api.commons.ChannelType channel_type = 3;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 4;
  // the message sent by the agent
  api.commons.OmniMessage message = 5;
  // AsmSessionSid
  google.protobuf.Int64Value asm_session_sid = 6;
}

// OmnichannelBeginWrapUpEvent - when a conversation closes and moves to wrap up
message OmnichannelBeginWrapUpEvent {
  // the unique identifier for the conversation
  int64 conversation_sid = 1 [jstype = JS_STRING];
  // the campaign identifier this event is associated with
  int64 campaign_sid = 2 [jstype = JS_STRING];
  // the channel type i.e. chat|email|sms|etc.
  api.commons.ChannelType channel_type = 3;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 4;
  // the message sent by the agent
  api.commons.OmniMessage message = 5;
}

// OmnichannelT11Event - whenever the t11 timer went off
message OmnichannelT11Event {
  // the identifier of the conversation the timer is associated with
  int64 conversation_sid = 1 [jstype = JS_STRING];
  // the identifier of the campaign the timer is associated with
  int64 campaign_sid = 2 [jstype = JS_STRING];
  // the channel type i.e. chat|sms|email|etc.
  api.commons.ChannelType channel_type = 3;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 4;
}

// // create conversation when customer sends initial message and T1 starts
message OmnichannelCreateConversationEvent {
  //campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  //channel type - chat|email|sms
  api.commons.ChannelType channel_type = 2;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 3;
  // the message sent by the agent
  api.commons.OmniMessage message = 4;
}

// OmnichannelAgentSuspendEvent - whenever agent suspends the conversation
message OmnichannelAgentSuspendEvent {
  // the suspend message
  api.commons.OmniMessage message = 1;
  // conversation this message belongs to
  api.commons.OmniConversation conversation = 2;
  // asm Session sid
  google.protobuf.Int64Value asm_session_sid = 3;
}

// OmnichannelCloseConversationEvent - close conversation
message OmnichannelCloseConversationEvent {
  // the close message
  api.commons.OmniMessage message = 1;
  // conversation the message belongs to
  api.commons.OmniConversation conversation = 2;
}

// OmnichannelUpdateCampaignEvent - whenever a campaign is update
message OmnichannelUpdateCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelSetConversationCollectedDataEvent - handle set conversation collected data event
message OmnichannelSetConversationCollectedDataEvent {
  // conversation id
  int64 conversation_sid = 1 [jstype = JS_STRING];
  // the id of the agent
  string user_id = 2;
  //channel type - chat|email|sms
  api.commons.ChannelType channel_type = 3;
  // campaign direction
  api.commons.CampaignDirection campaign_direction = 4;
  //collected data
  api.commons.ConversationCollectedData collected_data = 5;
}

// OmnichannelCompleteCampaignEvent - whenever a campaign is completed
message OmnichannelCompleteCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelArchiveCampaignEvent - whenever a campaign is archived
message OmnichannelArchiveCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelStartCampaignEvent - whenever a campaign is completed
message OmnichannelStartCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelPauseCampaignEvent - whenever a campaign is paused
message OmnichannelPauseCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelResumeCampaignEvent - whenever a campaign is resumed
message OmnichannelResumeCampaignEvent {
  // campaign id
  int64 campaign_sid = 1 [jstype = JS_STRING];
  // campaign name
  string name = 2;
  // campaign description
  string description = 3;
  // campaign type
  api.commons.ChannelType channel_type = 4;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 5;
}

// OmnichannelScheduleModuleEvent - whenever a module is schedule status
message OmnichannelScheduleModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelStartModuleEvent - whenever a module is start status
message OmnichannelStartModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelPauseModuleEvent - whenever a module is pause status
message OmnichannelPauseModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelResumeModuleEvent - whenever a module is resume status
message OmnichannelResumeModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelErrorModuleEvent - whenever a module is error status
message OmnichannelErrorModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelSuccessModuleEvent - whenever a module is success status
message OmnichannelSuccessModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelFailModuleEvent - whenever a module is fail status
message OmnichannelFailModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelCompleteModuleEvent - whenever a module is complete status
message OmnichannelCompleteModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelArchiveModuleEvent - whenever a module is archive status
message OmnichannelArchiveModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelUpdateModuleEvent - whenever a module is update status
message OmnichannelUpdateModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 2;
}

// OmnichannelAddSmsMessageSentAuditEvent - handle omnimessage and messageunits
message OmnichannelSmsMessageSentModuleEvent {
  // module id
  int64 module_sid = 1 [jstype = JS_STRING];
  // messageunits
  int64 message_units = 2;
  // omni campaign
  api.commons.OmniCampaign omni_campaign = 3;
  // the message sent by the agent
  api.commons.OmniMessage message = 4;
}

// OmniChannelModuleInitialReplyEvent -
message OmnichannelModuleInitialReplyEvent {
  // org id
  string org_id = 1;
  // campaign_sid
  int64 campaign_sid = 2;
  // campaign_module_sid
  int64 campaign_module_sid = 3;
  // conversation_sid
  int64 conversation_sid = 4;
  // channel type
  api.commons.ChannelType channel_type = 5;
  // omnimessage
  api.commons.OmniMessage message = 6;
  // omnicampaign
  api.commons.OmniCampaign campaign = 7;
}

// OmnichannelTaskMessageSentEvent -
message OmnichannelTaskMessageSentEvent {
  // task identifier
  int64 task_sid = 1;
  // campaign identifier
  int64 campaign_sid = 2;
  // module identifier
  int64 module_sid = 3;
  // the number of individual messages sent out
  int64 message_units = 4;
  // the campaign the task is a part of
  api.commons.OmniCampaign campaign = 5;
  // the message sent
  api.commons.OmniMessage message = 6;
  // the task that sent the message
  api.commons.OmniTask task = 7;
}

// OmnichannelConnectedInboxPollEvent -
message OmnichannelConnectedInboxPollEvent {
  // campaign
  api.commons.OmniCampaign omni_campaign = 1;
  // campaign_module_sid
  int64 campaign_module_sid = 2;
  // connected inbox
  api.commons.ConnectedInbox connected_inbox = 3;
}

// OmnichannelConnectedInboxCreatedEvent -
message OmnichannelConnectedInboxCreatedEvent {
  // the created connected inbox
  api.commons.ConnectedInbox connected_inbox = 1;
}

// Omnichannel
message OmnichannelAgentMessageUnitsEvent {
  // the omni message
  api.commons.OmniMessage message = 1;
  // the total number of messages sent
  int32 message_units = 2;
}

// OmniChannelManagerMessageUnitsEvent -
message OmnichannelManagerMessageUnitsEvent {
  // the omni message
  api.commons.OmniMessage message = 1;
  // the total number of messages sent
  int32 message_units = 2;
}

// OmniChannelCustomerMessageUnitsEvent -
message OmnichannelCustomerMessageUnitsEvent {
  // the omni message
  api.commons.OmniMessage message = 1;
  // the total number of messages sent
  int32 message_units = 2;
}

// OmnichannelSystemMessageUnitsEvent -
message OmnichannelSystemMessageUnitsEvent {
  // the omni message
  api.commons.OmniMessage message = 1;
  // the total number of messages sent
  int32 message_units = 2;
}

// OmniChannelAgentMessageSentEvent -
message OmnichannelPaymentLinkSentEvent {
  // the message sent
  commons.OmniMessage message = 1;
  // the payment link
  string link = 2;
}
