syntax = "proto3";

package api.commons.audit;

import "api/commons/acd.proto";
import "api/commons/scorecards.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// ScorecardsCreateQuestionEvent is event when a question library question is created
message ScorecardsCreateQuestionEvent {
  string author_id = 1; // the creator of the question
  string question_text = 2; // the question to display
  string description = 3; // extra info or context for the question
  api.commons.Question question = 4; // question created
}

// ScorecardsUpdateQuestionEvent is event when a question library question is updated
message ScorecardsUpdateQuestionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string question_text = 2; // the question to display
  string description = 3; // extra info or context for the question
  google.protobuf.FieldMask update_mask = 4; // field mask of updated fields
  api.commons.Question question = 5; // question updated
}

// ScorecardsDeleteQuestionEvent is event when a question library question is deleted
message ScorecardsDeleteQuestionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string question_text = 2; // the question to display
  string description = 3; // extra info or context for the question
  repeated int64 category_ids = 4; // category ids linked to question
  api.commons.Question question = 5; // question deleted
}

// ScorecardsCreateScorecardEvent is event when a scorecard library scorecard is created
message ScorecardsCreateScorecardEvent {
  string author_id = 1; // the creator of the scorecard
  string title = 2; // the title of the scorecard
  string description = 3; // extra info or context for the scorecard
  double pass_score = 4; // passing score for the scorecard
  api.commons.ScoreType score_type = 5; // method of score calculation
  api.commons.EvaluationType evaluation_type = 6; // method of evaluation (i.e. manual, auto)
  api.commons.Scorecard scorecard = 7; // scorecard created
}

// ScorecardsUpdateScorecardEvent is event when a scorecard library scorecard is updated
message ScorecardsUpdateScorecardEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // the title of the scorecard
  string description = 3; // extra info or context for the scorecard
  double pass_score = 4; // passing score for the scorecard
  api.commons.ScoreType score_type = 5; // method of score calculation
  api.commons.EvaluationType evaluation_type = 6; // method of evaluation (i.e. manual, auto)
  bool allow_feedback = 7; // agent feedback allowed
  api.commons.ScorecardState state = 8; // state of the scorecard (i.e. draft, ready, in_use)
  google.protobuf.FieldMask update_mask = 9; // field mask of updated fields
  api.commons.Scorecard scorecard = 10; // scorecard updated
}

// ScorecardsDeleteScorecardEvent is event when a scorecard library scorecard is deleted
message ScorecardsDeleteScorecardEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // the title of the scorecard
  string description = 3; // extra info or context for the scorecard
  double pass_score = 4; // passing score for the scorecard
  api.commons.ScoreType score_type = 5; // method of score calculation
  api.commons.EvaluationType evaluation_type = 6; // method of evaluation (i.e. manual, auto)
  api.commons.ScorecardState state = 7; // state of the scorecard (i.e. draft, ready, in_use)
  api.commons.Scorecard scorecard = 8; // scorecard deleted
}

// ScorecardsCloneScorecardEvent is event when a scorecard library scorecard is cloned
message ScorecardsCloneScorecardEvent {
  string author_id = 1; // the creator of the scorecard
  string title = 2; // the title of the scorecard
  string description = 3; // extra info or context for the scorecard
  double pass_score = 4; // passing score for the scorecard
  api.commons.ScoreType score_type = 5; // method of score calculation
  api.commons.EvaluationType evaluation_type = 6; // method of evaluation (i.e. manual, auto)
  api.commons.Scorecard scorecard = 7; // scorecard clone
}

// ScorecardsCreateEvaluationEvent is event when an evaluation library evaluation is created
message ScorecardsCreateEvaluationEvent {
  int64 evaluation_id = 1; // id of the evaluation being created
  int64 scorecard_id = 2; // id of evaluated scorecard
  string scorer_id = 3; // user_id of person performing evaluation
  string agent_user_id = 4; // agent user id of agent getting evaluated
  int64 call_sid = 5; // sid of the call being evaluated
  api.commons.Evaluation evaluation = 6; // the evaluation being created
}

// ScorecardsUpdateEvaluationEvent is event when an evaluation library evaluation is updated
message ScorecardsUpdateEvaluationEvent {
  int64 evaluation_id = 1; // id of the evaluation being updated
  int64 scorecard_id = 2; // id of evaluated scorecard
  string scorer_id = 3; // user_id of person performing evaluation
  string agent_user_id = 4; // agent user id of agent getting evaluated
  int64 call_sid = 5; // sid of the call being evaluated
  api.commons.Evaluation evaluation = 6; // the evaluation being updated
}

// ScorecardsDeleteEvaluationEvent is event when an evaluation library evaluation is deleted
message ScorecardsDeleteEvaluationEvent {
  int64 evaluation_id = 1; // id of the evaluation being created
  int64 scorecard_id = 2; // id of evaluated scorecard
  string user_id = 3; // user_id of person deleting evaluation
  string agent_user_id = 4; // agent user id of agent getting evaluated
  int64 call_sid = 5; // sid of the call being evaluated
  api.commons.Evaluation evaluation = 6; // the evaluation being deleted
}

// ScorecardsCreateSectionEvent is event when a section library section is created
message ScorecardsCreateSectionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // section title or name
  string description = 3; // extra context about the section
  uint32 weight = 4; // used for scorecards with weighted scoring
  api.commons.Section section = 5; // section created
}

// ScorecardsUpdateSectionEvent is event when a section library section is updated
message ScorecardsUpdateSectionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // section title or name
  string description = 3; // extra context about the section
  uint32 weight = 4; // used for scorecards with weighted scoring
  int32 sort_order = 5; // order number of section
  google.protobuf.FieldMask update_mask = 6; // field mask of updated fields
  api.commons.Section section = 7; // section updated
}

// ScorecardsDeleteSectionEvent is event when a section library section is deleted
message ScorecardsDeleteSectionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // section title or name
  string description = 3; // extra context about the section
  uint32 weight = 4; // used for scorecards with weighted scoring
  api.commons.Section section = 5; // section deleted
}

// ScorecardsCreateCategoryEvent is event when a category library category is created
message ScorecardsCreateCategoryEvent {
  string author_id = 1; // the creator of the category
  string title = 2; // title of the category
  string description = 3; // extra info or context for the category
  google.protobuf.Timestamp created_at = 4; // timestamp of creation
  api.commons.Category category = 5; // category object created
}

// ScorecardsUpdateCategoryEvent is event when a category library category is updated
message ScorecardsUpdateCategoryEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // title of the category
  string description = 3; // extra info or context for the category
  google.protobuf.FieldMask update_mask = 4; // field mask of updated fields
  api.commons.Category category = 5; // category object created
}

// ScorecardsDeleteCategoryEvent is event when a category library category is deleted
message ScorecardsDeleteCategoryEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string title = 2; // title of the category
  string description = 3; // extra info or context for the category
  google.protobuf.Timestamp deleted_at = 4; // timestamp of deletion
  api.commons.Category category = 5; // category object created
}

// ScorecardsCreateEvaluationQuestionEvent is event when an evaluation question is created
message ScorecardsCreateEvaluationQuestionEvent {
  int64 evaluation_question_id = 1; // unique id of evaluation question
  int64 evaluation_id = 2; // unique id of evaluation
  int64 scorecard_question_id = 3; // unique id of scorecard question
  string user_id = 4; // tcn user id of person creating question
  api.commons.EvaluationQuestion evaluation_question = 5; // the question being created
}

// ScorecardsUpdateEvaluationQuestionEvent is event when an evaluation question is updated
message ScorecardsUpdateEvaluationQuestionEvent {
  int64 evaluation_question_id = 1; // unique id of evaluation question
  int64 evaluation_id = 2; // unique id of evaluation
  int64 scorecard_question_id = 3; // unique id of scorecard question
  string user_id = 4; // tcn user id of person performing request
  bool skipped = 5;
  int64 points = 6;
  google.protobuf.FieldMask update_mask = 7; // field mask of updated fields
  api.commons.EvaluationQuestion evaluation_question = 8; // the question being updated
}

// ScorecardsDeleteEvaluationQuestionEvent is event when an evaluation question is deleted
message ScorecardsDeleteEvaluationQuestionEvent {
  int64 evaluation_question_id = 1; // unique id of evaluation question
  int64 evaluation_id = 2; // unique id of evaluation
  int64 scorecard_question_id = 3; // unique id of scorecard question
  string user_id = 4; // tcn user id of person performing request
  api.commons.EvaluationQuestion evaluation_questions = 5; // the question being deleted
}

// ScorecardsCreateScorecardQuestionEvent is event when a scorecard question library scorecard question is created
message ScorecardsCreateScorecardQuestionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string question = 2; // question to display
  string description = 3; // optional; additional info about question
  bool allow_skip = 4; // question can be excluded from scoring (allow n/a)
  int64 max_points = 5; // max points allowed for scorecard question
  bool allow_multi_select = 6; // allow multiple selections for scorecard question
  api.commons.ScorecardQuestion scorecard_question = 7; // scorecard question created
}

// ScorecardsUpdateScorecardQuestionEvent is event when a scorecard question library scorecard question is updated
message ScorecardsUpdateScorecardQuestionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string question = 2; // question to display
  string description = 3; // optional; additional info about question
  bool allow_skip = 4; // question can be excluded from scoring (allow n/a)
  int64 max_points = 5; // max points allowed for scorecard question
  bool allow_multi_select = 6; // allow multiple selections for scorecard question
  int32 sort_order = 7; // order number of scorecard question
  google.protobuf.FieldMask update_mask = 8; // field mask of updated fields
  api.commons.ScorecardQuestion scorecard_question = 9; // scorecard question updated
}

// ScorecardsDeleteScorecardQuestionEvent is event when a scorecard question library scorecard question is deleted
message ScorecardsDeleteScorecardQuestionEvent {
  string user_id = 1; // unique id of tcn user triggering event
  string question = 2; // question to display
  string description = 3; // optional; additional info about question
  bool allow_skip = 4; // question can be excluded from scoring (allow n/a)
  int64 max_points = 5; // max points allowed for scorecard question
  bool allow_multi_select = 6; // allow multiple selections for scorecard question
  api.commons.ScorecardQuestion scorecard_question = 7; // scorecard question deleted
}

// ScorecardsCreateAutoEvaluationEvent is event when an auto evaluation library auto evaluation is created
message ScorecardsCreateAutoEvaluationEvent {
  int64 auto_evaluation_id = 1; // id of the auto evaluation being created
  int64 scorecard_id = 2; // id of evaluated scorecard
  string agent_user_id = 3; // agent user id of agent getting evaluated
  int64 call_sid = 4; // sid of the call being evaluated
  api.commons.CallType.Enum call_type = 5; // type of call being evaluated
  int64 transcript_sid = 6; // transcript sid for the call evaluated
  api.commons.RiskLevel risk_level = 7; // risk level of the evaluation
  api.commons.AutoEvaluation auto_evaluation = 8; // the auto evaluation being created
}

// ScorecardsCreateSmartEvaluationEvent represents the creation of an evaluation from a smart scorecard
message ScorecardsCreateSmartEvaluationEvent {
  int64 smart_evaluation_id = 1; // unique id of smart evaluation created
  int64 transcript_sid = 2; // unique id of conversation transcript evaluated
  oneof metadata {
    Call call = 3; // metadata for call that triggered the scorecard
    Sms sms = 4; // metadata for sms that triggered the scorecard
  }

  message Call {
    int64 call_sid = 1; // unique when combined with call type
    api.commons.CallType.Enum call_type = 2; // unique when combined with call sid
  }

  message Sms {
    int64 conversation_sid = 1; // unique conversation identifier
  }
}
