syntax = "proto3";

package api.commons.audit;

// This enum will hold all application classes and sub-classes
// Classes are encoded as hundreds (100, 200...) and sub-classes are the class ID + 0..99.
//
// EventType is the source for typing subscriptions, notifications, and any future
// event use cases such auditing, billing, logging, etc. (anything triggered by audit).
//
// Follow the pattern of (product + event description), separated by underscores.
//   - e.g. PRODUCT_EVENT_DESCRIPTION
//
// EventTypes that trigger notifications should read nicely as a system message header.
//   - e.g Product Event Description
enum EventType {
  // Dummy Application IDs
  DUMMY_APPLICATION = 0;
  DUMMY_APPLICATION_STORAGE = 1;
  DUMMY_APPLICATION_COMPUTE = 2;

  // Voice Analytics Application IDs
  VOICE_ANALYTICS = 100;
  VOICE_ANALYTICS_FLAG_OCCURRENCE = 101;
  VOICE_ANALYTICS_FLAG_NEEDS_REVIEW = 102;
  VOICE_ANALYTICS_BILLING_REPORT = 103;
  VOICE_ANALYTICS_FLAG_SUMMARY = 104;
  VOICE_ANALYTICS_PHRASE_CORRECTION = 105;
  VOICE_ANALYTICS_CREATE_TRANSCRIPT = 106;
  VOICE_ANALYTICS_CREATE_SENTIMENT = 107;
  VOICE_ANALYTICS_CREATE_SUMMARY = 108;

  // Omnichannel Dashboard Application IDs
  OMNICHANNEL = 300;
  OMNICHANNEL_PROJECT = 301;
  OMNICHANNEL_CAMPAIGN = 302;
  OMNICHANNEL_DAILY_PROJECT_REPORT = 303;
  OMNICHANNEL_DAILY_CONVERSATION_REPORT = 304;
  // agent assign conversation eventType
  OMNICHANNEL_AGENT_ASSIGN_CONVERSATION = 305;
  // agent unassign conversation eventType
  OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION = 306;
  // agent reassign conversation eventType
  OMNICHANNEL_AGENT_REASSIGN_CONVERSATION = 307;
  // T10 trigger  eventType
  OMNICHANNEL_T10 = 308;
  // customer sent a text message event
  OMNICHANNEL_CUSTOMER_TEXT_MESSAGE = 309 [deprecated = true];
  // agent sent a text message event
  OMNICHANNEL_AGENT_TEXT_MESSAGE = 310 [deprecated = true];
  // finish wrap up event
  OMNICHANNEL_FINISH_WRAP_UP = 311;
  // conversation closes and wrap up begins event
  OMNICHANNEL_BEGIN_WRAP_UP = 312;
  // t11 timer went off event
  OMNICHANNEL_T11 = 313;
  // create conversation when customer sends initial message and T1 starts
  OMNICHANNEL_CREATE_CONVERSATION = 314;
  // agent suspends the conversation event
  OMNICHANNEL_AGENT_SUSPEND = 315;
  // conversation is closed
  OMNICHANNEL_CLOSE_CONVERSATION = 316;
  // manager sent a text message event
  OMNICHANNEL_MANAGER_TEXT_MESSAGE = 332 [deprecated = true];
  // update event with campaign details
  OMNICHANNEL_UPDATE_CAMPAIGN = 330;
  // update event with set conversation collected data details
  OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA = 331;
  // update campaign to archive status event
  OMNICHANNEL_ARCHIVE_CAMPAIGN = 333;
  // update campaign to pause status event
  OMNICHANNEL_PAUSE_CAMPAIGN = 334;
  // update campaign to resume status event
  OMNICHANNEL_RESUME_CAMPAIGN = 335;
  // update campaign to start status event
  OMNICHANNEL_START_CAMPAIGN = 336;
  // update module to schedule status event
  OMNICHANNEL_SCHEDULE_MODULE = 337;
  // update module to start status event
  OMNICHANNEL_START_MODULE = 338;
  // update module to pause status event
  OMNICHANNEL_PAUSE_MODULE = 339;
  // update module to resume status event
  OMNICHANNEL_RESUME_MODULE = 340;
  // update module to error status event
  OMNICHANNEL_ERROR_MODULE = 341;
  // update module to success status event
  OMNICHANNEL_SUCCESS_MODULE = 342;
  // update module to fail status event
  OMNICHANNEL_FAIL_MODULE = 343;
  // update module to complete status event
  OMNICHANNEL_COMPLETE_MODULE = 344;
  // update module to archive status event
  OMNICHANNEL_ARCHIVE_MODULE = 345;
  // update module event with details
  OMNICHANNEL_UPDATE_MODULE = 346;
  // send sms module event with details
  OMNICHANNEL_MODULE_SMS_MESSAGE_SENT = 347 [deprecated = true];
  // update campaign to archive status event
  OMNICHANNEL_COMPLETE_CAMPAIGN = 348;
  // initial reply event for module
  OMNICHANNEL_MODULE_INITIAL_REPLY = 349 [deprecated = true];
  // omnichannel task message sent
  OMNICHANNEL_TASK_MESSAGE_SENT = 350 [deprecated = true];
  // omnichannel connected inbox poll
  OMNICHANNEL_CONNECTED_INBOX_POLL = 351;
  // omnichannel connected inbox was created
  OMNICHANNEL_CONNECTED_INBOX_CREATED = 352;
  // omnichannel agent message units were calculated
  OMNICHANNEL_AGENT_MESSAGE_UNITS = 353 [deprecated = true];
  // omnichannel manager message units were calculated
  OMNICHANNEL_MANAGER_MESSAGE_UNITS = 354 [deprecated = true];
  // omnichannel customer message units were calculated
  OMNICHANNEL_CUSTOMER_MESSAGE_UNITS = 355 [deprecated = true];
  // omnichannel system message units were calculated
  OMNICHANNEL_SYSTEM_MESSAGE_UNITS = 356 [deprecated = true];
  // omnichannel payment link was sent
  OMNICHANNEL_PAYMENT_LINK_SENT = 357;
  //accepted manual approve task
  OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED = 358;
  //rejected manual approve task
  OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED = 359;
  //timeout of manual approve task
  OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT = 360;
  //requeue of manual approve task
  OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE = 361;
  //transcript saved
  OMNICHANNEL_TRANSCRIPT_SAVED = 362;
  //omnichannel message
  OMNICHANNEL_MESSAGE_SENT = 363;
  //omnichannel provider response
  OMNICHANNEL_PROVIDER_RESPONSE = 364;
  //omnichannel provider message failed
  OMNICHANNEL_PROVIDER_MESSAGE_FAILED = 365;

  // ASM
  // agent logs into asm
  ASM_AGENT_LOGIN = 400;
  // agent opens voice event
  ASM_OPEN_VOICE = 401;
  // agent logs into omni agent event
  ASM_OPEN_OMNI_AGENT = 402;
  // agent activates a conversation event
  ASM_ACTIVATE_CONVERSATION = 403;
  // agent deactivates a conversation event
  ASM_DEACTIVATE_CONVERSATION = 404;
  // agent's state changed event
  ASM_AGENT_STATE_CHANGED = 405;
  // agent logs out of asm
  ASM_AGENT_LOGOUT = 406;
  // asm pause event
  ASM_PAUSE_EVENT = 407;
  // asm resume event
  ASM_RESUME_EVENT = 408;
  // asm conversation pulled event
  ASM_CONVERSATION_PULLED_EVENT = 409;

  // Scorecards
  // create question event
  SCORECARDS_CREATE_QUESTION_EVENT = 500;
  // update question event
  SCORECARDS_UPDATE_QUESTION_EVENT = 501;
  // delete question event
  SCORECARDS_DELETE_QUESTION_EVENT = 502;
  // create scorecard event
  SCORECARDS_CREATE_SCORECARD_EVENT = 503;
  // update scorecard event
  SCORECARDS_UPDATE_SCORECARD_EVENT = 504;
  // delete scorecard event
  SCORECARDS_DELETE_SCORECARD_EVENT = 505;
  // clone scorecard event
  SCORECARDS_CLONE_SCORECARD_EVENT = 506;
  // create evaluation event
  SCORECARDS_CREATE_EVALUATION_EVENT = 507;
  // delete evaluation event
  SCORECARDS_DELETE_EVALUATION_EVENT = 508;
  // create section event
  SCORECARDS_CREATE_SECTION_EVENT = 509;
  // update section event
  SCORECARDS_UPDATE_SECTION_EVENT = 510;
  // delete section event
  SCORECARDS_DELETE_SECTION_EVENT = 511;
  // create category event
  SCORECARDS_CREATE_CATEGORY_EVENT = 512;
  // update category event
  SCORECARDS_UPDATE_CATEGORY_EVENT = 513;
  // delete category event
  SCORECARDS_DELETE_CATEGORY_EVENT = 514;
  // create evaluation question event
  SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT = 515;
  // update evaluation question event
  SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT = 516;
  // delete evaluation question event
  SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT = 517;
  // create scorecard question event
  SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT = 518;
  // update scorecard question event
  SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT = 519;
  // delete scorecard question event
  SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT = 520;
  // create auto evaluation event
  SCORECARDS_CREATE_AUTO_EVALUATION_EVENT = 521;
  // update evaluation event
  SCORECARDS_UPDATE_EVALUATION_EVENT = 522;
  // create smart evaluation event
  SCORECARDS_CREATE_SMART_EVALUATION_EVENT = 523;

  //Tickets Events
  // create event
  TICKET_CREATE_EVENT = 600;
  // edit event
  TICKET_EDIT_EVENT = 601;
  // close event
  TICKET_CLOSE_EVENT = 602;

  TICKET_ACTION_CREATE_EVENT = 603;
  TICKET_ACTION_EDIT_EVENT = 604;
  TICKET_ACTION_STATE_CHANGE_EVENT = 605;

  TICKET_PARTICIPANT_EVENT = 606;
  // ticket-create comment event
  TICKET_CREATE_COMMENT_EVENT = 607;
  // ticket-reply comment event
  TICKET_REPLY_COMMENT_EVENT = 608;
  // ticket-create-template event
  TICKET_TEMPLATE_CREATE_EVENT = 609;
  // ticket-edit-template event
  TICKET_TEMPLATE_EDIT_EVENT = 610;
  // ticket-close-template event
  TICKET_TEMPLATE_CLOSE_EVENT = 611;
  // ticket-assign-template event
  TICKET_TEMPLATE_ASSIGN_EVENT = 612;
  // ticket-state-change-template event
  TICKET_TEMPLATE_STATE_CHANGE_EVENT = 613;
  // ticket-project-state event
  TICKET_PROJECT_STATE_CHANGE_EVENT = 614;
  // ticket-add-contact-event
  TICKET_CONTACT_ADD_EVENT = 615;

  // Compliance Events
  // rnd query event
  COMPLIANCE_RND_QUERY_EVENT = 700;
  // rnd query cached event
  COMPLIANCE_RND_QUERY_CACHED_EVENT = 701;

  // Agent Training
  // create learning opportunity event
  AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT = 800;

  // LMS Events
  LMS_PIPELINE_FAILURE_EVENT = 900;
  LMS_PIPELINE_NO_OUTPUT_EVENT = 901;
  LMS_PIPELINE_SUCCESSFUL_EVENT = 902;

  // Billing Events
  EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN = 1000 [deprecated = true];
  EVENT_TYPE_BILLING_CREATE_BILLING_PLAN = 1001 [deprecated = true];
  EVENT_TYPE_BILLING_CREATE_INVOICE = 1002 [deprecated = true];
  EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION = 1003 [deprecated = true];
  EVENT_TYPE_BILLING_DELETE_BILLING_PLAN = 1004 [deprecated = true];
  EVENT_TYPE_BILLING_DELETE_INVOICE = 1005 [deprecated = true];
  EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION = 1006 [deprecated = true];
  EVENT_TYPE_BILLING_EXPORT_INVOICE = 1007 [deprecated = true];
  EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN = 1008 [deprecated = true];
  EVENT_TYPE_BILLING_UPDATE_INVOICE = 1009 [deprecated = true];
  EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION = 1010 [deprecated = true];
  EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED = 1011;

  // Delivery Events
  EVENT_TYPE_DELIVERY_FAILURE = 1100;
  EVENT_TYPE_DELIVERY_SUCCESS = 1101;

  //ContactManager Events
  //CreateContactEntry(upload) and AddContactEntry
  EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT = 1200;
  // view event
  EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT = 1201;
  // kyc event
  EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT = 1202 [deprecated = true];
  // ttl event
  EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT = 1203 [deprecated = true];
  // edit event
  EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT = 1204;
  // upload event
  EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT = 1205;
  // KYC verification event
  EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT = 1206;
  //Contact Manager entry delete event
  EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT = 1207;
  //Contact Manager entry expunge event at TTL
  EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT = 1208;
  //Contact Entity association event
  EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT = 1209;

  // Organization Events
  // Organization event when any users access tokens are expiring.
  EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT = 1300;
}
