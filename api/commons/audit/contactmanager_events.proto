syntax = "proto3";

package api.commons.audit;

import "api/commons/classifier.proto";
import "api/commons/contactmanager.proto";

//payload for CreateContactEntry(upload) and AddContactEntry
message ContactManagerEntryAddEvent {
  ContactManagerEntryEvent addEvent = 1; //add event
}

message ContactManagerEntryGetEncEvent {
  ContactManagerEntryEvent viewEvent = 1; //View event
}

message ContactManagerEntryEditEvent {
  ContactManagerEntryEvent editEvent = 1; //edit event
}

message ContactManagerDeleteEvent {
  ContactManagerEntryEvent deleteEvent = 1; //delete event
}

//payload for add/edit/decrypt
message ContactManagerEntryEvent {
  int64 ContactManagerListId = 1 [deprecated = true]; //contact manager list id
  int64 ContactManagerEntryId = 2; //contact manager entry id
  repeated int64 ContactManagerEntryListIds = 3 [deprecated = true]; //entry list Ids added/edited/decrypted
  repeated ContactFieldChanges FieldChanges = 4; //tracks changes in contact fields
  optional int64 ContactUpdateTaskId = 5 [jstype = JS_STRING];
}

message ContactFieldChanges {
  AuditedContactField from_value = 1;
  AuditedContactField to_value = 2;
}

// Single column in a contact
message AuditedContactField {
  int64 contact_field_id = 1;
  string name = 2;
  string type = 3;
  optional string value = 4;
}

//payload for contact list upload or manual entry
message ContactManagerListUploadEvent {
  int64 ContactManagerListId = 1; // Contact manager list ID
  int64 NumberOfContactsUploaded = 2; // Number of contacts received from LMS
  int64 NumberOfSuccessfulContactsUploaded = 3; // Number of contacts inserted
  int64 NumberOfFailedContacts = 4; // Number of contacts failed to be inserted
  int64 NumberOfNewContacts = 5; // Number of new contacts in the list
  int64 NumberOfDuplicateContacts = 6; //Number of duplicate contacts in the list
  api.commons.ClassifierEntityType DeDupFieldType = 7;
  api.commons.DeDuplicationMergeStrategy DeDupMergeStrategy = 8;
  string ContactManagerListName = 9;
  optional string FileName = 10;
  int64 UpdateTaskId = 11;
  int64 Ttl = 12;
}

//payload for decrypt of ContactManagerEntry during KYC
message ContactManagerKycEvent {
  int64 ContactManagerListId = 1; //contact manager list id
  int64 ContactManagerEntryId = 2; //contact manager entry id
  repeated string types = 3; // kyc key (non pii) types
  repeated int64 ContactManagerEntryListIds = 4; //entry list Ids decrypted
}

//payload for associating contact with external events
message ContactManagerEntityAssociationEvent {
  int64 contact_manager_entry_id = 1;
  string entity_id = 2;
  bool deleted = 3;
  bool is_active = 4;
}
