syntax = "proto3";

package api.commons.audit;

///
/// This file contains event from Class 1000
/// Billing events
///

// BillingAccumulateItemsEvent is fired when a rated item needs to be accumulated
message BillingAccumulateItemsEvent {
  string org_id = 1;
  int32 product_type = 2;
  repeated int64 event_log_ids = 3 [deprecated = true];
  string billing_cycle = 4;
  repeated bytes event_data = 5;
}

// BillingCommitBillingPlanEvent is fired when a billing plan is committed
message BillingCommitBillingPlanEvent {
  option deprecated = true;
  string billing_plan_id = 1;
  string user_id = 2;
}

// BillingCreateBillingPlanEvent is fired when a billing plan is created
message BillingCreateBillingPlanEvent {
  option deprecated = true;
  string billing_plan = 1;
  string user_id = 2;
}

// BillingCreateInvoiceEvent is fired when an invoice is created
message BillingCreateInvoiceEvent {
  option deprecated = true;
  string invoice = 1 [deprecated = true];
  string user_id = 2 [deprecated = true];
}

// BillingCreateRateDefinitionEvent is fired when a rate definition is created
message BillingCreateRateDefinitionEvent {
  option deprecated = true;
  string rate_definition = 1;
  string user_id = 2;
}

// BillingDeleteBillingPlanEvent is fired when a billing plan is deleted
message BillingDeleteBillingPlanEvent {
  option deprecated = true;
  string billing_plan_id = 1;
  string user_id = 2;
}

// BillingDeleteInvoiceEvent is fired when an invoice is deleted
message BillingDeleteInvoiceEvent {
  option deprecated = true;
  string invoice_id = 1 [deprecated = true];
  string user_id = 2 [deprecated = true];
}

// BillingDeleteRateDefinitionEvent is fired when a rate definition is deleted
message BillingDeleteRateDefinitionEvent {
  option deprecated = true;
  string rate_definition_id = 1;
  string user_id = 2;
}

// BillingExportInvoiceEvent is fired when an invoice is exported
message BillingExportInvoiceEvent {
  option deprecated = true;
  string invoice_id = 1;
  string user_id = 2;
}

// BillingUpdateBillingPlanEvent is fired when a billing plan is updated
message BillingUpdateBillingPlanEvent {
  option deprecated = true;
  string billing_plan = 1;
  string user_id = 2;
}

// BillingUpdateInvoiceEvent is fired when an invoice is updated
message BillingUpdateInvoiceEvent {
  option deprecated = true;
  string invoice = 1 [deprecated = true];
  string user_id = 2 [deprecated = true];
}

// BillingUpdateRateDefinitionEvent is fired when a rate definition is updated
message BillingUpdateRateDefinitionEvent {
  option deprecated = true;
  string rate_definition = 1;
  string user_id = 2;
}

message BillingRatedItemsGeneratedEvent {
  option deprecated = true;
  repeated RatedItem rated_items = 1;

  message RatedItem {
    string rated_item_id = 1;
    string billing_cycle = 2;
    string event_log_id = 3;
    string module_name = 4;
    string org_id = 5;
    string rate_definition_id = 6;
    string sku_id = 7;
  }
}
