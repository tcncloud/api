syntax = "proto3";

package api.commons;

import "google/protobuf/timestamp.proto";

// Ticket - Fields for Ticket creation, List tickets and view ticket
message Ticket {
  // The snowflake id of a ticket row
  int64 ticket_sid = 1 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // The imported/enabled ticket_project project_sid from omni.project
  int64 project_sid = 2 [jstype = JS_STRING];
  // project_title
  string project_title = 3;
  // A globally distributable, custom sequence generated per-project-per-month for a ticket row.
  string ticket_code = 4;
  // The title of the ticket
  string title = 5;
  // The description of the ticket
  string description = 6;
  // The org where the created was created
  string org_id = 7;
  // The userId (uuid) who created the ticket
  string created_by_id = 8;
  // The created_by_name from omni.project
  string created_by_name = 9;
  // The created Date of the Ticket Object
  google.protobuf.Timestamp created_by_date = 10;
  // due-date
  google.protobuf.Timestamp due_date = 11;
  // A list of users assigned to this ticket.
  string assignee_list = 12; // note: bound to re-factor later.
  // A list of conversation context meatadata
  repeated Metadata metadata = 14;
  // A list of skills assotiated with a ticket
  repeated Skills ticket_skills = 15;
  // Status - Ticket status : 1 open, 2 doing, 3 close etc
  int64 status = 16;
  // A list of sla  assotiated with a ticket
  repeated Sla ticket_sla = 17;
  // To be deprecated
  string assignee = 18;
  // A set of Action associated with a Project
  repeated TicketAction ticket_action = 19;
  // Status of the ticket - NEW,OPEN,CLOSED
  TicketStatus ticket_status = 20;
  // assignee list
  repeated string ticket_assignee = 21;
  //participant list - Any user who participates in the ticket life cycle
  repeated string ticket_participant = 22;
}

// Ticket Template
message TicketTemplate {
  // Deprecated
  int64 ticket_template_id = 1 [deprecated = true];
  // Organization ID
  string org_id = 2;
  // A formatted string which the FE uses to retrieve all template related information
  string template = 3;
  // Version of the Template
  string template_entity_version = 4;
  // Name of the Template
  string template_name = 5;
  // Template created by user
  string created_by_id = 6;
  // Template modified by user
  string modified_by = 7;
  // Template create date
  google.protobuf.Timestamp created_date = 8;
  // Template modified date
  google.protobuf.Timestamp modified_date = 9;
  // True/False Identifies if a template is active or inactive
  bool is_active = 10;
  // Snowflake Id of Ticket Template
  int64 template_id = 11 [jstype = JS_STRING];
}

// Mapping of Template to a Project
// Each Ticket Template Can be mapped to Multiple Projects - In ListTicketTemplateRequest we need all Template To
// Project Mapping
message TicketProjectTemplate {
  TicketTemplate ticket_template = 1;
  repeated ProjectDescription project_description = 2;
}

// Project Description
message ProjectDescription {
  // Project Id from Omni
  int64 project_id = 1 [jstype = JS_STRING];
  // Project Title From Omni
  string project_title = 2;
}

// Deprecated and will not be used
message ListTemplate {
  // Entire message deprecated
  option deprecated = true;
  int64 ticket_template_id = 1 [jstype = JS_STRING];
  string template_name = 2;
  int64 project_id = 3 [jstype = JS_STRING];
  string template = 4;
  string template_entity_version = 5;
  bool is_active = 6;
  string created_by_id = 7;
  google.protobuf.Timestamp created_date = 8;
  string project_title = 9;
  repeated int64 assigned_project = 10;
}

// Deprecated and will not be used
message AssignProjectTemplate {
  // Entire message deprecated
  option deprecated = true;
  repeated int64 ticket_template_id = 1 [jstype = JS_STRING];
  int64 project_id = 2 [jstype = JS_STRING];
}

enum TimeScale {
  TIME_SCALE_MINUTE = 0;
  TIME_SCALE_HOUR = 1;
  TIME_SCALE_DAY = 2;
  TIME_SCALE_WEEK = 3;
  TIME_SCALE_MONTH = 4;
  TIME_SCALE_YEAR = 5;
}

message Duration {
  // Value of of the Scale
  int64 value = 1 [jstype = JS_STRING];
  // Scale - In minutes,hour,day,week,month,year
  TimeScale scale = 2;
}

enum TicketStatus {
  // NEW
  TICKET_STATUS_NEW = 0;
  // OPEN
  TICKET_STATUS_OPEN = 1;
  // CLOSE
  TICKET_STATUS_CLOSE = 2;
}

enum PhoneNumberType {
  // Mobile Phone NUmber
  MOBILE = 0;
  // Geographic OR Other Number
  OTHER = 1;
  // No Response/Invalid/ERROR
  INVALID_ERROR = 2;
}

// TICKET_ACTION - New messgae have actions mapped to tickets
message TicketAction {
  // snowflake id
  int64 ticket_action_id = 1 [jstype = JS_STRING];
  // action id from ACTION_MASTER table, Only callback for now
  int64 action_id = 2 [jstype = JS_STRING];
  // Attributes for a callback Action
  // To be Deprecated Later
  CallbackContext callback_context = 3;
  // ticket id from ticket table
  int64 ticket_id = 4 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // Start Date of the ACTION
  google.protobuf.Timestamp start_ts = 5;
  // Expiry date of the ACTION
  google.protobuf.Timestamp expiry_ts = 6;
  // Ticket action status can be 1 == AVAILABLE and 2 == NOT AVAILABLE
  int64 state = 8;
  // Skills needed for the action to be completed
  // For action we need only skill id and not mandatory/optional
  repeated string action_skills = 9;
  // SLA Id for the ACTION
  repeated Sla action_sla_id = 10;
  // work done by
  string work_done_by = 11;
  // Context Object For Voice,SMS,Email - Only one object to be in Request
  oneof context {
    // Voice Callback Context
    CallbackContext voice_context = 12;
    // SMS Callback Context
    SmsbackContext sms_context = 13;
    // Email Callback Context
    EmailbackContext email_context = 14;
  }
  // Action Type
  ActionType action_type = 15;
  // ticket_code
  string ticket_code = 16;
}

// Message for Voice Callback Context
message CallbackContext {
  string caller_id = 1;
  string phone_no = 2;
  string country_code = 3;
  string caller_name = 4;
  string caller_country_code = 5;
}

// Message for SMS Callback Context
message SmsbackContext {
  string contact_name = 1;
  string to_sms = 2;
  string from_sms = 3;
  string to_country_code = 4;
  string from_country_code = 5;
}

message ActionType {
  int64 action_type_id = 1 [jstype = JS_STRING];
  string action_name = 2;
}

// Message for EMAIL Callback Context
message EmailbackContext {
  string contact_name = 1;
  string to_email = 2;
  string from_email = 3;
}

// Metadata - Contains a key value pair of strings, Will have metadata of an agent conversations
message Metadata {
  string name = 1;
  string value = 2;
}

// Skills - Field for a skill set assigned to a ticket
message Skills {
  string skill_id = 1;
  // Mandatory = 0, Preferred = 1
  bool is_preferred = 2;
}

// Sla - Field for a sla set assigned to a ticket
message Sla {
  int64 condition_sid = 1 [jstype = JS_STRING];
  int64 sla_sid = 2 [jstype = JS_STRING];
  int64 sla_min = 3 [jstype = JS_STRING];
  Duration sla_duration = 4;
}

// Comment - Fields for Comment on a ticket, listing comments of a ticket (ViewComment)
message Comment {
  // The snowflake id of a comment row in ticket_comment.
  int64 comment_sid = 1 [jstype = JS_STRING];
  // The ticket reference where the comment was added.
  int64 ticket_sid = 2 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // The comment text
  string comment = 3;
  // commenter by id
  string created_by_id = 4; // used in creating comment
  // comment by name
  string created_by_name = 5;
  // created by date
  google.protobuf.Timestamp created_by_date = 6;
  // ticket_code
  string ticket_code = 7;
}

// CloseTicket - Fields for closing a Ticket
message CloseTicket {
  int64 ticket_sid = 1 [
    jstype = JS_STRING,
    deprecated = true
  ];
  int64 status = 2;
  // The comment text
  string comment = 3;
  // before status
  int64 from_status = 4;
  // commenter by id
  string created_by_id = 5; // used in creating comment
  // ticket_code
  string ticket_code = 6;
}

// ConfirmClose - Boolean response for closing a Ticket
message ConfirmClose {
  int64 status = 1;
}

//TicketProject - Fields for Project setting in ticketing system
message TicketProject {
  // Seq Id of project entry
  int64 ticket_project_id = 1 [jstype = JS_STRING];
  // Logged in user's Org
  string org_id = 2;
  // Seq Id of Project from Omni
  int64 project_sid = 3 [jstype = JS_STRING];
  // 3 to 5 letter User entered Project Code
  string project_code = 4;
  // Project Title as in omni
  string project_title = 5;
  // Indicates if Project is enabled in ticketing system
  bool is_active = 6;
  // Added ticket template ID & add in DB too
  repeated TemplateDescription template_desc = 7;
}

message TemplateDescription {
  int64 ticket_template_id = 1 [jstype = JS_STRING];
  string template_name = 2;
}

// TicketSla - Fields for sla on a ticket
message TicketSla {
  // The snowflake id of a comment row in ticket_comment.
  int64 sla_sid = 1 [jstype = JS_STRING];
  // The name.
  string name = 2;
  // The description text
  string description = 3;
  // interval
  int64 interval = 4;
  // Indicates sla is enable or disable
  int64 is_active = 5;
  Duration ticket_sla_duration = 6;
}

// SlaConditions - Condition Fields for sla on a ticket
message SlaConditions {
  // The snowflake id of a comment row in ticket_comment.
  int64 sla_condition_sid = 1 [jstype = JS_STRING];
  // The name.
  string sla_condition_name = 2;
}

// ReplyComment -
message ReplyComment {
  // The snowflake id of a comment row in ticket_comment.
  int64 comment_sid = 1 [jstype = JS_STRING];
  // The ticket reference where the comment was added.
  int64 ticket_sid = 2 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // The comment text
  string reply = 3;
  // commenter by id
  string created_by_id = 4; // used in creating comment
  google.protobuf.Timestamp created_by_date = 5;
  // ticket_code
  string ticket_code = 6;
}

// ConfirmReplyComment -
message ConfirmReplyComment {
  // boolean value to confirm edit comment
  bool is_created = 1;
}

// TicketAuditLog -
message TicketAuditLog {
  // ticket_audit_event_log_id
  string ticket_audit_event_log_id = 1;
  // Logged in user's Org
  string org_id = 2;
  // Logged event
  string event = 3;
  // ticket_sid
  int64 ticket_sid = 4 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // event_type
  string event_type = 5;
  // used in creating comment
  string created_by_id = 6;
  // created by date
  google.protobuf.Timestamp created_by_date = 7;
  // ticket_code
  string ticket_code = 8;
}

// EditTicket - Fields for Edit Ticket , listing attributes of a ticket which can be edited
message EditTicket {
  // The ticket reference where the comment was added.
  int64 ticket_sid = 1 [
    jstype = JS_STRING,
    deprecated = true
  ];
  // The comment text
  EditAttribute edit_value = 2;
  // ticket_code
  string ticket_code = 3;
  // ticket_action_id
  int64 ticket_action_id = 4;
}

message EditAttribute {
  // Column Descripter
  int64 col_desc = 1 [jstype = JS_STRING];
  string from_val = 2;
  string to_val = 3;
  bool is_edited = 4;
}
