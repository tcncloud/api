syntax = "proto3";

package api.commons.org;

import "api/commons/ana.proto";
import "api/commons/country.proto";
import "api/commons/enums.proto";
import "api/commons/lms.proto";
import "api/commons/org.proto";
import "api/commons/org_preferences.proto";
import "google/protobuf/timestamp.proto";

//
// General tab preferences.
//

// General preferences controlling organization properties.
message OrganizationPreferences {
  // Org ID.
  string org_id = 1;

  // Organization's default country.
  api.commons.Country default_country = 10;
  // Operating time zone of organization.
  api.commons.TimeZone time_zone = 11;
  // Display language in Backoffice for users of the organization.
  api.commons.DisplayLanguage display_language = 12;
  // Organization's locale preferences.
  api.commons.LocalePreferences locale_preferences = 13;
}

// Preferences controlling direct agent properties.
message AgentPreferences {
  // Org ID.
  string org_id = 1;

  // Default agent dial-in number.
  string default_agent_dial_in = 10;
  // PBX dial extension length, between 3 to 9 digits long.
  int32 pbx_extension_length = 11;
  // Default agent softphone input volume, 0-100%.
  int32 default_softphone_volume_in = 12;
  // Default agent softphone output volume, 0-100%.
  int32 default_softphone_volume_out = 13;
  // List of agent dial-in numbers defined by regional skunk config.
  repeated string config_dial_in_numbers = 14;
  // List of customized client-defined dial-in numbers.
  repeated string client_dial_in_numbers = 15;
  // Allows agent to use privacy headers on the manual dial caller ID.
  bool manual_dial_caller_id_privacy = 16;
  // The default/initial setting for caller ID privacy.
  bool use_manual_dial_caller_id_privacy = 17;
}

// Preferences for contact lists.
message ContactPreferences {
  // Org ID.
  string org_id = 1;

  // Default import format, either custom of standardized.
  ImportFormat default_contact_import_format = 10;
  // Whether the selected contact import format preference is used.
  bool use_contact_import_format = 11;
  // Default area code, either custom or predefined field.
  ContactAreaCode default_contact_area_code = 12;
  // Whether the contact area code is enabled.
  bool use_contact_area_code = 13;
  // Default absent numbers handling; false to keep (default) or true to
  // discard recording.
  bool discard_record_default_absent_numbers_handling = 14;
  // Whether contacts import randomization is enabled.
  bool default_contacts_import_randomization = 15;
  // The contact field to use as the default in emails.
  string default_email_column = 16;
  // How duplicate contact numbers are handled by default.
  api.commons.DefaultDuplicateHandling default_duplicate_handling = 17;
}

// Contact import template type.
message ImportFormat {
  oneof format {
    // Import format enum choice.
    api.commons.StandardImportFormat standard = 1;
    // Client-defined import format.
    CustomImportFormat custom = 2;
  }
}

// Contact import format properties.
message CustomImportFormat {
  // Contact import template sid.
  int64 id = 1;
  // Import format name.
  string name = 2;
}

// Contact area code type.
message ContactAreaCode {
  oneof area_code {
    // Contact field description with ID and name.
    ContactFieldDescription cfd = 1;
    // Client-defined area code number.
    int32 custom = 2;
  }
}

// Contact field description information.
message ContactFieldDescription {
  // Contact field description sid.
  int64 id = 1;
  // Contact field name.
  string field_name = 2;
  // Whether this field holds a phone number.
  bool is_phone = 3;
  // Special formatting.
  string display_format_string = 4;
}

// Preferences for controlling the organization's authentication properties.
message AuthenticationPreferences {
  // Org ID.
  string org_id = 1;

  // Use IP based authorization.
  bool authorization_via_ip = 10;
  // List of whitelisted IPs.
  repeated string allowed_ips = 11;
  // Agent API key.
  string agent_api_key = 12;
  // Whether or not two factor authentication is enabled.
  bool enable_2fa = 13;
  // Whether or not to block login from users without a verified email.
  // This option is only used if two factor authentication is enabled.
  bool block_unverified_users = 14;
  // Contains the settings needed to set up email mfa for an organization.
  EmailMfaSettings email_mfa_settings = 15;
  // Contains the settings needed to set up a duo mfa client for an organization.
  // The duo client secret is not included here - it only exists on the update api.
  DuoMfaSettings duo_mfa_settings = 16;
  // Org enables the ability to set the password reset interval
  bool allow_force_password_reset_interval = 17;
  // An interval in the form of days for users in the org to reset passwords
  int32 password_reset_day_interval = 18;
  // Use IP based authorization per user.
  bool user_authorization_via_ip = 19;

  // A message containing the settings needed to set up a duo mfa client for an organization.
  // The duo client secret is not included here - it only exists on the update api.
  message DuoMfaSettings {
    string duo_client_id = 1;
    string duo_api_host = 2;
    bool enabled = 3;
  }

  // A message containing the settings needed for email mfa for an organization.
  message EmailMfaSettings {
    bool enabled = 1;
  }
}

// Preferences for web-hook push URLs.
message WebhookPreferences {
  // Org ID.
  string org_id = 1;

  // Whether push URLs are enabled.
  bool push_urls_enabled = 10;
  // Call result of the push URL.
  string call_result_push_url = 11;
  // Agent response of the push URL.
  string agent_response_push_url = 12;
}

//
// Manager tab preferences.
//

// Preferences for agent dashboard controls.
message DashboardPreferences {
  // Org ID.
  string org_id = 1;

  // Default agent info view; false for icon display, true for table view.
  bool default_info_view = 10;
  // Default agent inclusion, true to include all agents.
  bool default_table_inclusion = 11;
  // Default agent grouping, true to group by hunt groups.
  bool default_info_grouping = 12;
  // Default agent icon size, false for large icons.
  bool default_small_icon = 13;
  // Default agent sort direction, false to sort by ascending.
  bool default_descending_sort = 14;
  // SID for the agent dashboard table template.
  int64 table_template_sid = 15;
  // Which call types are enabled in the agents dashboard.
  IncludedCallTypes default_call_types = 16;
  // Agent dashboard order-by parameter.
  api.commons.AgentInfoSortBy default_info_sort_by_value = 17;
  // Controls hunt-group and agent barge-in status parameters.
  BargeInFiltering default_barge_in_filtering = 18;
}

// Included call types.
message IncludedCallTypes {
  // Outbound calls.
  bool outbound = 1;
  // Inbound calls.
  bool inbound = 2;
  // Manual-dial calls.
  bool manual_dial = 3;
  // Preview-dial calls.
  bool preview_dial = 4;
}

// Barge-in filtering properties.
message BargeInFiltering {
  // Hunt group settings.
  HuntGroup hunt_group = 1;
  // Agent status.
  AgentStatus agent_status = 2;

  message HuntGroup {
    // Use any huntgroup (no filtering).
    bool any = 1;
    // Specific hunt group SID.
    int64 hunt_group_sid = 2;
  }

  message AgentStatus {
    // Use any status (no filtering).
    bool any = 1;
    // Agent waiting.
    bool waiting = 2;
    // Agent on call.
    bool on_call = 3;
    // Agent wrap-up.
    bool wrap_up = 4;
    // Agent paused.
    bool paused = 5;
    // Agent transferring call.
    bool transfer = 6;
    // Agent previewing call.
    bool preview = 7;
    // Agent manual-dial.
    bool manual = 8;
    // Agent PBX.
    bool pbx = 9;
    // Agent on intercom.
    bool intercom = 10;
  }
}

// Preferences for controlling agent queue and hold table settings.
message DashboardQueuePreferences {
  // Org ID.
  string org_id = 1;

  // Default queue/hold table view; false for icon view, true for table view.
  bool default_info_view = 10;
  // Default queue/hold table grouping; false for no grouping, true for group
  // by queue type.
  bool default_info_grouping = 11;
  // Default table icon size; true for small, false for large.
  bool default_small_icon = 12;
  // Default table sort direction; false for descending, true for ascending.
  bool default_descending_sort = 13;
  // Default skills filter; holds a regional sid pointing to the filter in
  // the xml_client_property table.
  int64 default_agent_skills_filter = 14;
  // Default table template. holds a regional sid pointing to the filter in
  // the xml_client_property table.
  int64 default_info_table_template = 15;
  // Default queue/hold info sort-by value.
  api.commons.QueueInfoSortBy default_info_sort_by_value = 16;
}

//
// Campaign tab preferences.
//

// Preferences for phone dial options, call ID, and other call properties.
message PhonePreferences {
  // Org ID.
  string org_id = 1;

  // Determines whether broadcasts may be sent as Preview Dial.
  bool agent_preview_dialing = 10;
  // The number of seconds to allow ringing to a 3rd party.
  int32 default_ring_length_threshold = 11;
  // Determines whether the setting may be changed while scheduling.
  bool display_ring_length_threshold = 12;
  // Determines wheter the setting may be show/edited while scheduling.
  bool show_caller_id = 13;
  // Determines whether to use Caller ID by default.
  bool default_use_caller_id = 14;
  // Determines whether broadcast templates may set to record linkbacks
  // individually.
  bool override_linkback_recording = 15;
  // The 'sid' of the Caller ID field description to use as default.
  int64 caller_id_cfd_sid = 16;
  // The dial order of a contact record, default 'First Number Only'.
  DialOrder default_dial_order = 17;
  // Which type of answering machine detection to use.
  api.commons.AnsweringMachineDetection answering_machine_detection = 18;
  // Determines whether linkback recording is enabled.
  bool linkback_recording = 19;
}

// Dial order holds either a type enum, or one or more contact field
// description fields for custom order.
message DialOrder {
  oneof type {
    // Standard order enum, (CUSTOM_DIAL_ORDER should not be set here but
    // indicated by setting a CustomDialOrder below).
    api.commons.DialOrderType standard = 1;
    // Defines a "Custom Order" using one or more contact field
    // descriptions.
    CustomDialOrder custom = 2;
  }
}

// Custom dial order fields holds one or more contact field descriptions to
// indicate which fields in a contact record, and the order.
message CustomDialOrder {
  // One or more contact field descriptions.
  repeated DialOrderField dial_order_fields = 1;
}

// Dial order field holds the ID for saving into preferences and the name
// for display.
message DialOrderField {
  // Contact field description SID.
  int64 cfd_sid = 1;
  // The field name, for display.
  string field_name = 2;
}

// Preferences for natural language compliance campaign settings.
message CompliancePreferences {
  // Org ID.
  string org_id = 1;

  // Whether after-hours calls are displayed in campaigns.
  bool display_after_hours_calls = 10;
  // Enable/disable after-hours calls in campaigns.
  bool after_hours_calls = 11;
  // Whether the default natural compliance rule set is displayed.
  bool display_natural_compliance = 12;
  // Enable using the default natural compliance rule set.
  bool use_natural_compliance = 13;
  // Compliance rule set to use by default (UUID of set).
  string default_compliance_rule_set = 14;
  // Whether cell phone scrub from campaign view.
  bool display_cell_phone_scrub = 15;
  // Enable/disable to the ability scrub cell phone numbers.
  bool cell_phone_scrub = 16;
  // Whether schedule rules are displayed in campaigns.
  bool display_schedule_rules = 17;
  // Enable the use of the default schedule rules.
  bool use_schedule_rules = 18;
  // Schedule rule to use by default.
  ScheduleRuleField default_schedule_rule = 19;
  // Whether ZIP code scrubbing is enabled.
  bool do_zip_code_scrub = 20;
  // Field for ZIP/postal code scrubbing to use.
  ZipCodeField zip_code_scrub = 21;
  // Default email compliance list.
  string default_email_compliance_list = 22;
  // Default sms compliance list.
  string default_sms_compliance_list = 23;
}

// Compliance schedule rule field properties.
message ScheduleRuleField {
  // The schdeulde rule SID.
  int64 rule_id = 1;
  // The rule name.
  string name = 2;
}

// ZIP/postal code scrubbing properties.
message ZipCodeField {
  // Contact field description SID.
  int64 cfd_sid = 1;
  // The name of the field.
  string field_name = 2;
}

// Preferences for editing templates and broadcast scheduling properties.
message BroadcastPreferences {
  // Org ID.
  string org_id = 1;

  // Whether the 'Dial List Penetration Strategy' property in templates and
  // broadcast scheduling is displayed.
  bool display_list_penetration_strategy = 10;
  // List penetration strategy to give priority to dialing each number in a
  // single record before dialing from other records; false for depth first,
  // true for breadth first search.
  bool dial_list_penetration_strategy = 11;
  // Display the 'Follow the Sun' property in templates and broadcasts.
  bool display_follow_the_sun = 12;
  // Whether broadcasts follow the sun (prioritized east to west).
  bool follow_the_sun = 13;
  // Whether to hide the terminator select menu in the standard template
  // wizard and include only 'Connected, Live, and Machine' options in the
  // layered template wizard.
  bool sequence_terminator_override = 14;
  // Broadcast scheduling template ordering default value.
  api.commons.BroadcastTemplateOrdering broadcast_template_ordering = 15;
  // Whether the default broadcast start time is used.
  bool start_time_enabled = 16;
  // Default broadcast start time.
  BroadcastTime default_start_time = 17;
  // Whether the default broadcast stop time is used.
  bool stop_time_enabled = 18;
  // Default broadcast stop time.
  BroadcastTime default_stop_time = 19;
}

// Broadcast start/stop time properties.
message BroadcastTime {
  // Hour of the day (0-23).
  int32 hours = 1;
  // Minute of the hour (0-59).
  int32 minutes = 2;
  // Time zone.
  api.commons.TimeZone timezone = 3;
}

// Preferences for editing campaign scheduling properties.
message SchedulePreferences {
  // Org ID.
  string org_id = 1;

  // Whether to display the 'Schedule By Time Zone' setting.
  bool display_schedule_by_time_zone = 10;
  // Whether to schedule by time zone.
  bool use_schedule_by_time_zone = 11;
  // Scope to limit your time zone schedules by.
  api.commons.ScheduleByTimeZoneScope schedule_by_time_zone_scope = 12;
  // Whether to display the 'Schedule As Paused' setting.
  bool display_schedule_as_paused = 13;
  // Toggle for scheduling as running or schedule as paused.
  bool schedule_as_paused = 14;
  // Threshold percentage to trigger a linked broadcast.
  int64 default_completion_threshold = 15;
  // Whether to display 'Campaign Linking' in campaign options.
  bool display_campaign_linking = 16;
  // Whether to use campaign linking as the default.
  bool use_campaign_linking = 17;
  // Campaign links map of properties, id/name as key, description as value.
  map<string, string> campaign_links = 18;
  // Default campaign link ID.
  string default_campaign_link_id = 19;
  // Whether user canceled campaigns can be resent in the organization.
  bool resend_cancelled_campaigns = 20;
}

// Preferences for email and SMS management.
message EmailSmsPreferences {
  // Org ID.
  string org_id = 1;

  // Whether to use custom unsubscribe links (all email templates must contain
  // one if enabled).
  bool use_custom_links = 10;
  // Whether the client acknowledges that they are responsible for opt outs.
  bool client_acknowledgement = 11;
  // Return email addresses that will be available in broadcasts.
  repeated string email_from_addresses = 12;
}

//
// Business Intelligence & Reports tab preferences.
//

// Preferences for business intelligence settings/controls in analytics.
message BusinessPreferences {
  // Org ID.
  string org_id = 1;

  // Number of weeks of past data that are accessible.
  int32 weeks_of_data = 10;
  // Default time zone for business intelligence.
  api.commons.AnaTimeZone time_zone = 11;
  // Whether to allow multi-client access.
  bool multi_client_access = 12;
  // Enable/disable of custom visualizations in BI.
  bool custom_visualizations = 13;
  // Time filter for custom dashboard and visualizations.
  string time_filter = 14;
}

// Preferences for scorecards management and evaluation.
message ScorecardsPreferences {
  // Org ID.
  string org_id = 1;

  // The percentage of randomized calls shown to the user for evaluation.
  // Must be between 1-100.
  uint32 call_sample_percentage = 2;

  // Maximum number of evaluations per user, per category,
  // over the given time interval
  uint32 max_user_evaluations = 3;

  // The time interval over which calls are listed for scoring.
  Scorecards.EvaluationInterval evaluation_interval = 4;
}

// Scorecards properties.
message Scorecards {
  // EvaluationsInterval enumerates common time periods for evaluations.
  enum EvaluationInterval {
    EVALUATION_INTERVAL_DAY_UNSPECIFIED = 0;
    EVALUATION_INTERVAL_WEEK = 1;
    EVALUATION_INTERVAL_MONTH = 2;
  }
}

// Preferences for voice analytics. Primarily consumed and interpreted by
// localmixer when mixing and transcribing call recordings.
message VoiceAnalyticsPreferences {
  // Org ID.
  string org_id = 1;

  // Optional. When enabled call recordings will be transcribed and archived
  // by localmixer in voice analytics.
  bool enabled = 2;

  // Optional. List of redactions to be performed, when voice analytics is
  // enabled, on each call recording and transcript.
  repeated VoiceAnalytics.Redact redact = 3;

  // Optional. Flagging transcript notification preferences.
  VoiceAnalytics.Notify notify = 4;

  // Optional. Billing report notification preferences.
  VoiceAnalytics.Notify billing_notify = 5;

  // Optional. Number format for transcript dispositions.
  string number_format = 6;

  // Optional. Will eventually be deprecated. When voice analytics is enabled
  // and this is true all cardinal numbers in each call recording and
  // transcript will be redacted.
  bool redact_all_digits = 10;

  // Required. Minimum milliseconds of silence to occur before considered to
  // be silence by voice analytics.
  uint32 silence_threshold = 100;

  // Required. Minimum milliseconds of talk over to occur before considered
  // to be talk over by voice analytics.
  uint32 talk_over_threshold = 200;
}

// Namespace for voice analytics messages.
message VoiceAnalytics {
  message Redact {
    oneof where {
      // Optional. Redact numbers.
      Number number = 1;
    }
  }

  message Number {
    // Optional. The kind of number to redact.
    Kind kind = 1;

    // Optional. When value is non zero only numbers composed of at least
    // `min_consecutive` digits will be redacted. For example, when the
    // transcript contains the number `one two three four five six`
    // redaction will not occur when `min_consecutive` is greater than 6.
    uint32 min_consecutive = 2;

    // Optional. When value is non zero only numbers composed of at most
    // `max_consecutive` digits will be redacted. For example, when the
    // transcript contains the number `one two three four five six`
    // redaction will not occur when `max_consecutive` is less than 6.
    uint32 max_consecutive = 3;

    // slop is the number of extra words that can be in between digits and
    // still count as a number. For example: slop of 2 with min_consecutive
    // 3 would allow "one uh two and three" to count as a number.
    uint32 slop = 4;

    enum Kind {
      KIND_CARDINAL_UNSPECIFIED = 0; // Cardinal number
      KIND_ORDINAL = 1; // Ordinal number
      KIND_ANY = 2; // Any number
    }
  }

  message Notify {
    // Optional. Cron pattern determining notification frequency. Defaults
    // to every 15 minutes when not specified.
    string cron = 1;
  }
}

// Preferences for automated report jobs end-of-day delivery times.
message EndOfDayPreferences {
  // Org ID.
  string org_id = 1;

  // Delivery time for reports on Monday.
  int32 eod_monday = 10;
  // Delivery time for reports on Tuesday.
  int32 eod_tuesday = 11;
  // Delivery time for reports on Wednesday.
  int32 eod_wednesday = 12;
  // Delivery time for reports on Thursday.
  int32 eod_thursday = 13;
  // Delivery time for reports on Friday.
  int32 eod_friday = 14;
  // Delivery time for reports on Saturday.
  int32 eod_saturday = 15;
  // Delivery time for reports on Sunday.
  int32 eod_sunday = 16;
}

// Preferences for filters in reports and broadcasts.
message FilterPreferences {
  // Org ID.
  string org_id = 1;

  // Default filtering for automated reports.
  ReportFilter default_auto_report_filter = 10;
  // Whether to send auto-reports even if they are empty.
  bool send_empty_auto_reports = 11;
  // Whether or not to display the setting in the 'Resend' window.
  bool display_broadcast_resend_filter = 12;
  // Determines which contact records will be included in the new broadcast.
  ReportFilter default_broadcast_resend_filter = 13;
}

// Report filter properties.
message ReportFilter {
  oneof choice {
    // Standard report filter enum choice.
    api.commons.StandardReportFilter standard = 1;
    // Custom report filter xml property SID.
    int64 custom = 2;
  }
}

// Preferences for audio recording properties.
message RecordingPreferences {
  // Org ID.
  string org_id = 1;

  // Whether to use custom recordings file name convention.
  bool convention_enabled = 10;
  // File name convention for recording files.
  RecordingsFileNamingConvention file_name_convention = 11;
  // Whether to use custom recordings file name convention for zip.
  bool zip_convention_enabled = 12;
  // File name convention for archived/compressed zip recording files.
  RecordingsZipFileNamingConvention zip_file_name_convention = 13;
  // Recording export file type (.wav or .mp3).
  api.commons.RecordingFileType export_file_type = 14;
}

// Recording file naming convention properties (per call type).
message RecordingsFileNamingConvention {
  // XML client property SID.
  int64 xml_client_property_sid = 1;
  // Convention for inbound call recordings.
  FileNamingConvention inbound = 2;
  // Convention for manual-dial call recordings.
  FileNamingConvention manual = 3;
  // Convention for outbound call recordings.
  FileNamingConvention outbound = 4;
  // Convention for preview-dial call recordings.
  FileNamingConvention preview = 5;
}

// Recording file naming convention properties for compressed call recordings.
message RecordingsZipFileNamingConvention {
  // XML client property SID.
  int64 xml_client_property_sid = 1;
  // Convention for inbound call recordings.
  FileNamingConvention inbound = 2;
  // Convention for manual call recordings.
  FileNamingConvention manual = 3;
  // Convention for outbound call recordings.
  FileNamingConvention outbound = 4;
  // Convention for combined (all) call recordings.
  FileNamingConvention combined = 5;
}

// File naming convention properties containing name segments.
message FileNamingConvention {
  // List of file name segments.
  repeated FileNameSegment segments = 1;
}

// File name segment type and attributes.
message FileNameSegment {
  // Segment type.
  string segment_type = 1;
  // Format pattern.
  string format_pattern = 2;
  // Time zone ID (only required for certain segment types).
  string time_zone_id = 3;
}

//
// Customer Support preferences.
//

// Preferences for essential organization properties only to be used by
// account managers and customer support.
message AdminClientPreferences {
  // Org ID.
  string org_id = 1;

  // Enable the use of reserved carriers.
  bool use_reserved_carrier = 10;
  // List of reserved carriers.
  repeated string reserved_carriers = 11;
  // Email sendgrid API key.
  string email_key = 12;
  // Email sendgrid API key ID.
  string email_id = 13;
  // Email sendgrid API key name.
  string email_name = 14;
  // Whitelisted IPs for the organization.
  repeated string whitelist_ips = 15;
  // Whitelisted domain names for the organization.
  repeated string whitelist_domains = 16;
  // Scheduled callbacks service ID.
  string callbacks_service_id = 17;
  // Whether agent screen recording is enabled.
  bool agent_screen_recording = 18;
  // List of allowed countries for the organization.
  repeated api.commons.Country allowed_countries = 19;
}

// BusinessHours or operating hours.
message BusinessHours {
  reserved 2, 3, 5;
  reserved "id", "name", "ranges";
  // The organization id of the BusinessHours object.
  string org_id = 1;
  // The description of the BusinessHours object.
  string description = 4;
  // The id of the BusinessHours object.
  string business_hours_id = 6;
  // The name of the BusinessHours object.
  string business_hours_name = 7;
  // The timezone.
  api.commons.TimeZone timezone = 8;
  // A list of time intervals of the BusinessHours object.
  repeated DayInterval day_intervals = 9;
  // A timestamp of when the BusinessHours object was last updated.
  google.protobuf.Timestamp last_updated = 10;
}

// Range including start and end times.
message Range {
  option deprecated = true;
  int32 start_hour = 1;
  int32 start_minute = 2;
  int32 end_hour = 3;
  int32 end_minute = 4;
}

// TimeOfDay describes the time of day by hour and minute.
message TimeOfDay {
  // The hour of the day.
  int32 hour = 1;
  // The minute of the hour.
  int32 minute = 2;
}

// DayInterval describes a time interval of a given day.
message DayInterval {
  // The specified day of the interval.
  api.commons.Weekday.Enum day = 1;
  // The starting time of the interval.
  TimeOfDay start = 2;
  // The ending time of the interval.
  TimeOfDay end = 3;
}

// MonthDayDate enables custom named dates.
message MonthDayDate {
  // A name for this date.
  string date_name = 1;
  // Month of the year.
  api.commons.Month month = 2;
  // Day of the month.
  int32 day_of_month = 3;
}

// CountryHoliday holiday service name and country.
message CountryHoliday {
  // The name.
  string holiday_name = 1;
  // The country.
  api.commons.Country country = 2;
}

// ProgrammedDay may be a named date or a holiday.
message ProgrammedDay {
  // A date or holiday
  oneof DayType {
    // Named date.
    MonthDayDate day = 1;
    // Holiday service holiday.
    CountryHoliday holiday = 2;
  }
}

// ProgrammedDates a list of dates or holidays.
message ProgrammedDates {
  // ID of the Org related to this.
  string org_id = 1;
  // Unique ID.
  string programmed_dates_id = 2;
  // Name of the list.
  string programmed_dates_name = 3;
  // Description of the list.
  string description = 4;
  // The timezone.
  api.commons.TimeZone timezone = 5;
  // The list of dates or holidays.
  repeated ProgrammedDay days = 6;
  // When the list was last updated.
  google.protobuf.Timestamp last_updated = 7;
}

// ObservedHolidays a list of dates or holidays.
message ObservedHolidays {
  // ID of the Org related to this.
  string org_id = 1;
  // Unique ID.
  string observed_holidays_id = 2;
  // Name of the list.
  string observed_holidays_name = 3;
  // Description of the list.
  string description = 4;
  // The timezone.
  api.commons.TimeZone timezone = 5;
  // The list of dates or holidays.
  repeated ObservedHoliday days = 6;
  // When the list was last updated.
  google.protobuf.Timestamp last_updated = 7;
}

// ObservedHoliday may be a named date or a holiday.
message ObservedHoliday {
  // A date or holiday
  oneof DayType {
    // Named date.
    MonthDayDate day = 1;
    // Holiday service holiday.
    CountryHoliday holiday = 2;
  }
}
