syntax = "proto3";

package api.commons.org;

import "api/commons/country.proto";
import "api/commons/org.proto";
import "google/protobuf/timestamp.proto";

// HuntGroupSettings contains all of the hunt group settings.
message HuntGroupSettings {
  // General Hunt group settings.
  GeneralSettings general_settings = 1;
  // Communication compliance hunt group settings.
  CommunicationSettings communication_settings = 2;
  // Schedule callback Hunt group settings.
  CallbackSettings callback_settings = 3;
  // Preview dial Hunt group settings.
  PreviewDialSettings preview_dial_settings = 4;
  // Manual Dial hunt group settings.
  ManualDialSettings manual_dial_settings = 5;
  // Transfer Call hunt group settings.
  TransferCallSettings transfer_call_settings = 6;
  // Number History hunt group settings.
  NumberHistorySettings number_history_settings = 7;
}

// GeneralSettings is an entity containing a section of the hunt group settings
// for the hunt group manager.
message GeneralSettings {
  // MAIN SETTINGS

  // Displays browser window tab information. `UseAdvancedGatewayTitle`
  bool enable_agent_gateway_title_bar = 1;
  // Default agent phone number dialing into IVR system. `AgentDialInNumber`
  string default_agent_dial_in = 2;
  // Requires secondary confirmation to end call. `DisconnectConvirmation`
  bool require_end_call_confirmation = 3;
  // Enables authorization and whitelist by IP. `UseIpBasedAuth`
  bool enable_authorization_by_ip = 4;
  // Whitelisted IPs. `AllowedIps`
  repeated string authorized_ip_addresses = 5;

  // AGENT PAUSE SETTINGS

  // Initial agent status. `Initial Agent Status`
  api.commons.InitialAgentStatus initial_agent_status = 100;
  // Enable agents to pause calls. `Allow Agent Pause`
  bool enable_agent_pause = 101;
  // Pause option sets per hunt group. `Use Agent Pause Codes`
  PauseOptionSet agent_pause_option_set = 102;
  // Default agent pause code. `Default Agent Pause Code`
  string default_agent_pause_option = 103;
  // Enable agents to switch between pause options. `Agent Pause Reset`
  bool enable_pause_option_reset = 104;

  // Pause option set properties.
  message PauseOptionSet {
    // Whether pause option sets will be enabled.
    bool enabled = 1;
    // The sid of the agent pause code set.
    // xml_client_property_sid where property_key = 'Agent Pause Codes'
    int64 set_sid = 2;
  }

  // VOICE/CALL RECORDING SETTINGS

  // Display recording indicator. `Display Recording Indicator`
  bool display_recording_indicator = 200;
  // Enable pausing of agent call recording. `Enable Recording Pause`
  bool enable_call_recording_pause = 201;
  // Require call recording pause confirmation. `Recording Pause Confirmation`
  bool call_recording_pause_confirmation = 202;
  // Call recording delay in seconds. `Recording Delay`
  int64 call_recording_delay = 203;
  // Automatically pauses recording when starting hold.
  // `Pause Recording on Hold`
  bool enable_pause_recording_on_hold = 204;

  // SCREEN RECORDING SETTINGS

  // Enable envision agent screen recording. `Use Agent Screen Recording`
  bool enable_envision_screen_recording = 300;

  // HOLD SETTINGS

  // Enable agent simple hold. `Allow Agent Hold`
  bool enable_agent_simple_hold = 400;
  // Enable agent multi-accept hold. `Allow Agent Hold`
  bool enable_agent_multi_accept = 401;
  // Automatically pause agent after multi-accept hold. `AutoPauseOnMultiHold`
  bool pause_agent_after_multi_accept = 402;
  // Agent hold queue monitoring.
  HoldQueueMonitoring hold_queue_monitoring = 403;

  // Hold queue monitoring options.
  message HoldQueueMonitoring {
    // Whether hold queue monitoring is enabled. `Hold Queue Monitoring`
    bool enabled = 1;
    // Agent routing. `HQM Agent Routing`
    api.commons.AgentRouting agent_routing = 2;
    // Hunt group required to route to. `HQM Required Hunt Group Routing`
    int64 required_hunt_group_routing = 3;
    // Hunt group preferred to route to. `HQM Preferred Hunt Group Routing`
    int64 preferred_hunt_group_routing = 4;
  }

  // DISPLAY SETTINGS

  // Whether to display the machine-deliver button on the UI.
  bool display_machine_deliver = 500;
  // Whether to display the call's linkback Hunt Group in the data panel.
  bool display_linkback_hunt_group = 501;
  // Whether to display SIP header data in the data panel.
  bool display_sip_header_data = 502;
  // Whether to display the IVR navigation (Keys Pressed) in the data panel.
  bool display_ivr_navigation_keys = 503;
  // Whether to display Data Collect data in the data panel.
  bool display_data_collect_data = 504;
  // Whether to display the Data Dip'ed data in the data panel.
  DataDipDataDisplay display_data_dipped_data = 505;
  // Payment Integration data display
  IntegrationDataDisplay integration_data_display = 506;
  // Whether to display the Journey Integration returned data in the data panel.
  JourneyDataDisplay journey_data_display = 507;
  // Whether and what call history statistics to display in the UI.
  api.commons.AgentCallHistoryScope agent_call_history_scope = 508;
  // Agent Login Gui Statistics display and template
  AgentLoginGuiStatisticsDisplay agent_login_gui_statistics_display = 509;
  // Phone / Postal Metadata display
  PhoneZipMetadataDisplay phone_zip_metadata_display = 510;
  // Whether to display the call and agent skills to the agent ` Display Skills`
  bool display_skills = 511;
  // Whether to display Web Links to the agent ` Display Web Links`
  bool display_web_links = 512;

  // Data Dip data display options.
  message DataDipDataDisplay {
    // Whether to display the Data Dipped data in the data panel.
    bool display_data_dip_data = 1;
    // The keys of the Data Dipped data key/value pairs.
    repeated string data_dip_display_keys = 2;
  }

  // Payment Integration data display options.
  message IntegrationDataDisplay {
    // Whether to display the Payment Integration returned data in the
    // data panel.
    bool display_integration_data = 1;
    // The keys of the Payment Integration data key/value pairs.
    repeated string integration_display_keys = 2;
  }

  // Journey Integration data display options.
  message JourneyDataDisplay {
    // Whether to display the Journey Integration returned data in the
    // data panel.
    bool display_journey_data = 1;
    // The keys of the Journey Integration data key/value pairs.
    repeated string journey_display_keys = 2;
  }

  // Agent Login GUI Statistics display and template.
  message AgentLoginGuiStatisticsDisplay {
    // Whether to allow the display of general agent statistics to the UI.
    bool display_agent_login_gui_statistics = 1;
    // The ID (XML Client Property Sid) of the agent login gui statistics
    // template.
    int64 agent_login_gui_statistics_template = 2;
  }

  // Phone / Postal Metadata display options.
  message PhoneZipMetadataDisplay {
    // Whether to display the Phone / Postal Metadata related to the call's
    // phone number.
    bool display_phone_zip_metadata = 1;
    // The keys of the Phone / Postal Metadata for display in the UI.
    repeated api.commons.PhonePostalDisplayOptions phone_zip_metadata_keys = 2;
  }

  // REASSIGNMENT SETTINGS

  // Enable agent to reassign hunt groups. `Agent Skills Reassignment`
  bool enable_agent_hunt_group_reassignment = 600;
  // Limited available hunt groups. `Hunt Group Reassignment Disallowed`
  DisallowedHuntGroups disallowed_hunt_groups = 601;

  // Available hunt group options.
  message DisallowedHuntGroups {
    // Whether to limit available hunt groups for agents.
    bool enabled = 1;
    // The list of hunt groups that are available to choose from.
    repeated int64 hunt_groups = 2;
  }

  // MANUAL APPROVAL SETTINGS

  // Enable manual approval of calls. `Allow Manual Approval`
  bool enable_manual_approval_of_calls = 700;
  // Require manual approval number confirmation. `MAC Number Confirmation`
  bool require_manual_approval_number = 701;
  // Enable manual approval of SMS. `Allow Manual Approval For Messaging`
  bool enable_manual_approval_of_sms = 702;
  // Require manual approval number confirmation for SMS.
  // `MAM Number Confirmation`
  bool require_manual_approval_number_sms = 703;
  // Control whether the reject option is available to the approvers.
  bool disable_reject_option_for_approvers = 704;

  // MISCELLANEOUS SETTINGS

  // Alphanumeric keypad properties. `Alphanumeric Keypad`
  AlphanumericKeypad alphanumeric_keypad = 800;
  // Enable queued call desktop notifications. `Allow Queued Call Notifications`
  bool enable_call_desktop_notifications = 801;
  // Inbound natural language compliance metadata.
  // `Optional Inbound Compliance Metadata`
  // `Required Inbound Compliance Metadata`
  InboundComplianceMetadata inbound_compliance_metadata = 802;
  // Whether to allow the agent to intercom with other agents.
  // `AllowAgentIntercom`
  bool enable_agent_intercom = 803;
  // Enables the delivery of incoming calls to the agent
  // depending on the dial status prior to them clicking "Dial".
  PrepareStateCallDelivery prepare_state_call_delivery = 804;

  // Alphanumeric keypad options.
  message AlphanumericKeypad {
    // Whether keypad delimiting is enabled.
    bool enabled = 1;
    // Character to delimit with.
    api.commons.AlphanumericKeypadDelimiter delimiter = 2;
  }

  // Inbound natural compiance metadata options.
  message InboundComplianceMetadata {
    // Whether compliance metadata is used.
    bool enabled = 1;
    // List of optional contact field description metadata.
    // List of contact_field_description_sids
    repeated int64 optional_data = 2;
    // List of required contact field description metadata.
    // List of contact_field_description_sids
    repeated int64 required_data = 3;
  }

  // PrepareStateCallDelivery options (the dial modes).
  message PrepareStateCallDelivery {
    bool manual_dial = 1;
    bool preview_dial = 2;
  }
}

// HuntGroupType represents the type of a hunt group.
enum HuntGroupType {
  // 0 explicitly means unspecified or invalid; equivalent to unconnected.
  HUNT_GROUP_TYPE_UNSPECIFIED = 0;
  // Connected hunt group.
  HUNT_GROUP_TYPE_CONNECTED = 1;
  // Softphone hunt group.
  HUNT_GROUP_TYPE_SOFTPHONE = 2;
}

// HuntGroupDetails is the entity for hunt group details.
message HuntGroupDetails {
  // The hunt group general details.
  GeneralDetails general_details = 1;
  // The hunt group client info display template details.
  ClientInfoDisplayTemplateDetails template_details = 2;
  // A list of hunt group web link details.
  repeated WebLinkDetails web_link_details = 3;
  // A list of hunt group trigger details.
  repeated TriggerDetails trigger_details = 4;
  // A list of hunt group integration link details.
  repeated IntegrationLinkDetails integration_link_details = 5;
  // The assigned script details.
  ScriptDetails script_details = 6;

  // GeneralDetails is the entity for hunt group general details.
  message GeneralDetails {
    // The hunt group name
    string name = 1;
    // The hunt group description.
    string description = 2;
    // The hunt group type.
    HuntGroupType type = 3;
    // The hunt group last modified date.
    google.protobuf.Timestamp modify_date = 4;
    // The number of agents belong to the hunt group.
    int64 agent_count = 5;
  }

  // ClientInfoDisplayTemplateDetails is the entity for hunt group client info display template details.
  message ClientInfoDisplayTemplateDetails {
    // The hunt group client info display template name.
    string name = 1;
    // The hunt group client info display template description.
    string description = 2;
    // Whether to display all fields in the hunt group client info display template.
    bool display_all_fields = 3;
    // The number of contact fields in the hunt group client info display template.
    int64 defined_field_count = 4;
  }

  // WebLinkDetails is the entity for hunt group web link details.
  message WebLinkDetails {
    // The hunt group web link name.
    string name = 1;
    // The hunt group web link description.
    string description = 2;
    // The hunt group web link base url.
    string base_url = 3;
    // The number of the hunt group web link parameters.
    int64 parameter_count = 4;
  }

  // TriggerDetails is the entity for hunt group trigger details.
  message TriggerDetails {
    // The hunt group trigger description.
    string description = 1;
    // The hunt group trigger agent status.
    AgentStatus status = 2;
    // The hunt group trigger duration.
    int64 duration = 3;
    // The hunt group trigger action.
    TriggerAction action = 4;
  }

  // IntegrationLinkDetails is the entity for hunt group integration link details.
  message IntegrationLinkDetails {
    // The hunt group integration link name.
    string name = 1;
    // The hunt group integration link description.
    string description = 2;
  }

  // ScriptDetails is the entity to describe the features of a script assigned to the hunt group.
  message ScriptDetails {
    // The sid of the script assigned to the hunt group.
    int64 script_sid = 1;
    // The name of the script.
    string name = 2;
    // The desciption of the script.
    string description = 3;
    // The number of acts that the script contains.
    int64 act_count = 4;
    // The number of dispositions that the script contains.
    int64 disposition_count = 5;
    // The number of verbiages that the script contains.
    int64 verbiage_count = 6;
  }
}

// CommunicationSettings is an entity containing the hunt group settings for the
// communication compliance section of the hunt group manager.
message CommunicationSettings {
  // MAIN SETTINGS

  // Enable the ability to add valuess from the compliance scrub list.
  // `doAllowAddDncl`
  bool enable_scrub_list_adding = 1;
  // Hunt group compliance scrub lists. `Hunt Group Compliance Scrub Lists`
  repeated string scrub_lists = 2;
  // Enable the ability to remove values from the compliance scrub lists.
  // `doAllowRemoveDncl`
  bool enable_scrub_list_removal = 3;
  // List of compliance scrub lists which can be removed.
  // `Hunt Group Compliance Scrub Lists Removal Allowed`
  repeated string scrub_lists_removal_allowed = 4;
  // Select compliance default country. `Default DNCL Country`
  api.commons.Country compliance_default_country = 5;
  // Display DNCL options in wrap up. `Display DNCL Options In Wrapup`
  bool display_options_in_wrapup = 6;

  // EXPIRATION SETTINGS

  // Default inbound scrub list expiration. `defaultIBCallDnclExpiration`
  ScrubListExpiration inbound_scrub_list_expiration = 100;
  // Default manual scrub list expiration. `defaultMDCallDnclExpiration`
  ScrubListExpiration manual_scrub_list_expiration = 101;
  // Default outbound scrub list expiration. `defaultOBCallExpiration`
  ScrubListExpiration outbound_scrub_list_expiration = 102;
  // Default preview scrub list expiration. `defaultPRCallDnclExpiration`
  ScrubListExpiration preview_scrub_list_expiration = 103;

  // Scrub list expiration properties.
  message ScrubListExpiration {
    // Default call DNCL/scrub list expiration time.
    api.commons.CommunicationExpiration default_expiration = 1;
    // Enable limiting scrub list expiration choices.
    bool limit_expiration = 2;
    // List of possible expiration times to choose from.
    repeated api.commons.CommunicationExpiration limited_expirations = 3;
  }

  // AUTO ADDITION SETTINGS

  // Automate manually dialed number scrub list. `Manual Dial Auto Dncl Add`
  bool automate_manually_dialed_scrub_list = 200;
  // Automate preview dialed number scrub list. `Preview Dial Auto Dncl Add`
  bool automate_preview_dialed_scrub_list = 201;
  // Automate response rules. `AgentDispositionConditionalDncl`
  AutomateResponseRules automate_response_rules = 202;
  // Enable automatic addition of call data to scrub lists.
  // `Call Data Scrub Lists Info`
  AutomateScrubListCallData automate_scrub_list_call_data = 203;

  // Automate response rules properties.
  message AutomateResponseRules {
    // Whether automated response rules are enabled.
    bool enabled = 1;
    // Sid associated with response rule.
    // xml_client_property_sid where property_key =
    // 'AgentDispositionConditionalDncl'
    int64 rule_sid = 2;
  }

  // Automate response rules properties.
  message AutomateScrubListCallData {
    // Whether automatic additional of call data to scrub lists is enabled.
    bool enabled = 1;
    // List of scrub list call data fields which will automatically be added.
    repeated ScrubListDataField scrub_list_data_fields = 2;

    // Scrub list data field properties.
    message ScrubListDataField {
      // Scrub list sid.
      string scrub_list = 1;
      // Call data field sid.
      int64 call_data_field = 2;
    }
  }
}

// CallbackSettings is an entity containing the hunt group settings for the
// scheduled callbacks section of the hunt group manager.
message CallbackSettings {
  // MAIN SETTINGS

  // Enable callback scheduling. `Allow Callback Scheduling`
  bool enable_callback_scheduling = 1;
  // Default callback routing. `Default Callback Routing`
  DefaultRouting default_callback_routing = 2;

  // Default callback routing properties.
  message DefaultRouting {
    // Default callback routing option (agent, skill set, none).
    api.commons.DefaultCallbackRouting routing_mode = 1;
    // Agent to callback to.
    int64 agent_sid = 2;
    // Agent skillsets to callback to.
    repeated int64 agent_skillsets = 3;
    // Hunt Groups selected by default
    repeated int64 hunt_group_sids = 4;
  }

  // Enable callback calling ` Allow Scheduled Callback Calling`
  bool enable_callback_calling = 3;
  // Enable automatic callback retrieval `Callbacks Retrieval Mode`
  bool enable_automatic_retrieval = 4;
  // Indicates whether and how to limit callback routing.
  // `Callback Routing Disallowed`
  CallbackRoutingDisallowed callback_routing_disallowed = 5;

  // Control which skills may be used when selecting routing.
  message CallbackRoutingDisallowed {
    // Indicates whether callback routing should be limited.
    bool use_routing_limiting = 1;
    // Prohibited Agent Sids
    repeated int64 agent_sids = 2;
    // Prohibited Hunt Group Sids
    repeated int64 hunt_group_sids = 3;
    // Prohibited agent skill sids
    repeated int64 agent_skill_sids = 4;
  }

  // Enable caller ID customization. 'Scheduled Callback Editable Caller ID'
  bool enable_customizable_caller_id = 6;
  // Default scheduled callback caller ID.
  // `Scheduled Callback Default Caller ID`
  string default_caller_id = 7;
  // Enable viewing the Scheduled Callback calendar.
  // `Allow Scheduled Callback Calendar`
  bool enable_callback_calendar = 8;
}

// PreviewDialSettings is an entity containing the hunt group settings for the
// Preview Dial section of the hunt group manager.
message PreviewDialSettings {
  // Enable cancelling of Preview Dialing.  `AllowPreviewDialCancel`
  bool enable_preview_dial_cancel = 1;
  // Enable automatic pausing when cancelling a Preview Dial call.
  // `AutoPauseOnPreviewDial`
  bool enable_auto_pause_on_cancel = 2;
  // Indicates when queued preview dial calls should no longer be presented
  // to agents.
  // `Preview Dial Call Time-out`
  int64 timeout_minutes = 3;
  // Indicates if agents must confirm numbers before calling.
  // `Preview Dial Confirmation`
  bool require_number_confirmation = 4;
  // The name of the Call Queue Configuration (folder name).
  // `PreviewQueueConfig`
  string preview_queue_config = 5;
}

// ManualDialSettings is an entity containing the hunt group settings for the
// Manual Dial section of the hunt group settings manager.
message ManualDialSettings {
  // Allow the agent to make manual dial calls.
  bool enable_manual_dial = 1;
  // ACD queue configuration folder name.
  string queue_configuration_name = 2;
  // The default setting for recording manual dial calls.
  HuntGroupOrgDefaultCustom default_call_recording = 3;
  // Determines whether to scrub cell phone calls.
  HuntGroupOrgDefaultCustom cell_phone_scrub = 4;
  // Determines whether to scrub calls by time zone.
  HuntGroupOrgDefaultCustom time_zone_restriction = 5;
  // Determines whether to allow or require collection of ZIP/postal
  // for compliance.
  ManualDialTimeZoneValidation time_zone_validation_postal_code = 6;
  // Use Natural Language Compliance and rule set.
  NaturalLanguageComplianceScrub natural_compliance_scrub = 7;
  // Allow agent to override scrub options
  ScrubOverride scrub_override = 8;
  // Allow toll-free white list for manual dial calls.
  bool enable_whitelist = 9;
  // The default selected country for outbound number.
  api.commons.Country default_outbound_country = 10;
  // Determines whether to display the country select menu to the agent.
  bool display_outbound_country_selection = 11;
  // Determines whether to display the outbound number phone book to the agent.
  bool display_outbound_number_phone_book = 12;
  // Indicates the default Country to use with the caller ID number.
  // `Manual Dial Default Caller ID Country`
  api.commons.Country default_caller_id_country = 13;
  // Determines whether to display the caller ID country select menu to
  // the agent.
  // `Manual Dial Display Caller ID Country Select`
  bool display_caller_id_country_selection = 14;
  // Determines whether to display the caller ID phone book to the agent.
  // `Manual Dial Display Phone Book`
  bool display_caller_id_phone_book = 15;
  // Determines whether the agent may customize/edit the caller ID.
  // `Manual Dial Editable Caller ID`
  bool enable_customizable_caller_id = 16;
  // Indicates the default number to use as the caller ID.
  // `Manual Dial Default Caller ID`
  DefaultCallerId default_caller_id = 17;
  // Determines whether to allow the use of caller ID buckets in the agent app.
  // `Manual Dial Caller Id Bucket Enabled`
  bool enable_caller_id_bucket = 18;
  // Indicates which caller ID bucket to use.
  // `Manual Dial Random Caller Id Bucket`
  int64 random_caller_id_bucket = 19;
  // Determines whether to automatically select a random caller ID.
  // `Manual Dial Random Caller Id Enabled`
  bool automate_random_caller_id = 20;
  // Determines whether to mask the caller ID from the agent.
  // `Mask Manual Dial Caller ID`
  bool enable_mask_caller_id = 21;
  // Determines whether to enable SIP addresses as an optional outbound
  // number and/or caller ID format.
  // `Enable SIP Address`
  bool enable_sip_address = 22;
  // Manual Dial natural language compliance metadata.
  // `Optional Inbound Compliance Metadata`
  // `Required Inbound Compliance Metadata`
  NaturalLanguageComplianceMetadata natural_language_compliance_metadata = 23;
  // Application scope; disabled, standard calls, scheduled callbacks or all.
  ManualDialDataDipScope data_dip_scope = 24;
  // The ID of the data dip config to execute.
  int64 data_dip_config_sid = 25;
  // The action to take if data dip execution fails.
  ManualDialDataDipHandling data_dip_result_handling = 26;
  // Map data dip values to manual dial call values.
  repeated DataDipIntegrationMapping data_dip_integration_mappings = 27;
  // The action to take if the integration mapping fails.
  ManualDialDataDipHandling data_dip_integration_handling = 28;
  // Control whether the reject option is available to the approvers.
  // Please use disable_reject_option_for_approvers under GeneralSettings.
  bool enable_reject_option_for_approvers = 29 [deprecated = true];

  // Allow the agent to override scrub settings.
  message ScrubOverride {
    // Allow the agent to override DNCL scrubbing.
    bool enable_dncl_override = 1;
    // Allow the agent to override cell phone scrubbing.
    bool enable_cell_scrub_override = 2;
    // Allow the agent to override the global time zone scrubbing.
    bool enable_time_zone_scrub_override = 3;
    // Allow the agent to override Natural Language Compliance scrubbing.
    bool natural_compliance_override = 4;
  }

  // DefaultCallerId: custom or "Agent Caller ID" and number (if needed).
  message DefaultCallerId {
    // Describes how the field is used; none, custom or agent caller ID.
    DefaultManualDialCallerId usage = 1;
    // The caller ID (if needed).
    string custom_caller_id = 2;
  }

  // Describes a mapping of return keys to manual dial values.
  message DataDipIntegrationMapping {
    // Mapping type; manual dial number, caller ID or field description.
    ManualDialDataDipIntegration mapping_type = 1;
    // The key of the data dipped data to map to the manual call data.
    string data_dip_return_key = 2;
    // The contact field description to map to when it is the type.
    int64 contact_field_description_sid = 3;
  }
}

// Use Natural Language Compliance and rule set ID.
message NaturalLanguageComplianceScrub {
  // Org default or enabled or disabled.
  HuntGroupOrgDefaultCustom compliance_scrub = 1;
  // The ID of the Natural Language Compliance rule set.
  string rule_set_id = 2;
}

// Manual Dial natural compiance metadata options.
message NaturalLanguageComplianceMetadata {
  // Whether compliance metadata is used.
  bool enabled = 1;
  // List of optional contact field description metadata.
  // List of contact_field_description_sids
  repeated int64 optional_data = 2;
  // List of required contact field description metadata.
  // List of contact_field_description_sids
  repeated int64 required_data = 3;
}

// Caller ID Bucket Data includes bucket name and the related XML property SID.
message CallerIdBucketData {
  // XML client property sid.
  int64 xml_client_property_sid = 1;
  // Name of the caller ID bucket.
  string bucket_name = 2;
}

// TransferCallSettings is an entity containing the hunt group settings for the
// Transfer Call section of the hunt group settings manager.
message TransferCallSettings {
  // Allow the agent to make transfer calls.
  bool enable_transfer = 1;
  // Allowed hand-off types for transfer calls.
  HandOffTypes hand_off_types = 2;
  // Indicates start, stop or keep current recording status on transfer.
  TransferRecordingStatus recording_status = 3;
  // Indicates type of allowed transfer types.
  TransferTypes transfer_types = 4;
  // Indicates whether or not to display.
  bool display_transfer_number_phone_book = 5;
  // Indicates whether to allow the agent to edit the transfer number.
  bool enable_transfer_number_editing = 6;
  // The default transfer number prepopulated in the text box.
  string default_transfer_number = 7;
  // Transfer numbers which will initiate recording the call.
  repeated string start_recording_numbers = 8;
  // Transfer numbers which will stop recording the call.
  repeated string stop_recording_numbers = 9;
  // The default country to use with the transfer number.
  api.commons.Country transfer_number_country = 10;
  // Indicate whether to display the country select menu.
  bool display_transfer_country_selection = 11;
  // Indicate whether to display the caller ID phone book.
  bool display_caller_id_phone_book = 12;
  // Indicates whether to allow the agent to edit the caller ID.
  bool enable_caller_id_editing = 13;
  // The default caller ID prepopulated in the text box.
  DefaultCallerId default_caller_id = 14;
  // The default country to use with the caller ID.
  api.commons.Country caller_id_country = 15;
  // Indicates whether to display the caller ID country select menu.
  bool display_caller_id_country_selection = 16;
  // Indicates whether to display agent transfer filtering to the agent.
  bool display_agent_transfer_filtering = 17;
  // Indicates whether to filter agents by default.
  bool default_agent_transfer_filtering = 18;
  // Indicates whether to limit transferring to agents in the same hunt group.
  bool enable_hunt_group_filtering = 19;
  // The name of the Requeue Transfer Queue Configuration.
  RequeueQueueConfiguration requeue_queue_config = 20;
  // Disallow specific agent skills for requeue transfer routing.
  RequeueTransferDisallowed requeue_transfer_disallowed = 21;
  // Disallow specific PBX extensions for PBX transfers.
  PbxTransferDisallowed pbx_transfer_disallowed = 22;
  // Allow agent to override scrub decisions.
  bool enable_scrub_override = 23;
  // Indicates whether to apply the whitelist to transfer call scrubbing.
  bool enable_whitelist = 24;
  // Whether and what NLC compliance rule to apply.
  NaturalLanguageComplianceScrub natural_compliance_scrub = 25;
  // Transfer call natural language compliance metadata.
  // `Optional Transfer Compliance Metadata`
  // `Required Transfer Compliance Metadata`
  NaturalLanguageComplianceMetadata natural_language_compliance_metadata = 26;

  // HandOffTypes indicates which Hand-off types the agent may use.
  message HandOffTypes {
    bool enable_conference = 1;
    bool enable_warm = 2;
    bool enable_cold = 3;
  }

  // TransferTypes indicates which transfer types the agent may use.
  message TransferTypes {
    bool enable_agent_transfer = 1;
    bool enable_open_transfer = 2;
    bool enable_requeue_transfer = 3;
    bool enable_pbx_extension_transfer = 4;
    bool enable_voicemail_transfer = 5;
  }

  // RequeueTransferDisallowed if enabled, prohibits skills/hunt groups.
  message RequeueTransferDisallowed {
    bool enable = 1;
    repeated int64 agent_skill_sids = 2;
    repeated int64 hunt_group_sids = 3;
  }

  // PbxTransferDisallowed if enabled, prohibits these extensions.
  message PbxTransferDisallowed {
    bool enable = 1;
    repeated string extensions = 2;
  }

  // RequeueQueueConfiguration indicates which config to use on transfer.
  message RequeueQueueConfiguration {
    RequeueTransferQueueConfig usage = 1;
    string custom_name = 2;
  }

  // DefaultCallerId indicates custom or 3rd party and number (if needed).
  message DefaultCallerId {
    DefaultTransferCallerId usage = 1;
    string custom_caller_id = 2;
  }
}

// NumberHistorySettings is an entity containing the hunt group settings for the
// Number History section of the hunt group settings manager.
message NumberHistorySettings {
  // Allow the agent to access number history search.
  bool enable_search = 1;
  // Allow the export of the number history report.
  bool enable_report_download = 2;
  // Allow the export of the number history related call recordings.
  bool enable_recordings_download = 3;
  // Allow the agent to edit number history related agent call responses.
  bool enable_agent_response_editing = 4;
}

// Sets of rules that manage automatically adding responses to the DNCL
message AgentResponseAutoRuleSet {
  // The ID of the ruleset
  int64 ruleset_sid = 1;
  // The name of the ruleset
  string name = 2;
  // The description of the ruleset
  string description = 3;
  // This country should be from the allowed list
  api.commons.Country country = 4;
  // List of Agent Call Responses with comparitors and durations
  repeated AutoResponseChoice responses = 5;
}

// An Agent Call Response with comparitors and duration
message AutoResponseChoice {
  // The name of the agent call response
  string agent_call_response = 1;
  // List of comparitors with duration
  repeated AgentResponseComparitors comparitors = 2;
}

// A list of agent entries and duration to use to determine addition to DNCL
message AgentResponseComparitors {
  // Value is a string option that will compare against the agent response
  string value = 1;
  // Expiration is expressed in number of hours
  int64 expiration = 2;
}

// A template used to describe a client info display
message ClientInfoDisplayTemplate {
  // The template sid of the client info display template
  string template_sid = 1 [deprecated = true];
  // The name of the client info display template
  string name = 2;
  // The description of the client info display template
  string description = 3;
  // Bool used to determine whether to show all fields in a client info display template
  bool display_all_fields = 4;
  // The dialed number field style of a client info display template
  DialedNumberFieldStyle dialed_number_field_style = 5;
  // A list of Contact Field Styles for a client info display template
  repeated ContactFieldStyle contact_field_styles = 6;
  // The template type
  TemplateCategory template_category = 7;
  // The sid of the client info display template
  int64 client_info_display_template_sid = 8;
  // The sid of the hunt group which the client info display template is associated with
  int64 hunt_group_sid = 9;
}

// FieldStyle describes a particular field within a client info display
message FieldStyle {
  // Text color of a field style
  string text_color = 1;
  // Background color of a field style
  string background_color = 2;
  // Allow the agent to copy this field style
  bool allow_agent_copy = 3;
}

// The ContactFieldStyle contains the description id
// and the field style for a particular contact field
message ContactFieldStyle {
  // The description id of the contact field style
  int64 description_id = 1;
  // The field style of the contact field
  FieldStyle field_style = 2;
}

// The DialedNumberFieldStyle contains the field style for Dialed Number Field
message DialedNumberFieldStyle {
  // The field style of the dialed number field
  FieldStyle field_style = 1;
  // Display the dialed number field to the agent
  bool display_to_agent = 2;
}

// Tempate category differentiates between template types
enum TemplateCategory {
  // 0 explicitly means unspecified or invalid.
  TEMPLATE_CATEGORY_UNSPECIFIED = 0;
  // 1 means a hunt group client info display template
  TEMPLATE_CATEGORY_HUNT_GROUP = 1;
  // 2 means a campaign client info display template
  TEMPLATE_CATEGORY_CAMPAIGN = 2;
}

// HuntGroupWithClientInfoTemplateData is the entity for a hunt group with its client info display template data.
message HuntGroupWithClientInfoTemplateData {
  // HuntGroup is the entity for a simplified hunt group details.
  message HuntGroup {
    // The hunt group sid.
    int64 client_sid = 1;
    // The hunt group name.
    int64 hunt_group_sid = 2;
    // The hunt group name.
    string hunt_group_name = 3;
  }

  // The hunt group details.
  HuntGroup hunt_group = 1;
  // The hunt group client info display template details.
  ClientInfoDisplayTemplate template = 2;
}

// A structure used for representing a web link
message WebLink {
  // The unique sid of a web link
  int64 web_link_sid = 1;
  // The name of the web link
  string name = 2;
  // The description of the web link
  string description = 3;
  // The link type
  WebLinkType link_type = 4;
  // The order position of the web link
  int64 order = 5;
  // The base url components of the web link
  repeated WebLinkComponent base_url = 6;
  // The web link parameters
  repeated WebLinkParameter parameters = 7;
}

// WebLinkType describes the type of a particular web link
enum WebLinkType {
  // 0 explicitly means unspecified or invalid.
  WEB_LINK_TYPE_UNSPECIFIED = 0;
  // Standard web link type
  WEB_LINK_STANDARD = 1;
  // Javascript web link type
  WEB_LINK_JAVASCRIPT = 2;
}

// WebLinkComponent contains the key type and string of a web link
message WebLinkComponent {
  // The component key type of the web link component
  WebLinkComponentKeyType key_type = 1;
  // The value of the web link component
  string value = 2;
}

// Enums to represent the WebLinkComponentKeyType
enum WebLinkComponentKeyType {
  // 0 explicitly means unspecified or invalid
  WEB_LINK_COMPONENT_KEY_TYPE_UNSPECIFIED = 0;
  // Static or plaintext type
  WEB_LINK_COMPONENT_KEY_TYPE_STATIC_TEXT = 1;
  // TTS Field type
  WEB_LINK_COMPONENT_KEY_TYPE_TTS_FIELD = 2;
  // Agent Info type
  WEB_LINK_COMPONENT_KEY_TYPE_AGENT_INFO = 3;
  // Data Dip type
  WEB_LINK_COMPONENT_KEY_TYPE_DATA_DIP = 4;
  // IVR Data type
  WEB_LINK_COMPONENT_KEY_TYPE_IVR_DATA = 5;
  // Data Collect type
  WEB_LINK_COMPONENT_KEY_TYPE_DATA_COLLECT = 6;
  // Phone Metadata type
  WEB_LINK_COMPONENT_KEY_TYPE_PHONE_METADATA = 7;
  // Zip Postal Metadata type
  WEB_LINK_COMPONENT_KEY_TYPE_ZIP_POSTAL_METADATA = 8;
  // Custom Account Data key type
  WEB_LINK_COMPONENT_KEY_TYPE_CUSTOM_ACCOUNT_DATA_KEY = 9;
  // Sip Header Data type
  WEB_LINK_COMPONENT_KEY_TYPE_SIP_HEADER_DATA = 10;
  // Integration Data type
  WEB_LINK_COMPONENT_KEY_TYPE_INTEGRATION_DATA = 11;
  // Journey Data type
  WEB_LINK_COMPONENT_KEY_TYPE_JOURNEY_DATA = 12;
}

// WebLinkParameter contains a key and web link component
message WebLinkParameter {
  // The key for a web link parameter
  string key = 1;
  // The web link components for a web link parameter
  repeated WebLinkComponent components = 2;
}

// DataDipConfig is a proto recreation of the XML structure.
message DataDipConfig {
  message Param {
    string name = 1;
    string value = 2;
    string param_type = 3;
    repeated ParamTypeValueTuple composite_value = 4;
  }

  message ParamTypeValueTuple {
    string key = 1;
    string value = 2;
  }

  message ReturnData {
    string name = 1;
    string access_type = 2;
  }

  message Header {
    string name = 1;
    string value = 2;
    string header_type = 3;
    repeated ParamTypeValueTuple param_type_value_tuples = 4;
  }

  string config_name = 1;
  string config_type = 2;
  string remote_url = 3;
  repeated ParamTypeValueTuple param_type_value_tuples = 4;
  repeated Param params = 5;
  repeated ReturnData data = 6;
  string request_method = 7;
  int64 xml_client_property_sid = 8;
  repeated Header headers = 9;
}

// IntegrationLink defines a link between a hunt group and an integration.
message IntegrationLink {
  // The ID of the integration.
  int64 integration_id = 1;
  // The sid or the unique ID of the integration link stored in the database.
  int64 parameter_sid = 2;
  // The display name of the integration link.
  string name = 3;
  // The description of the integration link.
  string description = 4;
  // The ID of the method to use for the integration link.
  int64 method_id = 5;
  // The order of the integration link, used for sorting.
  int64 order = 6;
  // The parameters used for the integration link.
  repeated IntegrationLinkParameter parameters = 7;
  // The configuration name of the integration link.
  string configuration_name = 8;
  // The sid of the hunt group which the integration link is associated with.
  int64 hunt_group_sid = 9;
}

// IntegrationLinkParameter defines a parameter for an integration link.
message IntegrationLinkParameter {
  // The parameter key.
  string key = 1;
  // The sub parameters of the parameter.
  repeated IntegrationLinkSubParameter sub_parameters = 2;
}

// IntegrationLinkSubParameter defines a sub parameter for an integration link.
message IntegrationLinkSubParameter {
  // The sub parameter key is the field name of the integration link.
  string key = 1;
  // The parts of the sub parameter.
  repeated IntegrationLinkSubParameterPart parts = 2;
}

// IntegrationLinkSubParameterPart defines a part of a sub parameter for an integration link.
message IntegrationLinkSubParameterPart {
  // The ID for the contact field.
  int64 contact_field_sid = 1;
  // The value of the sub parameter part.
  string helper_value = 2;
  // The source type of the sub parameter part.
  ParameterSourceType parameter_source_type = 3;
}

// ParameterSourceType defines the type of parameter source.
enum ParameterSourceType {
  PARAMETER_SOURCE_TYPE_UNSPECIFIED = 0;
  PARAMETER_SOURCE_TYPE_STATIC_TEXT = 1;

  PARAMETER_SOURCE_TYPE_CFD_ID = 100;

  PARAMETER_SOURCE_TYPE_AGENT_ID = 200;
  PARAMETER_SOURCE_TYPE_AGENT_FIRST_NAME = 201;
  PARAMETER_SOURCE_TYPE_AGENT_LAST_NAME = 202;
  PARAMETER_SOURCE_TYPE_AGENT_USERNAME = 203;
  PARAMETER_SOURCE_TYPE_PARTNER_AGENT_ID = 204;
  PARAMETER_SOURCE_TYPE_HG_ID = 205;
  PARAMETER_SOURCE_TYPE_HG_NAME = 206;
  PARAMETER_SOURCE_TYPE_HG_TYPE = 207;
  PARAMETER_SOURCE_TYPE_CONSUMER_PHONE = 208;
  PARAMETER_SOURCE_TYPE_CALLER_ID = 209;
  PARAMETER_SOURCE_TYPE_CALL_ID = 210;
  PARAMETER_SOURCE_TYPE_GROUP_ID = 211;
  PARAMETER_SOURCE_TYPE_AGENT_SESSION_ID = 212;

  PARAMETER_SOURCE_TYPE_DATA_DIP = 300;

  PARAMETER_SOURCE_TYPE_IVR_DATA = 400;

  PARAMETER_SOURCE_TYPE_DATA_COLLECT = 500;

  PARAMETER_SOURCE_TYPE_PHONE_METADATA_AREA_CODE = 600;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_CARRIER = 601;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_CENTRAL_OFFICE_CODE = 602;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_CITY = 603;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_COUNTRY_CODE = 604;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_SUBSCRIBER_NUMBER = 605;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_ISO_CODE = 606;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_INTERNATIONAL_PREFIX = 607;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_LANGUAGE = 608;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_LATITUDE = 609;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_LONGITUDE = 610;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_MAXIMUM_BLOCK_NUMBER = 611;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_MINIMUM_BLOCK_NUMBER = 612;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_NATIONAL_DESTINATION = 613;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_NATIONAL_PREFIX = 614;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_NUMBER_BLOCK_ID = 615;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_NUMBER_TYPE = 616;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_USES_NDC = 617;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_DAYLIGHT_SAVINGS = 618;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_PREFIX = 619;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_REGION_CODE = 620;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_REGION_NAME = 621;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_SPECIAL_SERVICE_CODE_1 = 622;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_SPECIAL_SERVICE_CODE_2 = 623;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_SPECIAL_SERVICE_CODE_3 = 624;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_SPECIAL_SERVICE_CODE_4 = 625;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_TIME_ZONE = 626;
  PARAMETER_SOURCE_TYPE_PHONE_METADATA_UTC_OFFSET = 627;

  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_CODE_1 = 700;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_CODE_2 = 701;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_CODE_3 = 702;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_NAME_1 = 703;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_NAME_2 = 704;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ADMIN_NAME_3 = 705;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_AREA_CODE = 706;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_CITY_NAME = 707;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_CITY_TYPE = 708;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_COUNTRY_CODE = 709;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_ISO_CODE = 710;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_COUNTRY_NAME = 711;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_COUNTRY_FPS_CODE = 712;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_LATITUDE = 713;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_POSITION_ACCURACY = 714;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_LONGITUDE = 715;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_METROPOLITAN_AREA = 716;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_DAYLIGHT_SAVINGS = 717;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_PLACE_NAME = 718;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_POSTAL_CODE = 719;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_POSTAL_CODE_KEY = 720;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_POSTAL_TYPE = 721;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_PROVICE_ABBREVIATION = 722;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_PROVINCE_NAME = 723;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_STATE_FPS_CODE = 724;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_TIME_ZONE = 725;
  PARAMETER_SOURCE_TYPE_ZIP_METADATA_UTC_OFFSET = 726;

  PARAMETER_SOURCE_TYPE_CUSTOM_ACCOUNT_DATA = 800;

  PARAMETER_SOURCE_TYPE_SIP_HEADER_DATA = 900;

  PARAMETER_SOURCE_TYPE_INTEGRATION_DATA = 1000;

  PARAMETER_SOURCE_TYPE_JOURNEY_DATA = 1100;
}

// AgentTrigger is the entity for agent triggers.
message AgentTrigger {
  // The sid of the agent trigger
  int64 agent_trigger_sid = 1;
  // The description of the agent trigger
  string description = 2;
  // The agent status option to use for the trigger
  AgentStatusOption agent_status_option = 3;
  // The action option to use for the trigger
  TriggerActionOption trigger_action_option = 4;
}

message AgentStatusOption {
  // The status of the agent on which the trigger is based
  AgentStatus agent_status = 1;
  // The duration of the trigger (in seconds)
  // Used for agent status: all but Logged In
  int64 duration = 2;
  // The pause code to use for the trigger
  // Use pause code only if either system_pause_code or custom_pause_code is set
  // Used for agent status: Paused
  TriggerPauseCode pause_code = 3;
  // The call types to use for the trigger
  // Used for agent status: On Call, Wrap Up
  TriggerCallTypes call_types = 4;
  // Whether to use the scheduled callback for the trigger
  // Used for agent status: Manual Dial Call
  bool scheduled_callback_present = 5;
}

// AgentStatus is the status of the agent on which the trigger is based
enum AgentStatus {
  // 0 explicitly means unspecified or invalid.
  AGENT_STATUS_UNSPECIFIED = 0;
  // The status for when the agent is logged in
  AGENT_STATUS_LOGGED_IN = 1;
  // The status for when the agent is waiting
  AGENT_STATUS_WAITING = 2;
  // The status for when the agent is paused
  AGENT_STATUS_PAUSED = 3;
  // The status for when the agent is on call
  AGENT_STATUS_ON_CALL = 4;
  // The status for when the agent is on a transfer call
  AGENT_STATUS_TRANSFER_CALL = 5;
  // The status for when the agent is on a transfer call and the transfer is lost
  AGENT_STATUS_TRANSFER_LOST = 6;
  // The status for when the agent is on a transfer call and the transfer target is lost
  AGENT_STATUS_TRANSFER_TARGET_LOST = 7;
  // The status for when the agent is on a preview call
  AGENT_STATUS_PREVIEW_CALL = 8;
  // The status for when the agent is on a manual dial call
  AGENT_STATUS_MANUAL_DIAL_CALL = 9;
  // The status for when the agent is wrapping up the call
  AGENT_STATUS_WRAP_UP = 10;
}

// TriggerPauseCode is the pause code to use for the trigger
message TriggerPauseCode {
  oneof pause_code {
    // The system pause code to use for the trigger
    SystemPauseCode system_pause_code = 1;
    // The custom pause code to use for the trigger
    // It is name of a pause code from a pause code set
    string custom_pause_code = 2;
  }
}

// SystemPauseCode controls if a system Pause code is being used
enum SystemPauseCode {
  // 0 explicitly means unspecified or invalid.
  SYSTEM_PAUSE_CODE_UNSPECIFIED = 0;
  // The code for when the agent triggers the advance to paused action
  SYSTEM_PAUSE_CODE_AGENT_TRIGGER_ADVANCE_TO_PAUSED = 1;
  // The code for when the agent triggers the change password action
  SYSTEM_PAUSE_CODE_CHANGE_PASSWORD = 2;
  // The code for when the agent triggers the check voice mail action
  SYSTEM_PAUSE_CODE_CHECK_VOICE_MAIL = 3;
  // The code for when the agent triggers manually approve calls action
  SYSTEM_PAUSE_CODE_MANUALLY_APPROVE_CALLS = 4;
}

// TriggerCallTypes is the call types to use for the trigger
message TriggerCallTypes {
  // The call type for outbound calls
  bool outbound = 1;
  // The call type for inbound calls
  bool inbound = 2;
  // The call type for internal calls
  bool manual = 3;
  // The call type for preview calls
  bool preview = 4;
}

message TriggerActionOption {
  // The action to take when the trigger is activated
  TriggerAction action = 1;
  // The message to be displayed when the trigger is activated
  // Used for action: Display Message
  string display_message = 2;
  // The status to advance to when the trigger is activated
  // Used for action: Advance Status
  // Following are the valid status transitions:
  // Waiting -> Paused
  // Paused -> Waiting
  // On Call -> Wrap Up
  // Preview Call -> On Call, Waiting
  // Manual Dial Call -> Waiting
  // Wrap Up -> Waiting, Paused
  AgentStatus advance_to_status = 3;
  // The sid of the web link to execute when the trigger is activated
  // Used for action: Execute Web Link
  int64 web_link_sid = 4;
  // The sid of the integration link to execute when the trigger is activated
  // Used for action: Execute Integration Link
  int64 integration_link_sid = 5;
}

// TriggerAction is the action to take when the trigger is activated
enum TriggerAction {
  // 0 explicitly means unspecified or invalid.
  TRIGGER_ACTION_UNSPECIFIED = 0;
  // The action to advance the agent to a status
  // Used for agent status: all but Logged In and all Transfer statuses
  TRIGGER_ACTION_ADVANCE_TO_STATUS = 1;
  // The action to display a message
  TRIGGER_ACTION_DISPLAY_MESSAGE = 2;
  // The action to eject the agent
  TRIGGER_ACTION_EJECT_AGENT = 3;
  // The action to execute a web link
  TRIGGER_ACTION_EXECUTE_WEB_LINK = 4;
  // The action to execute an integration link
  TRIGGER_ACTION_EXECUTE_INTEGRATION_LINK = 5;
}

// HuntGroupScript represents a hunt group script
message HuntGroupScript {
  // The unique sid for the hunt group script
  int64 script_sid = 1;
  // The name of the hunt group script
  string name = 2;
  // The description of the hunt group script
  string description = 3;
  // Boolean describing whether or not to sue auto script progression
  bool auto_script_progression = 4;
  // Categorizes between HuntGroup and Campaign scripts
  ScriptCategory script_category = 5;
  // List of acts for a HuntGroupScript
  repeated Act acts = 6;
}

// An act within a HuntGroupScript
message Act {
  // A list of Dispositions for an Act
  repeated Disposition dispositions = 1;
  // A list of Verbiages for an Act
  repeated Verbiage verbiages = 2;
  // A list of Conditional Navigations for an act
  repeated ConditionalNavigation conditional_navigations = 3;
  // The default target act for a conditional navigation
  int64 default_conditional_navigation_target = 4;
  // Recording behavior when arriving to a specific page/act
  // Can be 3 values -1 means stop recording, 1 means start recording
  // 0 means no change on recording behavior
  int64 page_arrival_recording_control = 5;
  // Recording behavior when exitig a specific page/act
  int64 page_exit_recording_control = 6;
}

// A disposition within an Act
message Disposition {
  // A list of response strings for a disposition
  repeated string response_options = 1;
  // The header for the disposition
  string header = 2;
  // The prompt for the disposition
  string prompt = 3;
  // The order of the disposition
  int64 order = 4;
  // Required answer boolean for disposition
  bool required = 5;
  // The default response value for a desposition
  string default_value = 6;
  // Determines whether to bypass auto script progression
  bool bypass_auto_script_progression = 7;
  // The response type of the disposition
  ScriptResponseType response_type = 8;
  // The response evaluator if regex is selected as a response_type
  int64 response_evaluator = 9;
}

// A verbiage within an Act
message Verbiage {
  // The order of the verbiage
  int64 order = 1;
  // The header of the verbiage
  string header = 2;
  // the body of the verbiage
  string body = 3;
}

// A conditional navigation within an Act
message ConditionalNavigation {
  // The target act/page index of the ConditionalNavigation
  int64 target_act_index = 1;
  // The ComplexBooleanExpressionList of the ConditionalNavigation
  ComplexBooleanExpressionList complex_boolean_expression_list = 2;
}

// ComplexBooleanExpressionList contains a list of complex boolean expressions
message ComplexBooleanExpressionList {
  // The list of complex boolean expressions for ComplexBooleanExpressionList
  repeated ComplexBooleanExpression complex_boolean_expressions = 1;
}

// ComplexBooleanExpression contains a compare expression list
message ComplexBooleanExpression {
  // The compare expression list for ComplexBooleanExpression
  CompareExpressionList compare_expression_list = 1;
}

// CompareExpressionList contains a list of simple compare expressions
message CompareExpressionList {
  // The list of simple compare expressions for a CompareExpressionList
  repeated SimpleCompareExpression simple_compare_expression = 1;
}

// SimpleCompareExpression describes a simple compare expression
message SimpleCompareExpression {
  // The operator type of SimpleCompareExpression
  CompareOperatorType operator_type = 1;
  // The act index of the SimpleCompareExpression
  int64 act_index = 2;
  // The disposition header of the SimpleCompareExpression
  string disposition_header = 3;
  // The compare value of the SimpleCompareExpression
  string compare_value = 4;
}

// ResponseEvalutor manages regex
message ResponseEvaluator {
  // ID of the response evaluator.
  string response_evaluator_id = 1;
  // Org ID the response evaluator is associated with.
  string org_id = 2;
  // Name of the evaluator.
  string name = 3;
  // The evaluator description, optional.
  string description = 4;
  // Regex pattern.
  string regular_expression = 5;
}

// ScriptCategory differentiates between Hunt Group and Campaign scripts
enum ScriptCategory {
  // Not specified
  SCRIPT_CATEGORY_UNSPECIFIED = 0;
  // Hunt Group script category
  SCRIPT_CATEGORY_HUNT_GROUP = 1;
  // Campaign script category
  SCRIPT_CATEGORY_CAMPAIGN = 2;
}

// ScriptResponseType differentiates between script responses
enum ScriptResponseType {
  // Not specified
  SCRIPT_RESPONSE_TYPE_UNSPECIFIED = 0;
  // Drop down select menu
  SCRIPT_RESPONSE_TYPE_DROP_DOWN_SELECT_MENU = 1;
  // Multiple select menu
  SCRIPT_RESPONSE_TYPE_MULTIPLE_SELECT_MENU = 2;
  // Check boxes
  SCRIPT_RESPONSE_TYPE_CHECK_BOXES = 3;
  // Radio buttons
  SCRIPT_RESPONSE_TYPE_RADIO_BUTTONS = 4;
  // Text box
  SCRIPT_RESPONSE_TYPE_TEXT_BOX = 5;
  // Alphanumeric text box
  SCRIPT_RESPONSE_TYPE_TEXT_BOX_ALPHANUMERIC = 6;
  // Numerical only text box
  SCRIPT_RESPONSE_TYPE_TEXT_BOX_NUMERICAL = 7;
  // Text verification field
  SCRIPT_RESPONSE_TYPE_TEXT_VERIFICATION_FIELD = 8;
  // Text area
  SCRIPT_RESPONSE_TYPE_TEXT_AREA = 9;
  // Regular expression field
  SCRIPT_RESPONSE_TYPE_REGULAR_EXPRESSION_FIELD = 10;
  // Regular expression area
  SCRIPT_RESPONSE_TYPE_REGULAR_EXPRESSION_AREA = 11;
}

// CompareOperatorType differentiates between operator types in a SimpleCompareExpression
enum CompareOperatorType {
  // Not specified
  COMPARE_OPERATOR_TYPE_UNSPECIFIED = 0;
  // Equals
  COMPARE_OPERATOR_TYPE_EQUALS = 1;
  // Not equals
  COMPARE_OPERATOR_TYPE_NOT_EQUALS = 2;
  // Greater than
  COMPARE_OPERATOR_TYPE_GREATER_THAN = 3;
  // Less than
  COMPARE_OPERATOR_TYPE_LESS_THAN = 4;
  // Greater than or equal to
  COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO = 5;
  // Less than or equal to
  COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO = 6;
  // Text contains
  COMPARE_OPERATOR_TYPE_CONTAINS = 7;
  // Text does not contain
  COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN = 8;
  // Blank
  COMPARE_OPERATOR_TYPE_BLANK = 9;
  // Not blank
  COMPARE_OPERATOR_TYPE_NOT_BALNK = 10;
  // Text starts with
  COMPARE_OPERATOR_TYPE_STARTS_WITH = 11;
  // Text does not start with
  COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH = 12;
  // Text ends with
  COMPARE_OPERATOR_TYPE_ENDS_WITH = 13;
  // Text does not end with
  COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH = 14;
}
